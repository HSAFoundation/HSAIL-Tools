// University of Illinois/NCSA
// Open Source License
//
// Copyright (c) 2013-2015, Advanced Micro Devices, Inc.
// All rights reserved.
//
// Developed by:
//
//     HSA Team
//
//     Advanced Micro Devices, Inc
//
//     www.amd.com
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of
// this software and associated documentation files (the "Software"), to deal with
// the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
// of the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:
//
//     * Redistributions of source code must retain the above copyright notice,
//       this list of conditions and the following disclaimers.
//
//     * Redistributions in binary form must reproduce the above copyright notice,
//       this list of conditions and the following disclaimers in the
//       documentation and/or other materials provided with the distribution.
//
//     * Neither the names of the LLVM Team, University of Illinois at
//       Urbana-Champaign, nor the names of its contributors may be used to
//       endorse or promote products derived from this Software without specific
//       prior written permission.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
// CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS WITH THE
// SOFTWARE.

// ============================================================================
// ============================================================================
// DESCRIPTION OF IMAGE EXTENSION
// ============================================================================
// ============================================================================

// ============================================================================
// RD_IMAGE

Req rdimage
{
    type     = (s, u, f)32, f16;
    itype    = roimg;
    ctype    = (s, f)32;
    geometry = 1d, 2d, 3d, 1da, 2da, 2ddepth, 2dadepth;
    eqclass  = any;

    s1 = reg.itype;
    s2 = reg.samp;
    s4 = null;
    s5 = null;

    { geometry = 1d       ? d0 = vec.4; s3 = (reg, imm).ctype }
    { geometry = 2d, 1da  ? d0 = vec.4; s3 = vec.2.ctype      }
    { geometry = 3d, 2da  ? d0 = vec.4; s3 = vec.3.ctype      }
    { geometry = 2ddepth  ? d0 = reg;   s3 = vec.2.ctype      }
    { geometry = 2dadepth ? d0 = reg;   s3 = vec.3.ctype      }
    ;
}

Inst rdimage(Image, image, rdimage)

// ============================================================================
// LDIMAGE, STIMAGE

Req ld.st.image
{
    type     = (s, u, f)32, f16;
    ctype    = u32;
    geometry = any;
    eqclass  = any;
}

Req ld.image
{
    ld.st.image;
    itype = roimg, rwimg;

    { geometry = 1d, 1db  ? d0 = vec.4; s2 = (reg, imm).ctype }
    { geometry = 2d, 1da  ? d0 = vec.4; s2 = vec.2.ctype      }
    { geometry = 3d, 2da  ? d0 = vec.4; s2 = vec.3.ctype      }
    { geometry = 2ddepth  ? d0 = reg;   s2 = vec.2.ctype      }
    { geometry = 2dadepth ? d0 = reg;   s2 = vec.3.ctype      }
    ;

    s1 = reg.itype;
    s3 = null;
    s4 = null;
    s5 = null;
}

Req st.image
{
    ld.st.image;
    itype = woimg, rwimg;

    { geometry = 1d, 1db  ? s0 = vec.4; s2 = (reg, imm).ctype }
    { geometry = 2d, 1da  ? s0 = vec.4; s2 = vec.2.ctype      }
    { geometry = 3d, 2da  ? s0 = vec.4; s2 = vec.3.ctype      }
    { geometry = 2ddepth  ? s0 = reg;   s2 = vec.2.ctype      }
    { geometry = 2dadepth ? s0 = reg;   s2 = vec.3.ctype      }
    ;

    s1 = reg.itype;
    s3 = null;
    s4 = null;
    s5 = null;
}

Inst ldimage(Image, image, ld.image)
Inst stimage(Image, image, st.image)

// ============================================================================
// QUERY

Req queryimage
{
    type     = u32;
    itype    = roimg, rwimg, woimg;
    geometry = any;
    iprop    = any;

    { iprop = width, channeltype, channelorder ? geometry = any                            }
    { iprop = depth                            ? geometry = 3d                             }
    { iprop = array                            ? geometry = 1da, 2da, 2dadepth             }
    { iprop = height                           ? geometry = 2d, 3d, 2da, 2ddepth, 2dadepth }
    ;

    d0 = reg;
    s1 = reg.itype;
    s2 = null;
    s3 = null;
    s4 = null;
    s5 = null;
}

Req querysampler
{
    type  = u32;
    sprop = any;

    d0 = reg;
    s1 = reg.samp;
    s2 = null;
    s3 = null;
    s4 = null;
    s5 = null;
}

Inst queryimage  (Query.Image,   image, queryimage)
Inst querysampler(Query.Sampler, image, querysampler)

// ============================================================================
// IMAGEFENCE

Req imagefence
{
    type = none;

    s0 = null;
    s1 = null;
    s2 = null;
    s3 = null;
    s4 = null;
    s5 = null;
}

Inst imagefence(Basic, image, imagefence)

// ============================================================================
