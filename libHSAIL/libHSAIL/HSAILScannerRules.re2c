// University of Illinois/NCSA
// Open Source License
//
// Copyright (c) 2013, Advanced Micro Devices, Inc.
// All rights reserved.
//
// Developed by:
//
//     HSA Team
//
//     Advanced Micro Devices, Inc
//
//     www.amd.com
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of
// this software and associated documentation files (the "Software"), to deal with
// the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
// of the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:
//
//     * Redistributions of source code must retain the above copyright notice,
//       this list of conditions and the following disclaimers.
//
//     * Redistributions in binary form must reproduce the above copyright notice,
//       this list of conditions and the following disclaimers in the
//       documentation and/or other materials provided with the distribution.
//
//     * Neither the names of the LLVM Team, University of Illinois at
//       Urbana-Champaign, nor the names of its contributors may be used to
//       endorse or promote products derived from this Software without specific
//       prior written permission.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
// CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS WITH THE
// SOFTWARE.
/*!re2c

    re2c:define:YYCTYPE  = "char";
    re2c:define:YYCURSOR = curPos;
    re2c:define:YYLIMIT  = m_end;
    re2c:define:YYMARKER = marker;
    re2c:define:YYCTXMARKER = ctxMarker;
    re2c:yyfill:enable   = 0;
    re2c:yych:conversion = 0;

    SPACE = [ \t];
    NL    = "\r"? "\n";
    ANY   = [^];

    ID    = [a-zA-Z_][a-zA-Z0-9_\.]*;

    EOKW = [^a-zA-Z0-9_];
    EOMOD = [^a-zA-Z0-9];

    DCD   = [0-9];
    HXD   = [0-9a-fA-F];

    DECIMAL = "0" | [1-9]DCD*;
    OCTAL   = "0"[0-7]+;
    HEX     = "0"[xX]HXD+;

    INTEGER = DECIMAL|OCTAL|HEX;

    HLFHEX  = "0"[hH]HXD{4};
    SGLHEX  = "0"[fF]HXD{8};
    DBLHEX  = "0"[dD]HXD{16};

    EXP = [Ee][+-]?DCD+;
    FLOAT1 = DCD+  "."  DCD*   EXP?;
    FLOAT2 =       "."  DCD+   EXP?;
    FLOAT3 = DCD+ ("."  DCD*)? EXP;
    FLOAT = [+-]? (FLOAT1|FLOAT2|FLOAT3);

    C99FLT  = [+-]?"0"[xX]HXD+("."HXD*)?[pP][+-]?DCD+;
*/

#define YYFILL(n) { readChars(n); }

#include <strstream>

namespace HSAIL_ASM
{

void Scanner::readSingleStringLiteral(Token &t, std::string& outString)
{
    using namespace std;
    const char * &curPos = t.m_text.end;
    while(true) {
        const char *const prevPos = curPos;
        const char *marker;

/*!re2c
    re2c:indent:string = "        ";

    "\\" [0-7]{1,3}       {
        unsigned int v;
        SRef const s(prevPos+1,curPos);
        istrstream is(s.begin,s.length());
        is >> oct >> v;
        if (is.fail() || v>std::numeric_limits<unsigned char>::max()) {
            syntaxError(curPos, "Invalid character code");
        }
        outString.push_back(static_cast<unsigned char>(v));
        continue;
    }
    "\\" [xX][0-9A-Fa-f]{1,2} {
        unsigned int v;
        SRef const s(prevPos+2,curPos);
        istrstream is(s.begin,s.length());
        is >> hex >> v;
        if (is.fail() || v>std::numeric_limits<unsigned char>::max()) {
            syntaxError(curPos, "Invalid character code");
        }
        outString.push_back(static_cast<unsigned char>(v));
        continue;
    }
    "\\\\"         { outString.push_back('\134'); continue; }
    "\\'"          { outString.push_back('\047'); continue; }
    "\\\""         { outString.push_back('\042'); continue; }
    "\\?"          { outString.push_back('\077'); continue; }
    "\\a"          { outString.push_back('\007'); continue; }
    "\\b"          { outString.push_back('\010'); continue; }
    "\\f"          { outString.push_back('\006'); continue; }
    "\\n"          { outString.push_back('\012'); continue; }
    "\\r"          { outString.push_back('\015'); continue; }
    "\\t"          { outString.push_back('\011'); continue; }
    "\\v"          { outString.push_back('\013'); continue; }
    "\""           { curPos = prevPos; break; }
    "\\"           { syntaxError(curPos, "Invalid escape sequence"); }
    [\r\n]         { syntaxError(prevPos, "Runaway string literal"); }
    [^\r\n\\\"]+   { outString.insert(outString.end(), prevPos, curPos); continue; }
*/
    }
}

ETokens Scanner::scanModifier(EScanContext ctx, Scanner::Token &t)
{
    const char* &curPos = t.m_text.end;
    int &brigId = t.m_brigId;
    const char *marker = NULL;
    const char *ctxMarker = NULL;
/*!re2c
    re2c:indent:string = "    ";

@print $scanner{_mods_}

    "_1d"/EOMOD        { brigId = Brig::BRIG_GEOMETRY_1D;  return EMGeom; }
    "_1db"/EOMOD       { brigId = Brig::BRIG_GEOMETRY_1DB; return EMGeom; }
    "_1da"/EOMOD       { brigId = Brig::BRIG_GEOMETRY_1DA; return EMGeom; }
    "_3d"/EOMOD        { brigId = Brig::BRIG_GEOMETRY_3D;  return EMGeom; }
    "_2d"/EOMOD        { brigId = Brig::BRIG_GEOMETRY_2D;  return EMGeom; }
    "_2da"/EOMOD       { brigId = Brig::BRIG_GEOMETRY_2DA; return EMGeom; }
    "_2ddepth"/EOMOD   { brigId = Brig::BRIG_GEOMETRY_2DDEPTH; return EMGeom; }
    "_2dadepth"/EOMOD  { brigId = Brig::BRIG_GEOMETRY_2DADEPTH; return EMGeom; }

    "_height"/EOMOD       { brigId = Brig::BRIG_IMAGE_QUERY_HEIGHT;       return EMImageQuery; }
    "_depth"/EOMOD        { brigId = Brig::BRIG_IMAGE_QUERY_DEPTH;        return EMImageQuery; }
    "_array"/EOMOD        { brigId = Brig::BRIG_IMAGE_QUERY_ARRAY;        return EMImageQuery; }
    "_channelorder"/EOMOD { brigId = Brig::BRIG_IMAGE_QUERY_CHANNELORDER; return EMImageQuery; }
    "_channeltype"/EOMOD  { brigId = Brig::BRIG_IMAGE_QUERY_CHANNELTYPE;  return EMImageQuery; }
    "_width"/EOMOD        { switch(ctx) {
                      case EInstModifierInstQueryContext: brigId = Brig::BRIG_IMAGE_QUERY_WIDTH; return EMImageQuery;
                      default:                            brigId = 0;                            return EMWidth;
                      }
                    }
    "_align"/EOMOD     { brigId = 0; return EMAlign;  }
    "_v2"/EOMOD        { brigId = 2; return EMVector; }
    "_v3"/EOMOD        { brigId = 3; return EMVector; }
    "_v4"/EOMOD        { brigId = 4; return EMVector; }
    "_equiv"/EOMOD     { brigId = 0; return EMEquiv;  }
    "_ftz"/EOMOD       { brigId = 0; return EMFTZ;    }
    "_region"/EOMOD    { brigId = Brig::BRIG_SEGMENT_EXTSPACE0; return EMSegment; }
    "_const"/EOMOD     { brigId = Brig::BRIG_MEMORY_CONST;      return EMConst;   }
    "_nonull"/EOMOD    { brigId = Brig::BRIG_SEG_CVT_NONULL;    return EMNoNull;  }

    ""           { brigId = 0; return EMNone; }
*/
}

void Scanner::scanEmbeddedText(Scanner::Token &t)
{
    const char* &curPos = t.m_text.end;
    while(true) {
        const char *const prevPos = curPos;
/*!re2c
        re2c:indent:string = "        ";
        NL       { nextLine(curPos);
                   continue; }
        "#" ">"  { break; }
        "\000"   { curPos = prevPos; syntaxError(curPos, "Premature end of embedded text"); }
        ANY      { continue; }
*/
    };
}

ETokens Scanner::scanDefault(EScanContext ctx, Scanner::Token &t)
{
    const char* &curPos = t.m_text.end;
    int &brigId = t.m_brigId;
    const char *marker = NULL;
    const char *ctxMarker = NULL;
/*!re2c
    re2c:indent:string  = "        ";

    "<" "#"              { scanEmbeddedText(t); return EEmbeddedText; }
    "{"                  { return ELCurl;  }
    "}"                  { return ERCurl;  }
    "("                  { return ELParen; }
    ")"                  { return ERParen; }
    "["                  { return ELBrace; }
    "]"                  { return ERBrace; }
    "<"                  { return ELAngle; }
    ">"                  { return ERAngle; }
    "."                  { return EDot;    }
    ","                  { return EComma;  }
    ";"                  { return ESemi;   }
    ":"                  { return EColon;  }
    "+"                  { return EPlus;   }
    "-"                  { return EMinus;  }
    "="                  { return EEqual;  }
    "\""                 { return EQuot;   }

    "module"/EOKW             { return EKWModule; }
    "kernel"/EOKW             { return EKWKernel; }
    "function"/EOKW           { return EKWFunction; }
    "pragma"/EOKW             { return EKWPragma; }
    "section"/EOKW            { return EKWSection; }
    "rti"/EOKW                { return EKWRTI; }
    "loc"/EOKW                { return EKWLoc; }
    "extension"/EOKW          { return EKWExtension; }
    "signature"/EOKW          { return EKWSignature; }
    "all"/EOKW                { return EKWWidthAll;  }
    "fbarrier"/EOKW           { return EKWFbarrier; }
    "prog"/EOKW               { brigId = Brig::BRIG_LINKAGE_PROGRAM; return ELinkage; }
    "decl"/EOKW               { brigId = 1; return EKWDecl; }
    "indirect"/EOKW           { brigId = 1; return EKWIndirect; }
    "width"/EOKW              { return EKWImageWidth; }
    "height"/EOKW             { return EKWImageHeight; }
    "depth"/EOKW              { switch(ctx) {
                           case EImageOrderContext: brigId = Brig::BRIG_CHANNEL_ORDER_DEPTH; return EImageOrder;
                           default: return EKWImageDepth;
                           } }
    "agent"/EOKW              { brigId = Brig::BRIG_ALLOCATION_AGENT; return EAllocKind; }
    "channel_type"/EOKW       { return EKWImageChannelType; }
    "channel_order"/EOKW      { return EKWImageChannelOrder; }
    "geometry"/EOKW           { return EKWImageGeometry; }
    "array"/EOKW              { return EKWImageArray; }
    "addressing"/EOKW         { return EKWSamplerAddressing; }
    "coord"/EOKW              { return EKWSamplerCoord; }
    "filter"/EOKW             { return EKWSamplerFilter; }
    "align"/EOKW              { return EKWAlign; }
    "alloc"/EOKW              { return EKWAlloc; }
    "const"/EOKW              { brigId = 1; return EKWConst; }

    "WAVESIZE"/EOKW           { return EWaveSizeMacro; }

    "nearest"/EOKW            { brigId = Brig::BRIG_FILTER_NEAREST;    return ESamplerFilter; }
    "linear"/EOKW             { brigId = Brig::BRIG_FILTER_LINEAR;     return ESamplerFilter; }

    "global"/EOMOD             { brigId = Brig::BRIG_SEGMENT_GLOBAL;    return ESegment; }
    "group"/EOMOD              { brigId = Brig::BRIG_SEGMENT_GROUP;     return ESegment; }
    "private"/EOMOD            { brigId = Brig::BRIG_SEGMENT_PRIVATE;   return ESegment; }
    "kernarg"/EOMOD            { brigId = Brig::BRIG_SEGMENT_KERNARG;   return ESegment; }
    "readonly"/EOMOD           { brigId = Brig::BRIG_SEGMENT_READONLY;  return ESegment; }
    "spill"/EOMOD              { brigId = Brig::BRIG_SEGMENT_SPILL;     return ESegment; }
    "arg"/EOMOD                { brigId = Brig::BRIG_SEGMENT_ARG;       return ESegment; }
    "flat"/EOMOD               { brigId = Brig::BRIG_SEGMENT_FLAT;      return ESegment; }

    "u8"/EOKW                 { brigId = Brig::BRIG_TYPE_U8;  return ETypedLiteral; }
    "s8"/EOKW                 { brigId = Brig::BRIG_TYPE_S8;  return ETypedLiteral; }
    "u16"/EOKW                { brigId = Brig::BRIG_TYPE_U16; return ETypedLiteral; }
    "s16"/EOKW                { brigId = Brig::BRIG_TYPE_S16; return ETypedLiteral; }
    "f16"/EOKW                { brigId = Brig::BRIG_TYPE_F16; return ETypedLiteral; }
    "u32"/EOKW                { brigId = Brig::BRIG_TYPE_U32; return ETypedLiteral; }
    "s32"/EOKW                { brigId = Brig::BRIG_TYPE_S32; return ETypedLiteral; }
    "f32"/EOKW                { brigId = Brig::BRIG_TYPE_F32; return ETypedLiteral; }
    "u64"/EOKW                { brigId = Brig::BRIG_TYPE_U64; return ETypedLiteral; }
    "s64"/EOKW                { brigId = Brig::BRIG_TYPE_S64; return ETypedLiteral; }
    "f64"/EOKW                { brigId = Brig::BRIG_TYPE_F64; return ETypedLiteral; }

    "u8x4"/EOKW               { brigId = Brig::BRIG_TYPE_U8X4;  return ETypedLiteral; }
    "s8x4"/EOKW               { brigId = Brig::BRIG_TYPE_S8X4;  return ETypedLiteral; }
    "u8x8"/EOKW               { brigId = Brig::BRIG_TYPE_U8X8;  return ETypedLiteral; }
    "s8x8"/EOKW               { brigId = Brig::BRIG_TYPE_S8X8;  return ETypedLiteral; }
    "u8x16"/EOKW              { brigId = Brig::BRIG_TYPE_U8X16; return ETypedLiteral; }
    "s8x16"/EOKW              { brigId = Brig::BRIG_TYPE_S8X16; return ETypedLiteral; }
    "u16x2"/EOKW              { brigId = Brig::BRIG_TYPE_U16X2; return ETypedLiteral; }
    "s16x2"/EOKW              { brigId = Brig::BRIG_TYPE_S16X2; return ETypedLiteral; }
    "f16x2"/EOKW              { brigId = Brig::BRIG_TYPE_F16X2; return ETypedLiteral; }
    "u16x4"/EOKW              { brigId = Brig::BRIG_TYPE_U16X4; return ETypedLiteral; }
    "s16x4"/EOKW              { brigId = Brig::BRIG_TYPE_S16X4; return ETypedLiteral; }
    "f16x4"/EOKW              { brigId = Brig::BRIG_TYPE_F16X4; return ETypedLiteral; }
    "u16x8"/EOKW              { brigId = Brig::BRIG_TYPE_U16X8; return ETypedLiteral; }
    "s16x8"/EOKW              { brigId = Brig::BRIG_TYPE_S16X8; return ETypedLiteral; }
    "f16x8"/EOKW              { brigId = Brig::BRIG_TYPE_F16X8; return ETypedLiteral; }
    "u32x2"/EOKW              { brigId = Brig::BRIG_TYPE_U32X2; return ETypedLiteral; }
    "s32x2"/EOKW              { brigId = Brig::BRIG_TYPE_S32X2; return ETypedLiteral; }
    "f32x2"/EOKW              { brigId = Brig::BRIG_TYPE_F32X2; return ETypedLiteral; }
    "u32x4"/EOKW              { brigId = Brig::BRIG_TYPE_U32X4; return ETypedLiteral; }
    "s32x4"/EOKW              { brigId = Brig::BRIG_TYPE_S32X4; return ETypedLiteral; }
    "f32x4"/EOKW              { brigId = Brig::BRIG_TYPE_F32X4; return ETypedLiteral; }
    "u64x2"/EOKW              { brigId = Brig::BRIG_TYPE_U64X2; return ETypedLiteral; }
    "s64x2"/EOKW              { brigId = Brig::BRIG_TYPE_S64X2; return ETypedLiteral; }
    "f64x2"/EOKW              { brigId = Brig::BRIG_TYPE_F64X2; return ETypedLiteral; }

    "sig32"/EOKW              { brigId = Brig::BRIG_TYPE_SIG32; return ETypedLiteral; }
    "sig64"/EOKW              { brigId = Brig::BRIG_TYPE_SIG64; return ETypedLiteral; }

    "rwimg"/EOKW              { brigId = Brig::BRIG_TYPE_RWIMG; return EKWImage; }
    "roimg"/EOKW              { brigId = Brig::BRIG_TYPE_ROIMG; return EKWImage; }
    "woimg"/EOKW              { brigId = Brig::BRIG_TYPE_WOIMG; return EKWImage; }
    "samp"/EOKW               { brigId = Brig::BRIG_TYPE_SAMP;  return EKWSampler; }

    "$default"/EOKW           { brigId = Brig::BRIG_ROUND_FLOAT_DEFAULT;   return EDefaultRound; }
    "$near"/EOKW              { brigId = Brig::BRIG_ROUND_FLOAT_NEAR_EVEN; return EDefaultRound; }
    "$zero"/EOKW              { brigId = Brig::BRIG_ROUND_FLOAT_ZERO;      return EDefaultRound; }

@print $scanner{EControl}

@print $scanner{EImageFormat}

@print $scanner{EImageOrder}

@print $scanner{EImageGeometry}

@print $scanner{ESamplerAddressingMode}

@print $scanner{ESamplerCoord}

@print $scanner{Instructions}

@print $scanner{ETargetMachine}

@print $scanner{ETargetProfile}

@print $scanner{EDefaultRound}

    "@" ID               { return ELabel;    }
    "&" ID               { return EIDStatic; }
    "%" ID               { return EIDLocal;  }
    "$" [csdq] DECIMAL   { return ERegister; }

    DECIMAL              { brigId = ELitDecimal; return EIntLiteral; }
    OCTAL                { brigId = ELitOctal;   return EIntLiteral; }
    HEX                  { brigId = ELitHex;     return EIntLiteral; }

    FLOAT [hH]           { brigId = ELitDecimalWithSuffix; return EF16Literal; }
    FLOAT [fF]           { brigId = ELitDecimalWithSuffix; return EF32Literal; }
    FLOAT [dD]           { brigId = ELitDecimalWithSuffix; return EF64Literal; }
    FLOAT                { brigId = ELitDecimal;           return EF64Literal; }

    HLFHEX               { brigId = ELitHex; return EF16Literal; }
    SGLHEX               { brigId = ELitHex; return EF32Literal; }
    DBLHEX               { brigId = ELitHex; return EF64Literal; }

    C99FLT [hH]          { brigId = ELitC99; return EF16Literal; }
    C99FLT [fF]          { brigId = ELitC99; return EF32Literal; }
    C99FLT [dD]?         { brigId = ELitC99; return EF64Literal; }

    "/" "/" [^\r\n\000]*       { return ESLComment; }
    "/" "*"              { return EMLCommentStart; }
    "\000"               { --curPos; return EEndOfSource; }

    ""                   { syntaxError(curPos, "Syntax error"); }
*/

}

bool Scanner::continueMLComment()
{
    assert(m_peekToken==NULL);
    const char* begin = m_curToken->m_text.end;
    Token& t = newToken();
    m_curToken = &t;
    t.m_lineStart = m_lineStart;
    t.m_lineNum = m_lineNum;
    int &brigId = t.m_brigId;
    const char *marker = NULL;
    const char *ctxMarker = NULL;
    const char* curPos = begin;

/*!re2c
  re2c:indent:string = "        ";
  "*" "/"    { t.m_text.end = t.m_text.begin = curPos; return false; }
  NL         { nextLine(curPos); begin = curPos; goto NLdone; }
  ANY        { goto NLdone; }
*/

NLdone:

  while(true) {
    const char* prevPos = curPos;
/*!re2c
    re2c:indent:string = "        ";

    "*" "/"  { t.m_text.begin = begin; t.m_text.end = prevPos; return true; }
    NL       { t.m_text.begin = begin; t.m_text.end = prevPos; return true; }
    "\000"   { t.m_text.begin = begin; t.m_text.end = prevPos; syntaxError(prevPos, "Premature end of comment"); }
    ANY      { continue; }
*/
  }
}

void Scanner::skipWhitespaces(Scanner::Token& t)
{
    const char *curPos = t.m_text.begin;
    while(true) {
        const char *const prevPos = curPos;
        const char *marker;
/*!re2c
        re2c:indent:string  = "        ";

        SPACE           { continue; }
        NL              { nextLine(curPos); continue; }
        "\000"          { curPos = prevPos; break; }
        ""              { break; }
*/
    }
    t.m_text.begin = t.m_text.end = curPos;
}

} // end namespace
