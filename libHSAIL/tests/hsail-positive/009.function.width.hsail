version 0:96:$full:$large;

function &TestFunc12a(arg_b32 %out_arg0)(arg_s32 %in_arg0, arg_u32 %in_arg1)
{
	ret;
};

static function &TestFunc12b(arg_b32 %out_arg0)(arg_s32 %in_arg0, arg_u32 %in_arg1);

signature &TestSig(arg_b32)(arg_s32, arg_u32);

function &TestCalls()(arg_u32 %in_arg0)
{
	ldc_u64 $d1, &TestFunc12a;

	{
		arg_b32 %oarg0;
		arg_s32 %iarg0;
		arg_u32 %iarg1;

		st_arg_s32	0, [%iarg0];
		st_arg_u32	0, [%iarg1];

		call  $d1 (%oarg0) (%iarg0, %iarg1) [&TestFunc12a];
	}       		
	{
		arg_b32 %oarg0;
		arg_s32 %iarg0;
		arg_u32 %iarg1;

		st_arg_s32	0, [%iarg0];
		st_arg_u32	0, [%iarg1];

		call_width(1)  $d1 (%oarg0) (%iarg0, %iarg1) [&TestFunc12a, &TestFunc12b];
	}       		
	{
		arg_b32 %oarg0;
		arg_s32 %iarg0;
		arg_u32 %iarg1;

		st_arg_s32	0, [%iarg0];
		st_arg_u32	0, [%iarg1];

		call_width(1024)  $d1 (%oarg0) (%iarg0, %iarg1) [&TestFunc12a, &TestFunc12b];
	}       		
	{
		arg_b32 %oarg0;
		arg_s32 %iarg0;
		arg_u32 %iarg1;

		st_arg_s32	0, [%iarg0];
		st_arg_u32	0, [%iarg1];

		call_width(all)  $d1 (%oarg0) (%iarg0, %iarg1) &TestSig;
	}       		
	{
		arg_b32 %oarg0;
		arg_s32 %iarg0;
		arg_u32 %iarg1;

		st_arg_s32	0, [%iarg0];
		st_arg_u32	0, [%iarg1];

		call_width(WAVESIZE)  $d1 (%oarg0) (%iarg0, %iarg1) &TestSig;
	}       		
	
	ret;
};

static function &TestFunc12b(arg_b32 %out_arg0)(arg_s32 %in_arg0, arg_u32 %in_arg1)
{
	ret;
};
