// University of Illinois/NCSA
// Open Source License
// 
// Copyright (c) 2013, Advanced Micro Devices, Inc.
// All rights reserved.
// 
// Developed by:
// 
//     HSA Team
// 
//     Advanced Micro Devices, Inc
// 
//     www.amd.com
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy of
// this software and associated documentation files (the "Software"), to deal with
// the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
// of the Software, and to permit persons to whom the Software is furnished to do
// so, subject to the following conditions:
// 
//     * Redistributions of source code must retain the above copyright notice,
//       this list of conditions and the following disclaimers.
// 
//     * Redistributions in binary form must reproduce the above copyright notice,
//       this list of conditions and the following disclaimers in the
//       documentation and/or other materials provided with the distribution.
// 
//     * Neither the names of the LLVM Team, University of Illinois at
//       Urbana-Champaign, nor the names of its contributors may be used to
//       endorse or promote products derived from this Software without specific
//       prior written permission.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
// CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS WITH THE
// SOFTWARE.
version 1:0:$full:$small;

function &TestFunc()()
{
    ret;
};

function &TestFunc01()(arg_u8x8 %in_arg0)
{
@lab1:
    ret;
};

function &TestFunc12(arg_s32x2 %out_arg0)(
    arg_u32 %in_arg0,
    arg_u32 %in_arg1)
{
@lab1:
    ret;
};

function &TestCalls()()
{
@lab1:
    {
        //call	&TestFunc () ();
    }
    {
        //call	&TestFunc ();
    }
    {
        //call	&TestFunc;
    }
    {
        //call	$s0;
    }
    {
        //call_width(2147483648)	$s0;
    }
    {
        //call_width(all)	$s0;
    }
    {
        //call_width(WAVESIZE)	$s0;
    }
    ret;
};


global_u32 &x;
group_u32 &g;

global_roimg &roimage = {width = 5, height = 4, depth = 6, format = unorm_short_101010, order = rgbx};
global_rwimg &rwimage = {width = 5, height = 4, depth = 6, format = unorm_short_101010, order = rgbx};
global_samp  &samp    = {coord = normalized, filter = nearest, boundaryU = clamp, boundaryV = clamp, boundaryW = clamp};

kernel &TestKernel(kernarg_u32 %arg)
{
    lda_kernarg_u32   $s4, [%arg];
};

function &Testinst()(arg_u32 %arg)
{

    //---------------------------------------

    global_b8   %globalVar[8];   lda_global_u32   $s4, [%globalVar];
    group_b8    %groupVar[8];    lda_group_u32    $s4, [%groupVar];
    private_b8  %privateVar[8];  lda_private_u32  $s4, [%privateVar];
    readonly_b8 %readonlyVar[8]; lda_readonly_u32 $s4, [%readonlyVar];
    spill_b8    %spillVar[8];    lda_spill_u32    $s4, [%spillVar];
                                 lda_arg_u32      $s4, [%arg];

    private_b8 %stacklike[8];
    lda_private_u32 $s4, [%stacklike];

    group_b8 %gs[8];
    lda_group_u32 $s4, [%gs];
    lda_group_u32 $s4, [%gs][12];
    lda_group_u32 $s4, [%gs][$s0 + 12];
    lda_group_u32 $s4, [$s0 + 12];
    lda_group_u32 $s4, [$s0];

    global_u32 %g[3];
    lda_global_u32 $s1, [%g];
    lda_global_u32 $s1, [$s7 + 4];

    stof_global_u32_u32 $s0, $s1;
    lda_global_u32      $s1, [$s1 + 8];
    lda_global_u32      $s1, [800];
    lda_global_u32      $s1, [$s1];

    //---------------------------------------

@lab:
    ldc_u32 $s1, &TestFunc;
    ldc_u32 $s2, @lab;


    //---------------------------------------

    segmentp_group_b1_u32 $c1, $s0;

    //---------------------------------------

    stof_spill_u32_u32      $s1, $s1;
    stof_private_u32_u32    $s1, $s1;
    stof_global_u32_u32     $s1, $s1;

    ftos_group_u32_u32      $s1, $s2;
    ftos_global_u32_u32     $s1, $s2;

    //---------------------------------------

    // dst expansion
    ld_global_s8                $s1, [&x][$s3+4];
    ld_global_s8                $d1, [&x][$s3+4];
    ld_global_u8                $s1, [&x][$s3+4];
    ld_global_u8                $d1, [&x][$s3+4];
    ld_global_s16               $s1, [&x][$s3+4];
    ld_global_s16               $d1, [&x];
    ld_global_u16               $s1, [&x];
    ld_global_u16               $d1, [&x];
    ld_global_s32               $d1, [&x];
    ld_global_u32               $d1, [&x];

    ld_v2_s8                   ($s1,$s2), [$s3+4];
    ld_v2_s8                   ($d1,$d2), [$s3+4];
    ld_v2_u8                   ($s1,$s2), [$s3+4];
    ld_v2_u8                   ($d1,$d2), [$s3+4];
    ld_v2_s16                  ($s1,$s2), [$s3+4];
    ld_v2_s16                  ($d1,$d2), [$s3+4];
    ld_v2_u16                  ($s1,$s2), [$s3+4];
    ld_v2_u16                  ($d1,$d2), [$s3+4];
    ld_v2_s32                  ($s1,$s2), [$s3+4];
    ld_v2_s32                  ($d1,$d2), [$s3+4];
    ld_v2_u32                  ($s1,$s2), [$s3+4];
    ld_v2_u32                  ($d1,$d2), [$s3+4];

    ld_v4_s8                   ($s1,$s2,$s3,$s4), [$s3+4];
    ld_v4_s8                   ($d1,$d2,$d3,$d4), [$s3+4];
    ld_v4_u8                   ($s1,$s2,$s3,$s4), [$s3+4];
    ld_v4_u8                   ($d1,$d2,$d3,$d4), [$s3+4];
    ld_v4_s16                  ($s1,$s2,$s3,$s4), [$s3+4];
    ld_v4_s16                  ($d1,$d2,$d3,$d4), [$s3+4];
    ld_v4_u16                  ($s1,$s2,$s3,$s4), [$s3+4];
    ld_v4_u16                  ($d1,$d2,$d3,$d4), [$s3+4];
    ld_v4_s32                  ($s1,$s2,$s3,$s4), [$s3+4];
    ld_v4_s32                  ($d1,$d2,$d3,$d4), [$s3+4];
    ld_v4_u32                  ($s1,$s2,$s3,$s4), [$s3+4];
    ld_v4_u32                  ($d1,$d2,$d3,$d4), [$s3+4];

    // segment rules
    ld_global_f32               $s1, [&x][$s0];
    ld_arg_acq_equiv(2)_f32     $s1, [%arg][$s0];
    ld_group_equiv(0)_u32       $s0, [&g][$s0];

    // b128
    ld_global_b128              $q1, [$s0];

    // width
    ld_width(64)_global_f16     $s1, [$s0];
    ld_width(all)_f16           $s1, [$s0];
    ld_width(WAVESIZE)_f16      $s1, [$s0];

    // opaque refs
    ld_global_roimg               $d1, [&roimage];
    ld_global_rwimg               $d1, [&rwimage];
    ld_global_samp                $d1, [&samp];

    // generic cases
    ld_global_s32               $s1, [&x];
    ld_global_f16               $s1, [&x];
    ld_global_f64               $d1, [&x];
    ld_global_aligned_f64       $d1, [&x];
    ld_global_acq_f32           $s1, [&x];
    ld_global_acq_f64           $d1, [&x];
    ld_global_acq_equiv(2)_f32  $s1, [&x];
    ld_global_acq_equiv(2)_f32  $s1, [$s3+4];

    ld_private_f32              $s1, [$s3+4];
    ld_spill_f32                $s1, [$s3+4];
    ld_f32                      $s1, [$s3+4];
    ld_aligned_f32              $s1, [$s3+4];
    ld_v3_s32                   ($s1,$s7,$s6), [$s3+4];
    ld_v4_f32                   ($s1,$s7,$s6,$s2), [$s3+4];
    ld_v2_equiv(9)_f32          ($s1,$s2), [$s3+4];
    ld_equiv(1)_u64             $d3, [$s4+32];
    ld_v2_equiv(1)_u64          ($d1,$d2), [$s0+32];
    ld_v4_width(8)_f32          ($s1,$s7,$s6,$s2), [$s3+4];
    ld_equiv(1)_u64             $d6, [128];
    ld_v2_width(4)_equiv(9)_f32 ($s1,$s2), [$s3+4];
    ld_width(64)_u32            $s0, [$s2];
    ld_width(1024)_equiv(1)_u64 $d6, [128];
    ld_width(all)_equiv(1)_u64  $d6, [128];

    //---------------------------------------

    // src expansion
    st_global_s8                $s1, [&x][$s3+4];
    st_global_s8                $d1, [&x][$s3+4];
    st_global_u8                $s1, [&x][$s3+4];
    st_global_u8                $d1, [&x][$s3+4];
    st_global_s16               $s1, [&x];
    st_global_s16               $d1, [&x];
    st_global_u16               $s1, [&x];
    st_global_u16               $d1, [&x];
    st_global_s32               $d1, [&x];
    st_global_u32               $d1, [&x];

    st_v2_s8                   ($s1,$s2), [$s3+4];
    st_v2_s8                   ($d1,$d2), [$s3+4];
    st_v2_u8                   ($s1,$s2), [$s3+4];
    st_v2_u8                   ($d1,$d2), [$s3+4];
    st_v2_s16                  ($s1,$s2), [$s3+4];
    st_v2_s16                  ($d1,$d2), [$s3+4];
    st_v2_u16                  ($s1,$s2), [$s3+4];
    st_v2_u16                  ($d1,$d2), [$s3+4];
    st_v2_s32                  ($s1,$s2), [$s3+4];
    st_v2_s32                  ($d1,$d2), [$s3+4];
    st_v2_u32                  ($s1,$s2), [$s3+4];
    st_v2_u32                  ($d1,$d2), [$s3+4];

    st_v4_s8                   ($s1,$s2,$s3,$s4), [$s3+4];
    st_v4_s8                   ($d1,$d2,$d3,$d4), [$s3+4];
    st_v4_u8                   ($s1,$s2,$s3,$s4), [$s3+4];
    st_v4_u8                   ($d1,$d2,$d3,$d4), [$s3+4];
    st_v4_s16                  ($s1,$s2,$s3,$s4), [$s3+4];
    st_v4_s16                  ($d1,$d2,$d3,$d4), [$s3+4];
    st_v4_u16                  ($s1,$s2,$s3,$s4), [$s3+4];
    st_v4_u16                  ($d1,$d2,$d3,$d4), [$s3+4];
    st_v4_s32                  ($s1,$s2,$s3,$s4), [$s3+4];
    st_v4_s32                  ($d1,$d2,$d3,$d4), [$s3+4];
    st_v4_u32                  ($s1,$s2,$s3,$s4), [$s3+4];
    st_v4_u32                  ($d1,$d2,$d3,$d4), [$s3+4];

    // segment rules
    st_global_f32               $s1, [&x][$s0];
    st_arg_equiv(2)_f32         $s1, [%arg][$s0];
    st_group_equiv(0)_u32       $s0, [&g][$s0];

    // b128
    st_global_b128              $q1, [$s0];

    // opaque refs
    st_global_roimg            $d1, [&roimage];
    st_global_rwimg            $d1, [&rwimage];
    st_global_samp             $d1, [&samp];

    st_global_f32              $s1, [&x];
    st_global_s32              $d1, [&x]; // src of 'st' may be wider than type size
    st_global_aligned_f32      $s1, [&x];
    st_global_u8               $s1, [&x];
    st_global_u16              $s1, [&x];
    st_global_u32              $s1, [&x];
    st_global_f16              $s1, [&x];
    st_global_f64              $d1, [&x];
    st_global_aligned_f64      $d1, [&x];
    st_global_rel_f32          $s1, [&x];
    st_global_rel_f64          $d1, [&x];
    st_global_rel_equiv(2)_f32 $s1, [&x];

    st_rel_equiv(2)_f32      $s1, [$s3+4];
    st_private_f32           $s1, [$s3+4];
    st_global_f32            $s1, [$s3+4];
    st_spill_f32             $s1, [$s3+4];
    st_arg_f32               $s1, [$s3+4];
    st_f32                   $s1, [$s3+4];
    st_aligned_f32           $s1, [$s3+4];
    st_v4_f32                ($s1,$s1,$s6,$s2), [$s3+4];
    st_v2_equiv(9)_f32       ($s1,$s2),         [$s3+4];
    st_v3_s32                ($s1,$s1,$s6),     [$s3+4];
    st_group_equiv(0)_u32    $s0,               [$s2];
    st_equiv(1)_u64          $d3,               [$s4+32];
    st_aligned_equiv(1)_u64  $d3,               [$s4+32];
    st_v2_equiv(1)_u64       ($d1,$d2),         [$s0+32];
    st_equiv(1)_u64          $d6,               [128];

    //---------------------------------------

    atomic_and_global_ar_b32    $s1, [&x][$s0], 23;
    atomic_and_global_b32       $s1, [&x], 23;
    atomic_or_global_ar_b64     $d1, [&x], 23;
    atomic_or_global_b64        $d1, [&x], 23;
    atomic_xor_global_ar_b64    $d1, [&x], 23;
    atomic_xor_global_b64       $d1, [&x], 23;
    atomic_cas_global_ar_b64    $d1, [&x], 23, 12;
    atomic_cas_global_b64       $d1, [&x], 23, 1;
    atomic_exch_global_ar_b64   $d1, [&x], 23;
    atomic_exch_global_b64      $d1, [&x], 23;
    atomic_add_global_ar_u64    $d1, [&x], 23;
    atomic_add_global_s64       $d1, [&x], 23;
    atomic_sub_global_ar_u64    $d1, [&x], 23;
    atomic_sub_global_s64       $d1, [&x], 23;
    atomic_inc_global_ar_u64    $d1, [&x], 23;
    atomic_inc_global_u64       $d1, [&x], 23;
    atomic_dec_global_ar_u64    $d1, [&x], 23;
    atomic_dec_global_u64       $d1, [&x], 23;
    atomic_max_global_ar_s64    $d1, [&x], 23;
    atomic_max_global_u64       $d1, [&x], 23;
    atomic_min_global_ar_s64    $d1, [&x], 23;
    atomic_min_global_u64       $d1, [&x], 23;
    atomic_and_global_ar_b32    $s1, [&x], 23;
    atomic_and_global_b32       $s1, [&x], 23;
    atomic_or_global_ar_b64     $d1, [&x], 23;
    atomic_or_global_b64        $d1, [&x], 23;
    atomic_xor_global_ar_b64    $d1, [&x], 23;
    atomic_xor_global_b64       $d1, [&x], 23;
    atomic_cas_global_ar_b64    $d1, [&x], 23, 12;
    atomic_cas_global_b64       $d1, [&x], 23, 1;
    atomic_exch_global_ar_b64   $d1, [&x], 23;
    atomic_exch_global_b64      $d1, [&x], 23;
    atomic_add_global_ar_u64    $d1, [&x], 23;
    atomic_add_global_s64       $d1, [&x], 23;
    atomic_sub_global_ar_u64    $d1, [&x], 23;
    atomic_sub_global_s64       $d1, [&x], 23;
    atomic_inc_global_ar_u64    $d1, [&x], 23;
    atomic_inc_global_u64       $d1, [&x], 23;
    atomic_dec_global_ar_u64    $d1, [&x], 23;
    atomic_dec_global_u64       $d1, [&x], 23;
    atomic_max_global_ar_s64    $d1, [&x], 23;
    atomic_max_global_u64       $d1, [&x], 23;
    atomic_min_global_ar_s64    $d1, [&x], 23;
    atomic_min_global_u64       $d1, [&x], 23;

    atomic_and_group_b32    $s1, [&g][$s0], 23;
    atomic_or_group_b64     $d1, [&g], 23;
    atomic_xor_group_b64    $d1, [&g], 23;
    atomic_cas_group_b64    $d1, [&g], 23, 9;
    atomic_exch_group_b64   $d1, [&g], 23;
    atomic_add_group_u64    $d1, [&g], 23;
    atomic_sub_group_u64    $d1, [&g], 23;
    atomic_inc_group_u64    $d1, [&g], 23;
    atomic_dec_group_u64    $d1, [&g], 23;
    atomic_max_group_u64    $d1, [&g], 23;
    atomic_min_group_u64    $d1, [&g], 23;
    atomic_and_group_b32    $s1, [&g], 23;
    atomic_or_group_b64     $d1, [&g], 23;
    atomic_xor_group_b64    $d1, [&g], 23;
    atomic_cas_group_b64    $d1, [&g], 23, 9;
    atomic_exch_group_b64   $d1, [&g], 23;
    atomic_add_group_u64    $d1, [&g], 23;
    atomic_sub_group_u64    $d1, [&g], 23;
    atomic_inc_group_u64    $d1, [&g], 23;
    atomic_dec_group_u64    $d1, [&g], 23;
    atomic_max_group_s64    $d1, [&g], 23;
    atomic_min_group_s64    $d1, [&g], 23;

    atomic_and_b32          $s1, [$s2], 23;
    atomic_or_b64           $d1, [$s4], 23;
    atomic_xor_b64          $d1, [$s3], 23;
    atomic_cas_b64          $d1, [$s5], 23, 12;
    atomic_exch_b64         $d1, [$s4], 23;
    atomic_add_u64          $d1, [$s6], 23;
    atomic_sub_u64          $d1, [$s3], 23;
    atomic_inc_u64          $d1, [$s3], 23;
    atomic_dec_u64          $d1, [$s4], 23;
    atomic_max_u64          $d1, [$s5], 23;
    atomic_and_b32          $s1, [$s2], 23;
    atomic_or_b64           $d1, [$s4], 23;
    atomic_xor_b64          $d1, [$s3], 23;
    atomic_cas_b64          $d1, [$s5], 23, 12;
    atomic_exch_b64         $d1, [$s4], 23;
    atomic_add_s64          $d1, [$s6], 23;
    atomic_sub_s64          $d1, [$s3], 23;
    atomic_inc_u64          $d1, [$s3], 23;
    atomic_dec_u64          $d1, [$s4], 23;
    atomic_max_u64          $d1, [$s5], 23;
    atomic_min_u64          $d1, [$s7], 23;
    atomic_min_u64          $d1, [$s7], 23;

    //---------------------------------------

    atomicnoret_and_global_ar_b32   [&x], 23;
    atomicnoret_and_global_b32      [&x], 23;
    atomicnoret_or_global_ar_b64    [&x], 23;
    atomicnoret_or_global_b64       [&x], 23;
    atomicnoret_xor_global_ar_b64   [&x], 23;
    atomicnoret_xor_global_b64      [&x], 23;
    atomicnoret_cas_global_ar_b64   [&x], 23, 12;
    atomicnoret_cas_global_b64      [&x], 23, 1;
    atomicnoret_add_global_ar_u64   [&x], 23;
    atomicnoret_add_global_s64      [&x], 23;
    atomicnoret_sub_global_ar_u64   [&x], 23;
    atomicnoret_sub_global_s64      [&x], 23;
    atomicnoret_inc_global_ar_u64   [&x], 23;
    atomicnoret_inc_global_u64      [&x], 23;
    atomicnoret_dec_global_ar_u64   [&x], 23;
    atomicnoret_dec_global_u64      [&x], 23;
    atomicnoret_max_global_ar_u64   [&x], 23;
    atomicnoret_max_global_s64      [&x], 23;
    atomicnoret_min_global_ar_u64   [&x], 23;
    atomicnoret_min_global_s64      [&x], 23;

    atomicnoret_and_group_b32   [&g][4], 23;
    atomicnoret_or_group_b64    [&g][$s0], 23;
    atomicnoret_xor_group_b64   [&g], 23;
    atomicnoret_cas_group_b64   [&g], 23, 9;
    atomicnoret_add_group_u64   [&g], 23;
    atomicnoret_sub_group_u64   [&g], 23;
    atomicnoret_inc_group_u64   [&g], 23;
    atomicnoret_dec_group_u64   [&g], 23;
    atomicnoret_max_group_u64   [&g], 23;
    atomicnoret_min_group_u64   [&g], 23;

    atomicnoret_and_global_b32   [&x][4], 23;
    atomicnoret_or_global_b64    [&x][$s0], 23;
    atomicnoret_xor_global_b64   [&x], 23;
    atomicnoret_cas_global_b64   [&x], 23, 9;
    atomicnoret_add_global_u64   [&x], 23;
    atomicnoret_sub_global_u64   [&x], 23;
    atomicnoret_inc_global_u64   [&x], 23;
    atomicnoret_dec_global_u64   [&x], 23;
    atomicnoret_max_global_u64   [&x], 23;
    atomicnoret_min_global_u64   [&x], 23;

    atomicnoret_and_b32     [$s1], 23;
    atomicnoret_or_b64      [$s2], 23;
    atomicnoret_xor_b64     [$s3], 23;
    atomicnoret_cas_b64     [$s2], 23, 12;
    atomicnoret_add_s64     [$s4], 23;
    atomicnoret_sub_s64     [$s5], 23;
    atomicnoret_inc_u64     [$s2], 23;
    atomicnoret_dec_u64     [$s6], 23;
    atomicnoret_max_s64     [$s3], 23;
    atomicnoret_min_s64     [$s4], 23;


    //---------------------------------------

    cbr_width(2)    $c0, @label1;
    cbr_width(4)    $c0, @label1;
    cbr_width(8)    $c0, @label1;
    cbr_width(16)    $c0, @label1;
    cbr_width(32)    $c0, @label1;
    cbr_width(64)    $c0, @label1;
    cbr_width(128)    $c0, @label1;
    cbr_width(256)    $c0, @label1;
    cbr_width(512)    $c0, @label1;
    cbr_width(1024)    $c0, @label1;
    cbr_width(2048)    $c0, @label1;
    cbr_width(4096)    $c0, @label1;
    cbr_width(8192)    $c0, @label1;
    cbr_width(16384)    $c0, @label1;
    cbr_width(32768)    $c0, @label1;
    cbr_width(65536)    $c0, @label1;
    cbr_width(131072)    $c0, @label1;
    cbr_width(262144)    $c0, @label1;
    cbr_width(524288)    $c0, @label1;
    cbr_width(1048576)    $c0, @label1;
    cbr_width(2097152)    $c0, @label1;
    cbr_width(4194304)    $c0, @label1;
    cbr_width(8388608)    $c0, @label1;
    cbr_width(16777216)    $c0, @label1;
    cbr_width(33554432)    $c0, @label1;
    cbr_width(67108864)    $c0, @label1;
    cbr_width(134217728)    $c0, @label1;
    cbr_width(268435456)    $c0, @label1;
    cbr_width(536870912)    $c0, @label1;
    cbr_width(1073741824)    $c0, @label1;
    cbr_width(2147483648)    $c0, @label1;
    cbr_width(all)          $c0, @label2;
    cbr_width(WAVESIZE)     $c0, @label2;
    cbr                     $c0, @label3;
    brn             @label2;

@label:

    cbr            $c1, $s1;
    cbr_width(2)   $c1, $s1;
    cbr_width(all) $c1, $s1;

    global_u32 %jumptable[3]  = {@label, @label2, @label3};
    global_u32 %jumptable2[3] = {@label, @label2, @label3};

    cbr             $c1, $s1, [@targets];
    cbr_width(2)    $c1, $s1, [%jumptable];
    cbr_width(all)  $c1, $s1, [@targets];

    @targets: labeltargets @label1, @label2, @label3;

    brn $s1, [@targets];

@label1:
    abs_s32 $s1, $s2;

@label2:
    brn $s1, [%jumptable2];

@label3:
    abs_s32 $s1, $s2;

    //---------------------------------------

    dispatchptr_global_u32      $s0; 
    qptr_global_u32             $s0;    
    nullptr_group_u32           $s0;    
    nullptr_global_u32          $s1;    
    nullptr_flat_u32            $s1;    

};