// Generated by HSAILTestGen (version 3.1) with the following options: -package=single -iset=CORE -model=large -profile=base
module &module:1:0:$base:$large:$default;

function &TestFunc()()
{

@aux_label_0:
	ret;
};
indirect function &TestIndirFunc()()
{

@aux_label_1:
	ret;
};

kernel &TestKernel()
{

@aux_label_2:
	ret;
};
signature &TestSignature()();
global_s32 &GlobalVar[16];
group_s32 &GroupVar[16];
private_s32 &PrivateVar[16];
readonly_s32 &ReadonlyVar[16];
global_sig64 &GlobalSig64[8];
readonly_sig64 &ReadonlySig64[8];
fbarrier &Fbarrier;

kernel &Test()
{
	spill_s32 %SpillVar[16];
	// 
	// Next sample
	// 
	add_u32	$s0, $s0, $s0;
	// 
	add_u32	$s0, -1, $s0;
	add_u32	$s0, WAVESIZE, $s0;
	add_u32	$s0, $s0, -1;
	add_u32	$s0, $s0, WAVESIZE;
	// 
	// Next sample
	// 
	add_u64	$d0, $d0, $d0;
	// 
	add_u64	$d0, -1, $d0;
	add_u64	$d0, WAVESIZE, $d0;
	add_u64	$d0, $d0, -1;
	add_u64	$d0, $d0, WAVESIZE;
	// 
	// Next sample
	// 
	add_s32	$s0, $s0, $s0;
	// 
	add_s32	$s0, -1, $s0;
	add_s32	$s0, WAVESIZE, $s0;
	add_s32	$s0, $s0, -1;
	add_s32	$s0, $s0, WAVESIZE;
	// 
	// Next sample
	// 
	add_s64	$d0, $d0, $d0;
	// 
	add_s64	$d0, -1, $d0;
	add_s64	$d0, WAVESIZE, $d0;
	add_s64	$d0, $d0, -1;
	add_s64	$d0, $d0, WAVESIZE;
	// 
	// Next sample
	// 
	add_ftz_f16	$s0, $s0, $s0;
	// 
	add_ftz_f16	$s0, 0Hffff, $s0;
	add_ftz_f16	$s0, $s0, 0Hffff;
	// 
	// Next sample
	// 
	add_ftz_f32	$s0, $s0, $s0;
	// 
	add_ftz_f32	$s0, 0Fffffffff, $s0;
	add_ftz_f32	$s0, $s0, 0Fffffffff;
	// 
	// Next sample
	// 
	add_pp_u8x4	$s0, $s0, $s0;
	// 
	add_ps_u8x4	$s0, $s0, $s0;
	add_sp_u8x4	$s0, $s0, $s0;
	add_ss_u8x4	$s0, $s0, $s0;
	add_pp_sat_u8x4	$s0, $s0, $s0;
	add_ps_sat_u8x4	$s0, $s0, $s0;
	add_sp_sat_u8x4	$s0, $s0, $s0;
	add_ss_sat_u8x4	$s0, $s0, $s0;
	add_pp_u8x4	$s0, u8x4(255,255,255,255), $s0;
	add_pp_u8x4	$s0, $s0, u8x4(255,255,255,255);
	// 
	// Next sample
	// 
	add_pp_u16x2	$s0, $s0, $s0;
	// 
	add_ps_u16x2	$s0, $s0, $s0;
	add_sp_u16x2	$s0, $s0, $s0;
	add_ss_u16x2	$s0, $s0, $s0;
	add_pp_sat_u16x2	$s0, $s0, $s0;
	add_ps_sat_u16x2	$s0, $s0, $s0;
	add_sp_sat_u16x2	$s0, $s0, $s0;
	add_ss_sat_u16x2	$s0, $s0, $s0;
	add_pp_u16x2	$s0, u16x2(-1,-1), $s0;
	add_pp_u16x2	$s0, $s0, u16x2(-1,-1);
	// 
	// Next sample
	// 
	add_pp_s8x4	$s0, $s0, $s0;
	// 
	add_ps_s8x4	$s0, $s0, $s0;
	add_sp_s8x4	$s0, $s0, $s0;
	add_ss_s8x4	$s0, $s0, $s0;
	add_pp_sat_s8x4	$s0, $s0, $s0;
	add_ps_sat_s8x4	$s0, $s0, $s0;
	add_sp_sat_s8x4	$s0, $s0, $s0;
	add_ss_sat_s8x4	$s0, $s0, $s0;
	add_pp_s8x4	$s0, s8x4(-1,-1,-1,-1), $s0;
	add_pp_s8x4	$s0, $s0, s8x4(-1,-1,-1,-1);
	// 
	// Next sample
	// 
	add_pp_s16x2	$s0, $s0, $s0;
	// 
	add_ps_s16x2	$s0, $s0, $s0;
	add_sp_s16x2	$s0, $s0, $s0;
	add_ss_s16x2	$s0, $s0, $s0;
	add_pp_sat_s16x2	$s0, $s0, $s0;
	add_ps_sat_s16x2	$s0, $s0, $s0;
	add_sp_sat_s16x2	$s0, $s0, $s0;
	add_ss_sat_s16x2	$s0, $s0, $s0;
	add_pp_s16x2	$s0, s16x2(-1,-1), $s0;
	add_pp_s16x2	$s0, $s0, s16x2(-1,-1);
	// 
	// Next sample
	// 
	add_ftz_pp_f16x2	$s0, $s0, $s0;
	// 
	add_ftz_ps_f16x2	$s0, $s0, $s0;
	add_ftz_sp_f16x2	$s0, $s0, $s0;
	add_ftz_ss_f16x2	$s0, $s0, $s0;
	add_ftz_pp_f16x2	$s0, f16x2(0Hffff,0Hffff), $s0;
	add_ftz_pp_f16x2	$s0, $s0, f16x2(0Hffff,0Hffff);
	// 
	// Next sample
	// 
	add_pp_u8x8	$d0, $d0, $d0;
	// 
	add_ps_u8x8	$d0, $d0, $d0;
	add_sp_u8x8	$d0, $d0, $d0;
	add_ss_u8x8	$d0, $d0, $d0;
	add_pp_sat_u8x8	$d0, $d0, $d0;
	add_ps_sat_u8x8	$d0, $d0, $d0;
	add_sp_sat_u8x8	$d0, $d0, $d0;
	add_ss_sat_u8x8	$d0, $d0, $d0;
	add_pp_u8x8	$d0, u8x8(255,255,255,255,255,255,255,255), $d0;
	add_pp_u8x8	$d0, $d0, u8x8(255,255,255,255,255,255,255,255);
	// 
	// Next sample
	// 
	add_pp_u16x4	$d0, $d0, $d0;
	// 
	add_ps_u16x4	$d0, $d0, $d0;
	add_sp_u16x4	$d0, $d0, $d0;
	add_ss_u16x4	$d0, $d0, $d0;
	add_pp_sat_u16x4	$d0, $d0, $d0;
	add_ps_sat_u16x4	$d0, $d0, $d0;
	add_sp_sat_u16x4	$d0, $d0, $d0;
	add_ss_sat_u16x4	$d0, $d0, $d0;
	add_pp_u16x4	$d0, u16x4(-1,-1,-1,-1), $d0;
	add_pp_u16x4	$d0, $d0, u16x4(-1,-1,-1,-1);
	// 
	// Next sample
	// 
	add_pp_u32x2	$d0, $d0, $d0;
	// 
	add_ps_u32x2	$d0, $d0, $d0;
	add_sp_u32x2	$d0, $d0, $d0;
	add_ss_u32x2	$d0, $d0, $d0;
	add_pp_sat_u32x2	$d0, $d0, $d0;
	add_ps_sat_u32x2	$d0, $d0, $d0;
	add_sp_sat_u32x2	$d0, $d0, $d0;
	add_ss_sat_u32x2	$d0, $d0, $d0;
	add_pp_u32x2	$d0, u32x2(-1,-1), $d0;
	add_pp_u32x2	$d0, $d0, u32x2(-1,-1);
	// 
	// Next sample
	// 
	add_pp_s8x8	$d0, $d0, $d0;
	// 
	add_ps_s8x8	$d0, $d0, $d0;
	add_sp_s8x8	$d0, $d0, $d0;
	add_ss_s8x8	$d0, $d0, $d0;
	add_pp_sat_s8x8	$d0, $d0, $d0;
	add_ps_sat_s8x8	$d0, $d0, $d0;
	add_sp_sat_s8x8	$d0, $d0, $d0;
	add_ss_sat_s8x8	$d0, $d0, $d0;
	add_pp_s8x8	$d0, s8x8(-1,-1,-1,-1,-1,-1,-1,-1), $d0;
	add_pp_s8x8	$d0, $d0, s8x8(-1,-1,-1,-1,-1,-1,-1,-1);
	// 
	// Next sample
	// 
	add_pp_s16x4	$d0, $d0, $d0;
	// 
	add_ps_s16x4	$d0, $d0, $d0;
	add_sp_s16x4	$d0, $d0, $d0;
	add_ss_s16x4	$d0, $d0, $d0;
	add_pp_sat_s16x4	$d0, $d0, $d0;
	add_ps_sat_s16x4	$d0, $d0, $d0;
	add_sp_sat_s16x4	$d0, $d0, $d0;
	add_ss_sat_s16x4	$d0, $d0, $d0;
	add_pp_s16x4	$d0, s16x4(-1,-1,-1,-1), $d0;
	add_pp_s16x4	$d0, $d0, s16x4(-1,-1,-1,-1);
	// 
	// Next sample
	// 
	add_pp_s32x2	$d0, $d0, $d0;
	// 
	add_ps_s32x2	$d0, $d0, $d0;
	add_sp_s32x2	$d0, $d0, $d0;
	add_ss_s32x2	$d0, $d0, $d0;
	add_pp_sat_s32x2	$d0, $d0, $d0;
	add_ps_sat_s32x2	$d0, $d0, $d0;
	add_sp_sat_s32x2	$d0, $d0, $d0;
	add_ss_sat_s32x2	$d0, $d0, $d0;
	add_pp_s32x2	$d0, s32x2(-1,-1), $d0;
	add_pp_s32x2	$d0, $d0, s32x2(-1,-1);
	// 
	// Next sample
	// 
	add_ftz_pp_f16x4	$d0, $d0, $d0;
	// 
	add_ftz_ps_f16x4	$d0, $d0, $d0;
	add_ftz_sp_f16x4	$d0, $d0, $d0;
	add_ftz_ss_f16x4	$d0, $d0, $d0;
	add_ftz_pp_f16x4	$d0, f16x4(0Hffff,0Hffff,0Hffff,0Hffff), $d0;
	add_ftz_pp_f16x4	$d0, $d0, f16x4(0Hffff,0Hffff,0Hffff,0Hffff);
	// 
	// Next sample
	// 
	add_ftz_pp_f32x2	$d0, $d0, $d0;
	// 
	add_ftz_ps_f32x2	$d0, $d0, $d0;
	add_ftz_sp_f32x2	$d0, $d0, $d0;
	add_ftz_ss_f32x2	$d0, $d0, $d0;
	add_ftz_pp_f32x2	$d0, f32x2(0Fffffffff,0Fffffffff), $d0;
	add_ftz_pp_f32x2	$d0, $d0, f32x2(0Fffffffff,0Fffffffff);
	// 
	// Next sample
	// 
	add_pp_u8x16	$q0, $q0, $q0;
	// 
	add_ps_u8x16	$q0, $q0, $q0;
	add_sp_u8x16	$q0, $q0, $q0;
	add_ss_u8x16	$q0, $q0, $q0;
	add_pp_sat_u8x16	$q0, $q0, $q0;
	add_ps_sat_u8x16	$q0, $q0, $q0;
	add_sp_sat_u8x16	$q0, $q0, $q0;
	add_ss_sat_u8x16	$q0, $q0, $q0;
	add_pp_u8x16	$q0, u8x16(0,0,0,0,0,0,0,0,107,240,55,174,50,95,28,113), $q0;
	add_pp_u8x16	$q0, $q0, u8x16(0,0,0,0,0,0,0,0,107,240,55,174,50,95,28,113);
	// 
	// Next sample
	// 
	add_pp_u16x8	$q0, $q0, $q0;
	// 
	add_ps_u16x8	$q0, $q0, $q0;
	add_sp_u16x8	$q0, $q0, $q0;
	add_ss_u16x8	$q0, $q0, $q0;
	add_pp_sat_u16x8	$q0, $q0, $q0;
	add_ps_sat_u16x8	$q0, $q0, $q0;
	add_sp_sat_u16x8	$q0, $q0, $q0;
	add_ss_sat_u16x8	$q0, $q0, $q0;
	add_pp_u16x8	$q0, u16x8(0,0,0,0,0x6bf0,0x37ae,0x325f,0x1c71), $q0;
	add_pp_u16x8	$q0, $q0, u16x8(0,0,0,0,0x6bf0,0x37ae,0x325f,0x1c71);
	// 
	// Next sample
	// 
	add_pp_u32x4	$q0, $q0, $q0;
	// 
	add_ps_u32x4	$q0, $q0, $q0;
	add_sp_u32x4	$q0, $q0, $q0;
	add_ss_u32x4	$q0, $q0, $q0;
	add_pp_sat_u32x4	$q0, $q0, $q0;
	add_ps_sat_u32x4	$q0, $q0, $q0;
	add_sp_sat_u32x4	$q0, $q0, $q0;
	add_ss_sat_u32x4	$q0, $q0, $q0;
	add_pp_u32x4	$q0, u32x4(0,0,0x6bf037ae,0x325f1c71), $q0;
	add_pp_u32x4	$q0, $q0, u32x4(0,0,0x6bf037ae,0x325f1c71);
	// 
	// Next sample
	// 
	add_pp_u64x2	$q0, $q0, $q0;
	// 
	add_ps_u64x2	$q0, $q0, $q0;
	add_sp_u64x2	$q0, $q0, $q0;
	add_ss_u64x2	$q0, $q0, $q0;
	add_pp_sat_u64x2	$q0, $q0, $q0;
	add_ps_sat_u64x2	$q0, $q0, $q0;
	add_sp_sat_u64x2	$q0, $q0, $q0;
	add_ss_sat_u64x2	$q0, $q0, $q0;
	add_pp_u64x2	$q0, u64x2(0,0x6bf037ae325f1c71), $q0;
	add_pp_u64x2	$q0, $q0, u64x2(0,0x6bf037ae325f1c71);
	// 
	// Next sample
	// 
	add_pp_s8x16	$q0, $q0, $q0;
	// 
	add_ps_s8x16	$q0, $q0, $q0;
	add_sp_s8x16	$q0, $q0, $q0;
	add_ss_s8x16	$q0, $q0, $q0;
	add_pp_sat_s8x16	$q0, $q0, $q0;
	add_ps_sat_s8x16	$q0, $q0, $q0;
	add_sp_sat_s8x16	$q0, $q0, $q0;
	add_ss_sat_s8x16	$q0, $q0, $q0;
	add_pp_s8x16	$q0, s8x16(0,0,0,0,0,0,0,0,107,-16,55,-82,50,95,28,113), $q0;
	add_pp_s8x16	$q0, $q0, s8x16(0,0,0,0,0,0,0,0,107,-16,55,-82,50,95,28,113);
	// 
	// Next sample
	// 
	add_pp_s16x8	$q0, $q0, $q0;
	// 
	add_ps_s16x8	$q0, $q0, $q0;
	add_sp_s16x8	$q0, $q0, $q0;
	add_ss_s16x8	$q0, $q0, $q0;
	add_pp_sat_s16x8	$q0, $q0, $q0;
	add_ps_sat_s16x8	$q0, $q0, $q0;
	add_sp_sat_s16x8	$q0, $q0, $q0;
	add_ss_sat_s16x8	$q0, $q0, $q0;
	add_pp_s16x8	$q0, s16x8(0,0,0,0,0x6bf0,0x37ae,0x325f,0x1c71), $q0;
	add_pp_s16x8	$q0, $q0, s16x8(0,0,0,0,0x6bf0,0x37ae,0x325f,0x1c71);
	// 
	// Next sample
	// 
	add_pp_s32x4	$q0, $q0, $q0;
	// 
	add_ps_s32x4	$q0, $q0, $q0;
	add_sp_s32x4	$q0, $q0, $q0;
	add_ss_s32x4	$q0, $q0, $q0;
	add_pp_sat_s32x4	$q0, $q0, $q0;
	add_ps_sat_s32x4	$q0, $q0, $q0;
	add_sp_sat_s32x4	$q0, $q0, $q0;
	add_ss_sat_s32x4	$q0, $q0, $q0;
	add_pp_s32x4	$q0, s32x4(0,0,0x6bf037ae,0x325f1c71), $q0;
	add_pp_s32x4	$q0, $q0, s32x4(0,0,0x6bf037ae,0x325f1c71);
	// 
	// Next sample
	// 
	add_pp_s64x2	$q0, $q0, $q0;
	// 
	add_ps_s64x2	$q0, $q0, $q0;
	add_sp_s64x2	$q0, $q0, $q0;
	add_ss_s64x2	$q0, $q0, $q0;
	add_pp_sat_s64x2	$q0, $q0, $q0;
	add_ps_sat_s64x2	$q0, $q0, $q0;
	add_sp_sat_s64x2	$q0, $q0, $q0;
	add_ss_sat_s64x2	$q0, $q0, $q0;
	add_pp_s64x2	$q0, s64x2(0,0x6bf037ae325f1c71), $q0;
	add_pp_s64x2	$q0, $q0, s64x2(0,0x6bf037ae325f1c71);
	// 
	// Next sample
	// 
	add_ftz_pp_f16x8	$q0, $q0, $q0;
	// 
	add_ftz_ps_f16x8	$q0, $q0, $q0;
	add_ftz_sp_f16x8	$q0, $q0, $q0;
	add_ftz_ss_f16x8	$q0, $q0, $q0;
	add_ftz_pp_f16x8	$q0, f16x8(0H0000,0H0000,0H0000,0H0000,0H6bf0,0H37ae,0H325f,0H1c71), $q0;
	add_ftz_pp_f16x8	$q0, $q0, f16x8(0H0000,0H0000,0H0000,0H0000,0H6bf0,0H37ae,0H325f,0H1c71);
	// 
	// Next sample
	// 
	add_ftz_pp_f32x4	$q0, $q0, $q0;
	// 
	add_ftz_ps_f32x4	$q0, $q0, $q0;
	add_ftz_sp_f32x4	$q0, $q0, $q0;
	add_ftz_ss_f32x4	$q0, $q0, $q0;
	add_ftz_pp_f32x4	$q0, f32x4(0F00000000,0F00000000,0F6bf037ae,0F325f1c71), $q0;
	add_ftz_pp_f32x4	$q0, $q0, f32x4(0F00000000,0F00000000,0F6bf037ae,0F325f1c71);
	// 
	// Next sample
	// 
	sub_u32	$s0, $s0, $s0;
	// 
	sub_u32	$s0, -1, $s0;
	sub_u32	$s0, WAVESIZE, $s0;
	sub_u32	$s0, $s0, -1;
	sub_u32	$s0, $s0, WAVESIZE;
	// 
	// Next sample
	// 
	sub_u64	$d0, $d0, $d0;
	// 
	sub_u64	$d0, -1, $d0;
	sub_u64	$d0, WAVESIZE, $d0;
	sub_u64	$d0, $d0, -1;
	sub_u64	$d0, $d0, WAVESIZE;
	// 
	// Next sample
	// 
	sub_s32	$s0, $s0, $s0;
	// 
	sub_s32	$s0, -1, $s0;
	sub_s32	$s0, WAVESIZE, $s0;
	sub_s32	$s0, $s0, -1;
	sub_s32	$s0, $s0, WAVESIZE;
	// 
	// Next sample
	// 
	sub_s64	$d0, $d0, $d0;
	// 
	sub_s64	$d0, -1, $d0;
	sub_s64	$d0, WAVESIZE, $d0;
	sub_s64	$d0, $d0, -1;
	sub_s64	$d0, $d0, WAVESIZE;
	// 
	// Next sample
	// 
	sub_ftz_f16	$s0, $s0, $s0;
	// 
	sub_ftz_f16	$s0, 0Hffff, $s0;
	sub_ftz_f16	$s0, $s0, 0Hffff;
	// 
	// Next sample
	// 
	sub_ftz_f32	$s0, $s0, $s0;
	// 
	sub_ftz_f32	$s0, 0Fffffffff, $s0;
	sub_ftz_f32	$s0, $s0, 0Fffffffff;
	// 
	// Next sample
	// 
	sub_pp_u8x4	$s0, $s0, $s0;
	// 
	sub_ps_u8x4	$s0, $s0, $s0;
	sub_sp_u8x4	$s0, $s0, $s0;
	sub_ss_u8x4	$s0, $s0, $s0;
	sub_pp_sat_u8x4	$s0, $s0, $s0;
	sub_ps_sat_u8x4	$s0, $s0, $s0;
	sub_sp_sat_u8x4	$s0, $s0, $s0;
	sub_ss_sat_u8x4	$s0, $s0, $s0;
	sub_pp_u8x4	$s0, u8x4(255,255,255,255), $s0;
	sub_pp_u8x4	$s0, $s0, u8x4(255,255,255,255);
	// 
	// Next sample
	// 
	sub_pp_u16x2	$s0, $s0, $s0;
	// 
	sub_ps_u16x2	$s0, $s0, $s0;
	sub_sp_u16x2	$s0, $s0, $s0;
	sub_ss_u16x2	$s0, $s0, $s0;
	sub_pp_sat_u16x2	$s0, $s0, $s0;
	sub_ps_sat_u16x2	$s0, $s0, $s0;
	sub_sp_sat_u16x2	$s0, $s0, $s0;
	sub_ss_sat_u16x2	$s0, $s0, $s0;
	sub_pp_u16x2	$s0, u16x2(-1,-1), $s0;
	sub_pp_u16x2	$s0, $s0, u16x2(-1,-1);
	// 
	// Next sample
	// 
	sub_pp_s8x4	$s0, $s0, $s0;
	// 
	sub_ps_s8x4	$s0, $s0, $s0;
	sub_sp_s8x4	$s0, $s0, $s0;
	sub_ss_s8x4	$s0, $s0, $s0;
	sub_pp_sat_s8x4	$s0, $s0, $s0;
	sub_ps_sat_s8x4	$s0, $s0, $s0;
	sub_sp_sat_s8x4	$s0, $s0, $s0;
	sub_ss_sat_s8x4	$s0, $s0, $s0;
	sub_pp_s8x4	$s0, s8x4(-1,-1,-1,-1), $s0;
	sub_pp_s8x4	$s0, $s0, s8x4(-1,-1,-1,-1);
	// 
	// Next sample
	// 
	sub_pp_s16x2	$s0, $s0, $s0;
	// 
	sub_ps_s16x2	$s0, $s0, $s0;
	sub_sp_s16x2	$s0, $s0, $s0;
	sub_ss_s16x2	$s0, $s0, $s0;
	sub_pp_sat_s16x2	$s0, $s0, $s0;
	sub_ps_sat_s16x2	$s0, $s0, $s0;
	sub_sp_sat_s16x2	$s0, $s0, $s0;
	sub_ss_sat_s16x2	$s0, $s0, $s0;
	sub_pp_s16x2	$s0, s16x2(-1,-1), $s0;
	sub_pp_s16x2	$s0, $s0, s16x2(-1,-1);
	// 
	// Next sample
	// 
	sub_ftz_pp_f16x2	$s0, $s0, $s0;
	// 
	sub_ftz_ps_f16x2	$s0, $s0, $s0;
	sub_ftz_sp_f16x2	$s0, $s0, $s0;
	sub_ftz_ss_f16x2	$s0, $s0, $s0;
	sub_ftz_pp_f16x2	$s0, f16x2(0Hffff,0Hffff), $s0;
	sub_ftz_pp_f16x2	$s0, $s0, f16x2(0Hffff,0Hffff);
	// 
	// Next sample
	// 
	sub_pp_u8x8	$d0, $d0, $d0;
	// 
	sub_ps_u8x8	$d0, $d0, $d0;
	sub_sp_u8x8	$d0, $d0, $d0;
	sub_ss_u8x8	$d0, $d0, $d0;
	sub_pp_sat_u8x8	$d0, $d0, $d0;
	sub_ps_sat_u8x8	$d0, $d0, $d0;
	sub_sp_sat_u8x8	$d0, $d0, $d0;
	sub_ss_sat_u8x8	$d0, $d0, $d0;
	sub_pp_u8x8	$d0, u8x8(255,255,255,255,255,255,255,255), $d0;
	sub_pp_u8x8	$d0, $d0, u8x8(255,255,255,255,255,255,255,255);
	// 
	// Next sample
	// 
	sub_pp_u16x4	$d0, $d0, $d0;
	// 
	sub_ps_u16x4	$d0, $d0, $d0;
	sub_sp_u16x4	$d0, $d0, $d0;
	sub_ss_u16x4	$d0, $d0, $d0;
	sub_pp_sat_u16x4	$d0, $d0, $d0;
	sub_ps_sat_u16x4	$d0, $d0, $d0;
	sub_sp_sat_u16x4	$d0, $d0, $d0;
	sub_ss_sat_u16x4	$d0, $d0, $d0;
	sub_pp_u16x4	$d0, u16x4(-1,-1,-1,-1), $d0;
	sub_pp_u16x4	$d0, $d0, u16x4(-1,-1,-1,-1);
	// 
	// Next sample
	// 
	sub_pp_u32x2	$d0, $d0, $d0;
	// 
	sub_ps_u32x2	$d0, $d0, $d0;
	sub_sp_u32x2	$d0, $d0, $d0;
	sub_ss_u32x2	$d0, $d0, $d0;
	sub_pp_sat_u32x2	$d0, $d0, $d0;
	sub_ps_sat_u32x2	$d0, $d0, $d0;
	sub_sp_sat_u32x2	$d0, $d0, $d0;
	sub_ss_sat_u32x2	$d0, $d0, $d0;
	sub_pp_u32x2	$d0, u32x2(-1,-1), $d0;
	sub_pp_u32x2	$d0, $d0, u32x2(-1,-1);
	// 
	// Next sample
	// 
	sub_pp_s8x8	$d0, $d0, $d0;
	// 
	sub_ps_s8x8	$d0, $d0, $d0;
	sub_sp_s8x8	$d0, $d0, $d0;
	sub_ss_s8x8	$d0, $d0, $d0;
	sub_pp_sat_s8x8	$d0, $d0, $d0;
	sub_ps_sat_s8x8	$d0, $d0, $d0;
	sub_sp_sat_s8x8	$d0, $d0, $d0;
	sub_ss_sat_s8x8	$d0, $d0, $d0;
	sub_pp_s8x8	$d0, s8x8(-1,-1,-1,-1,-1,-1,-1,-1), $d0;
	sub_pp_s8x8	$d0, $d0, s8x8(-1,-1,-1,-1,-1,-1,-1,-1);
	// 
	// Next sample
	// 
	sub_pp_s16x4	$d0, $d0, $d0;
	// 
	sub_ps_s16x4	$d0, $d0, $d0;
	sub_sp_s16x4	$d0, $d0, $d0;
	sub_ss_s16x4	$d0, $d0, $d0;
	sub_pp_sat_s16x4	$d0, $d0, $d0;
	sub_ps_sat_s16x4	$d0, $d0, $d0;
	sub_sp_sat_s16x4	$d0, $d0, $d0;
	sub_ss_sat_s16x4	$d0, $d0, $d0;
	sub_pp_s16x4	$d0, s16x4(-1,-1,-1,-1), $d0;
	sub_pp_s16x4	$d0, $d0, s16x4(-1,-1,-1,-1);
	// 
	// Next sample
	// 
	sub_pp_s32x2	$d0, $d0, $d0;
	// 
	sub_ps_s32x2	$d0, $d0, $d0;
	sub_sp_s32x2	$d0, $d0, $d0;
	sub_ss_s32x2	$d0, $d0, $d0;
	sub_pp_sat_s32x2	$d0, $d0, $d0;
	sub_ps_sat_s32x2	$d0, $d0, $d0;
	sub_sp_sat_s32x2	$d0, $d0, $d0;
	sub_ss_sat_s32x2	$d0, $d0, $d0;
	sub_pp_s32x2	$d0, s32x2(-1,-1), $d0;
	sub_pp_s32x2	$d0, $d0, s32x2(-1,-1);
	// 
	// Next sample
	// 
	sub_ftz_pp_f16x4	$d0, $d0, $d0;
	// 
	sub_ftz_ps_f16x4	$d0, $d0, $d0;
	sub_ftz_sp_f16x4	$d0, $d0, $d0;
	sub_ftz_ss_f16x4	$d0, $d0, $d0;
	sub_ftz_pp_f16x4	$d0, f16x4(0Hffff,0Hffff,0Hffff,0Hffff), $d0;
	sub_ftz_pp_f16x4	$d0, $d0, f16x4(0Hffff,0Hffff,0Hffff,0Hffff);
	// 
	// Next sample
	// 
	sub_ftz_pp_f32x2	$d0, $d0, $d0;
	// 
	sub_ftz_ps_f32x2	$d0, $d0, $d0;
	sub_ftz_sp_f32x2	$d0, $d0, $d0;
	sub_ftz_ss_f32x2	$d0, $d0, $d0;
	sub_ftz_pp_f32x2	$d0, f32x2(0Fffffffff,0Fffffffff), $d0;
	sub_ftz_pp_f32x2	$d0, $d0, f32x2(0Fffffffff,0Fffffffff);
	// 
	// Next sample
	// 
	sub_pp_u8x16	$q0, $q0, $q0;
	// 
	sub_ps_u8x16	$q0, $q0, $q0;
	sub_sp_u8x16	$q0, $q0, $q0;
	sub_ss_u8x16	$q0, $q0, $q0;
	sub_pp_sat_u8x16	$q0, $q0, $q0;
	sub_ps_sat_u8x16	$q0, $q0, $q0;
	sub_sp_sat_u8x16	$q0, $q0, $q0;
	sub_ss_sat_u8x16	$q0, $q0, $q0;
	sub_pp_u8x16	$q0, u8x16(0,0,0,0,0,0,0,0,107,240,55,174,50,95,28,113), $q0;
	sub_pp_u8x16	$q0, $q0, u8x16(0,0,0,0,0,0,0,0,107,240,55,174,50,95,28,113);
	// 
	// Next sample
	// 
	sub_pp_u16x8	$q0, $q0, $q0;
	// 
	sub_ps_u16x8	$q0, $q0, $q0;
	sub_sp_u16x8	$q0, $q0, $q0;
	sub_ss_u16x8	$q0, $q0, $q0;
	sub_pp_sat_u16x8	$q0, $q0, $q0;
	sub_ps_sat_u16x8	$q0, $q0, $q0;
	sub_sp_sat_u16x8	$q0, $q0, $q0;
	sub_ss_sat_u16x8	$q0, $q0, $q0;
	sub_pp_u16x8	$q0, u16x8(0,0,0,0,0x6bf0,0x37ae,0x325f,0x1c71), $q0;
	sub_pp_u16x8	$q0, $q0, u16x8(0,0,0,0,0x6bf0,0x37ae,0x325f,0x1c71);
	// 
	// Next sample
	// 
	sub_pp_u32x4	$q0, $q0, $q0;
	// 
	sub_ps_u32x4	$q0, $q0, $q0;
	sub_sp_u32x4	$q0, $q0, $q0;
	sub_ss_u32x4	$q0, $q0, $q0;
	sub_pp_sat_u32x4	$q0, $q0, $q0;
	sub_ps_sat_u32x4	$q0, $q0, $q0;
	sub_sp_sat_u32x4	$q0, $q0, $q0;
	sub_ss_sat_u32x4	$q0, $q0, $q0;
	sub_pp_u32x4	$q0, u32x4(0,0,0x6bf037ae,0x325f1c71), $q0;
	sub_pp_u32x4	$q0, $q0, u32x4(0,0,0x6bf037ae,0x325f1c71);
	// 
	// Next sample
	// 
	sub_pp_u64x2	$q0, $q0, $q0;
	// 
	sub_ps_u64x2	$q0, $q0, $q0;
	sub_sp_u64x2	$q0, $q0, $q0;
	sub_ss_u64x2	$q0, $q0, $q0;
	sub_pp_sat_u64x2	$q0, $q0, $q0;
	sub_ps_sat_u64x2	$q0, $q0, $q0;
	sub_sp_sat_u64x2	$q0, $q0, $q0;
	sub_ss_sat_u64x2	$q0, $q0, $q0;
	sub_pp_u64x2	$q0, u64x2(0,0x6bf037ae325f1c71), $q0;
	sub_pp_u64x2	$q0, $q0, u64x2(0,0x6bf037ae325f1c71);
	// 
	// Next sample
	// 
	sub_pp_s8x16	$q0, $q0, $q0;
	// 
	sub_ps_s8x16	$q0, $q0, $q0;
	sub_sp_s8x16	$q0, $q0, $q0;
	sub_ss_s8x16	$q0, $q0, $q0;
	sub_pp_sat_s8x16	$q0, $q0, $q0;
	sub_ps_sat_s8x16	$q0, $q0, $q0;
	sub_sp_sat_s8x16	$q0, $q0, $q0;
	sub_ss_sat_s8x16	$q0, $q0, $q0;
	sub_pp_s8x16	$q0, s8x16(0,0,0,0,0,0,0,0,107,-16,55,-82,50,95,28,113), $q0;
	sub_pp_s8x16	$q0, $q0, s8x16(0,0,0,0,0,0,0,0,107,-16,55,-82,50,95,28,113);
	// 
	// Next sample
	// 
	sub_pp_s16x8	$q0, $q0, $q0;
	// 
	sub_ps_s16x8	$q0, $q0, $q0;
	sub_sp_s16x8	$q0, $q0, $q0;
	sub_ss_s16x8	$q0, $q0, $q0;
	sub_pp_sat_s16x8	$q0, $q0, $q0;
	sub_ps_sat_s16x8	$q0, $q0, $q0;
	sub_sp_sat_s16x8	$q0, $q0, $q0;
	sub_ss_sat_s16x8	$q0, $q0, $q0;
	sub_pp_s16x8	$q0, s16x8(0,0,0,0,0x6bf0,0x37ae,0x325f,0x1c71), $q0;
	sub_pp_s16x8	$q0, $q0, s16x8(0,0,0,0,0x6bf0,0x37ae,0x325f,0x1c71);
	// 
	// Next sample
	// 
	sub_pp_s32x4	$q0, $q0, $q0;
	// 
	sub_ps_s32x4	$q0, $q0, $q0;
	sub_sp_s32x4	$q0, $q0, $q0;
	sub_ss_s32x4	$q0, $q0, $q0;
	sub_pp_sat_s32x4	$q0, $q0, $q0;
	sub_ps_sat_s32x4	$q0, $q0, $q0;
	sub_sp_sat_s32x4	$q0, $q0, $q0;
	sub_ss_sat_s32x4	$q0, $q0, $q0;
	sub_pp_s32x4	$q0, s32x4(0,0,0x6bf037ae,0x325f1c71), $q0;
	sub_pp_s32x4	$q0, $q0, s32x4(0,0,0x6bf037ae,0x325f1c71);
	// 
	// Next sample
	// 
	sub_pp_s64x2	$q0, $q0, $q0;
	// 
	sub_ps_s64x2	$q0, $q0, $q0;
	sub_sp_s64x2	$q0, $q0, $q0;
	sub_ss_s64x2	$q0, $q0, $q0;
	sub_pp_sat_s64x2	$q0, $q0, $q0;
	sub_ps_sat_s64x2	$q0, $q0, $q0;
	sub_sp_sat_s64x2	$q0, $q0, $q0;
	sub_ss_sat_s64x2	$q0, $q0, $q0;
	sub_pp_s64x2	$q0, s64x2(0,0x6bf037ae325f1c71), $q0;
	sub_pp_s64x2	$q0, $q0, s64x2(0,0x6bf037ae325f1c71);
	// 
	// Next sample
	// 
	sub_ftz_pp_f16x8	$q0, $q0, $q0;
	// 
	sub_ftz_ps_f16x8	$q0, $q0, $q0;
	sub_ftz_sp_f16x8	$q0, $q0, $q0;
	sub_ftz_ss_f16x8	$q0, $q0, $q0;
	sub_ftz_pp_f16x8	$q0, f16x8(0H0000,0H0000,0H0000,0H0000,0H6bf0,0H37ae,0H325f,0H1c71), $q0;
	sub_ftz_pp_f16x8	$q0, $q0, f16x8(0H0000,0H0000,0H0000,0H0000,0H6bf0,0H37ae,0H325f,0H1c71);
	// 
	// Next sample
	// 
	sub_ftz_pp_f32x4	$q0, $q0, $q0;
	// 
	sub_ftz_ps_f32x4	$q0, $q0, $q0;
	sub_ftz_sp_f32x4	$q0, $q0, $q0;
	sub_ftz_ss_f32x4	$q0, $q0, $q0;
	sub_ftz_pp_f32x4	$q0, f32x4(0F00000000,0F00000000,0F6bf037ae,0F325f1c71), $q0;
	sub_ftz_pp_f32x4	$q0, $q0, f32x4(0F00000000,0F00000000,0F6bf037ae,0F325f1c71);
	// 
	// Next sample
	// 
	max_u32	$s0, $s0, $s0;
	// 
	max_u32	$s0, -1, $s0;
	max_u32	$s0, WAVESIZE, $s0;
	max_u32	$s0, $s0, -1;
	max_u32	$s0, $s0, WAVESIZE;
	// 
	// Next sample
	// 
	max_u64	$d0, $d0, $d0;
	// 
	max_u64	$d0, -1, $d0;
	max_u64	$d0, WAVESIZE, $d0;
	max_u64	$d0, $d0, -1;
	max_u64	$d0, $d0, WAVESIZE;
	// 
	// Next sample
	// 
	max_s32	$s0, $s0, $s0;
	// 
	max_s32	$s0, -1, $s0;
	max_s32	$s0, WAVESIZE, $s0;
	max_s32	$s0, $s0, -1;
	max_s32	$s0, $s0, WAVESIZE;
	// 
	// Next sample
	// 
	max_s64	$d0, $d0, $d0;
	// 
	max_s64	$d0, -1, $d0;
	max_s64	$d0, WAVESIZE, $d0;
	max_s64	$d0, $d0, -1;
	max_s64	$d0, $d0, WAVESIZE;
	// 
	// Next sample
	// 
	max_ftz_f16	$s0, $s0, $s0;
	// 
	max_ftz_f16	$s0, 0Hffff, $s0;
	max_ftz_f16	$s0, $s0, 0Hffff;
	// 
	// Next sample
	// 
	max_ftz_f32	$s0, $s0, $s0;
	// 
	max_ftz_f32	$s0, 0Fffffffff, $s0;
	max_ftz_f32	$s0, $s0, 0Fffffffff;
	// 
	// Next sample
	// 
	max_pp_u8x4	$s0, $s0, $s0;
	// 
	max_ps_u8x4	$s0, $s0, $s0;
	max_sp_u8x4	$s0, $s0, $s0;
	max_ss_u8x4	$s0, $s0, $s0;
	max_pp_u8x4	$s0, u8x4(255,255,255,255), $s0;
	max_pp_u8x4	$s0, $s0, u8x4(255,255,255,255);
	// 
	// Next sample
	// 
	max_pp_u16x2	$s0, $s0, $s0;
	// 
	max_ps_u16x2	$s0, $s0, $s0;
	max_sp_u16x2	$s0, $s0, $s0;
	max_ss_u16x2	$s0, $s0, $s0;
	max_pp_u16x2	$s0, u16x2(-1,-1), $s0;
	max_pp_u16x2	$s0, $s0, u16x2(-1,-1);
	// 
	// Next sample
	// 
	max_pp_s8x4	$s0, $s0, $s0;
	// 
	max_ps_s8x4	$s0, $s0, $s0;
	max_sp_s8x4	$s0, $s0, $s0;
	max_ss_s8x4	$s0, $s0, $s0;
	max_pp_s8x4	$s0, s8x4(-1,-1,-1,-1), $s0;
	max_pp_s8x4	$s0, $s0, s8x4(-1,-1,-1,-1);
	// 
	// Next sample
	// 
	max_pp_s16x2	$s0, $s0, $s0;
	// 
	max_ps_s16x2	$s0, $s0, $s0;
	max_sp_s16x2	$s0, $s0, $s0;
	max_ss_s16x2	$s0, $s0, $s0;
	max_pp_s16x2	$s0, s16x2(-1,-1), $s0;
	max_pp_s16x2	$s0, $s0, s16x2(-1,-1);
	// 
	// Next sample
	// 
	max_ftz_pp_f16x2	$s0, $s0, $s0;
	// 
	max_ftz_ps_f16x2	$s0, $s0, $s0;
	max_ftz_sp_f16x2	$s0, $s0, $s0;
	max_ftz_ss_f16x2	$s0, $s0, $s0;
	max_ftz_pp_f16x2	$s0, f16x2(0Hffff,0Hffff), $s0;
	max_ftz_pp_f16x2	$s0, $s0, f16x2(0Hffff,0Hffff);
	// 
	// Next sample
	// 
	max_pp_u8x8	$d0, $d0, $d0;
	// 
	max_ps_u8x8	$d0, $d0, $d0;
	max_sp_u8x8	$d0, $d0, $d0;
	max_ss_u8x8	$d0, $d0, $d0;
	max_pp_u8x8	$d0, u8x8(255,255,255,255,255,255,255,255), $d0;
	max_pp_u8x8	$d0, $d0, u8x8(255,255,255,255,255,255,255,255);
	// 
	// Next sample
	// 
	max_pp_u16x4	$d0, $d0, $d0;
	// 
	max_ps_u16x4	$d0, $d0, $d0;
	max_sp_u16x4	$d0, $d0, $d0;
	max_ss_u16x4	$d0, $d0, $d0;
	max_pp_u16x4	$d0, u16x4(-1,-1,-1,-1), $d0;
	max_pp_u16x4	$d0, $d0, u16x4(-1,-1,-1,-1);
	// 
	// Next sample
	// 
	max_pp_u32x2	$d0, $d0, $d0;
	// 
	max_ps_u32x2	$d0, $d0, $d0;
	max_sp_u32x2	$d0, $d0, $d0;
	max_ss_u32x2	$d0, $d0, $d0;
	max_pp_u32x2	$d0, u32x2(-1,-1), $d0;
	max_pp_u32x2	$d0, $d0, u32x2(-1,-1);
	// 
	// Next sample
	// 
	max_pp_s8x8	$d0, $d0, $d0;
	// 
	max_ps_s8x8	$d0, $d0, $d0;
	max_sp_s8x8	$d0, $d0, $d0;
	max_ss_s8x8	$d0, $d0, $d0;
	max_pp_s8x8	$d0, s8x8(-1,-1,-1,-1,-1,-1,-1,-1), $d0;
	max_pp_s8x8	$d0, $d0, s8x8(-1,-1,-1,-1,-1,-1,-1,-1);
	// 
	// Next sample
	// 
	max_pp_s16x4	$d0, $d0, $d0;
	// 
	max_ps_s16x4	$d0, $d0, $d0;
	max_sp_s16x4	$d0, $d0, $d0;
	max_ss_s16x4	$d0, $d0, $d0;
	max_pp_s16x4	$d0, s16x4(-1,-1,-1,-1), $d0;
	max_pp_s16x4	$d0, $d0, s16x4(-1,-1,-1,-1);
	// 
	// Next sample
	// 
	max_pp_s32x2	$d0, $d0, $d0;
	// 
	max_ps_s32x2	$d0, $d0, $d0;
	max_sp_s32x2	$d0, $d0, $d0;
	max_ss_s32x2	$d0, $d0, $d0;
	max_pp_s32x2	$d0, s32x2(-1,-1), $d0;
	max_pp_s32x2	$d0, $d0, s32x2(-1,-1);
	// 
	// Next sample
	// 
	max_ftz_pp_f16x4	$d0, $d0, $d0;
	// 
	max_ftz_ps_f16x4	$d0, $d0, $d0;
	max_ftz_sp_f16x4	$d0, $d0, $d0;
	max_ftz_ss_f16x4	$d0, $d0, $d0;
	max_ftz_pp_f16x4	$d0, f16x4(0Hffff,0Hffff,0Hffff,0Hffff), $d0;
	max_ftz_pp_f16x4	$d0, $d0, f16x4(0Hffff,0Hffff,0Hffff,0Hffff);
	// 
	// Next sample
	// 
	max_ftz_pp_f32x2	$d0, $d0, $d0;
	// 
	max_ftz_ps_f32x2	$d0, $d0, $d0;
	max_ftz_sp_f32x2	$d0, $d0, $d0;
	max_ftz_ss_f32x2	$d0, $d0, $d0;
	max_ftz_pp_f32x2	$d0, f32x2(0Fffffffff,0Fffffffff), $d0;
	max_ftz_pp_f32x2	$d0, $d0, f32x2(0Fffffffff,0Fffffffff);
	// 
	// Next sample
	// 
	max_pp_u8x16	$q0, $q0, $q0;
	// 
	max_ps_u8x16	$q0, $q0, $q0;
	max_sp_u8x16	$q0, $q0, $q0;
	max_ss_u8x16	$q0, $q0, $q0;
	max_pp_u8x16	$q0, u8x16(0,0,0,0,0,0,0,0,107,240,55,174,50,95,28,113), $q0;
	max_pp_u8x16	$q0, $q0, u8x16(0,0,0,0,0,0,0,0,107,240,55,174,50,95,28,113);
	// 
	// Next sample
	// 
	max_pp_u16x8	$q0, $q0, $q0;
	// 
	max_ps_u16x8	$q0, $q0, $q0;
	max_sp_u16x8	$q0, $q0, $q0;
	max_ss_u16x8	$q0, $q0, $q0;
	max_pp_u16x8	$q0, u16x8(0,0,0,0,0x6bf0,0x37ae,0x325f,0x1c71), $q0;
	max_pp_u16x8	$q0, $q0, u16x8(0,0,0,0,0x6bf0,0x37ae,0x325f,0x1c71);
	// 
	// Next sample
	// 
	max_pp_u32x4	$q0, $q0, $q0;
	// 
	max_ps_u32x4	$q0, $q0, $q0;
	max_sp_u32x4	$q0, $q0, $q0;
	max_ss_u32x4	$q0, $q0, $q0;
	max_pp_u32x4	$q0, u32x4(0,0,0x6bf037ae,0x325f1c71), $q0;
	max_pp_u32x4	$q0, $q0, u32x4(0,0,0x6bf037ae,0x325f1c71);
	// 
	// Next sample
	// 
	max_pp_u64x2	$q0, $q0, $q0;
	// 
	max_ps_u64x2	$q0, $q0, $q0;
	max_sp_u64x2	$q0, $q0, $q0;
	max_ss_u64x2	$q0, $q0, $q0;
	max_pp_u64x2	$q0, u64x2(0,0x6bf037ae325f1c71), $q0;
	max_pp_u64x2	$q0, $q0, u64x2(0,0x6bf037ae325f1c71);
	// 
	// Next sample
	// 
	max_pp_s8x16	$q0, $q0, $q0;
	// 
	max_ps_s8x16	$q0, $q0, $q0;
	max_sp_s8x16	$q0, $q0, $q0;
	max_ss_s8x16	$q0, $q0, $q0;
	max_pp_s8x16	$q0, s8x16(0,0,0,0,0,0,0,0,107,-16,55,-82,50,95,28,113), $q0;
	max_pp_s8x16	$q0, $q0, s8x16(0,0,0,0,0,0,0,0,107,-16,55,-82,50,95,28,113);
	// 
	// Next sample
	// 
	max_pp_s16x8	$q0, $q0, $q0;
	// 
	max_ps_s16x8	$q0, $q0, $q0;
	max_sp_s16x8	$q0, $q0, $q0;
	max_ss_s16x8	$q0, $q0, $q0;
	max_pp_s16x8	$q0, s16x8(0,0,0,0,0x6bf0,0x37ae,0x325f,0x1c71), $q0;
	max_pp_s16x8	$q0, $q0, s16x8(0,0,0,0,0x6bf0,0x37ae,0x325f,0x1c71);
	// 
	// Next sample
	// 
	max_pp_s32x4	$q0, $q0, $q0;
	// 
	max_ps_s32x4	$q0, $q0, $q0;
	max_sp_s32x4	$q0, $q0, $q0;
	max_ss_s32x4	$q0, $q0, $q0;
	max_pp_s32x4	$q0, s32x4(0,0,0x6bf037ae,0x325f1c71), $q0;
	max_pp_s32x4	$q0, $q0, s32x4(0,0,0x6bf037ae,0x325f1c71);
	// 
	// Next sample
	// 
	max_pp_s64x2	$q0, $q0, $q0;
	// 
	max_ps_s64x2	$q0, $q0, $q0;
	max_sp_s64x2	$q0, $q0, $q0;
	max_ss_s64x2	$q0, $q0, $q0;
	max_pp_s64x2	$q0, s64x2(0,0x6bf037ae325f1c71), $q0;
	max_pp_s64x2	$q0, $q0, s64x2(0,0x6bf037ae325f1c71);
	// 
	// Next sample
	// 
	max_ftz_pp_f16x8	$q0, $q0, $q0;
	// 
	max_ftz_ps_f16x8	$q0, $q0, $q0;
	max_ftz_sp_f16x8	$q0, $q0, $q0;
	max_ftz_ss_f16x8	$q0, $q0, $q0;
	max_ftz_pp_f16x8	$q0, f16x8(0H0000,0H0000,0H0000,0H0000,0H6bf0,0H37ae,0H325f,0H1c71), $q0;
	max_ftz_pp_f16x8	$q0, $q0, f16x8(0H0000,0H0000,0H0000,0H0000,0H6bf0,0H37ae,0H325f,0H1c71);
	// 
	// Next sample
	// 
	max_ftz_pp_f32x4	$q0, $q0, $q0;
	// 
	max_ftz_ps_f32x4	$q0, $q0, $q0;
	max_ftz_sp_f32x4	$q0, $q0, $q0;
	max_ftz_ss_f32x4	$q0, $q0, $q0;
	max_ftz_pp_f32x4	$q0, f32x4(0F00000000,0F00000000,0F6bf037ae,0F325f1c71), $q0;
	max_ftz_pp_f32x4	$q0, $q0, f32x4(0F00000000,0F00000000,0F6bf037ae,0F325f1c71);
	// 
	// Next sample
	// 
	min_u32	$s0, $s0, $s0;
	// 
	min_u32	$s0, -1, $s0;
	min_u32	$s0, WAVESIZE, $s0;
	min_u32	$s0, $s0, -1;
	min_u32	$s0, $s0, WAVESIZE;
	// 
	// Next sample
	// 
	min_u64	$d0, $d0, $d0;
	// 
	min_u64	$d0, -1, $d0;
	min_u64	$d0, WAVESIZE, $d0;
	min_u64	$d0, $d0, -1;
	min_u64	$d0, $d0, WAVESIZE;
	// 
	// Next sample
	// 
	min_s32	$s0, $s0, $s0;
	// 
	min_s32	$s0, -1, $s0;
	min_s32	$s0, WAVESIZE, $s0;
	min_s32	$s0, $s0, -1;
	min_s32	$s0, $s0, WAVESIZE;
	// 
	// Next sample
	// 
	min_s64	$d0, $d0, $d0;
	// 
	min_s64	$d0, -1, $d0;
	min_s64	$d0, WAVESIZE, $d0;
	min_s64	$d0, $d0, -1;
	min_s64	$d0, $d0, WAVESIZE;
	// 
	// Next sample
	// 
	min_ftz_f16	$s0, $s0, $s0;
	// 
	min_ftz_f16	$s0, 0Hffff, $s0;
	min_ftz_f16	$s0, $s0, 0Hffff;
	// 
	// Next sample
	// 
	min_ftz_f32	$s0, $s0, $s0;
	// 
	min_ftz_f32	$s0, 0Fffffffff, $s0;
	min_ftz_f32	$s0, $s0, 0Fffffffff;
	// 
	// Next sample
	// 
	min_pp_u8x4	$s0, $s0, $s0;
	// 
	min_ps_u8x4	$s0, $s0, $s0;
	min_sp_u8x4	$s0, $s0, $s0;
	min_ss_u8x4	$s0, $s0, $s0;
	min_pp_u8x4	$s0, u8x4(255,255,255,255), $s0;
	min_pp_u8x4	$s0, $s0, u8x4(255,255,255,255);
	// 
	// Next sample
	// 
	min_pp_u16x2	$s0, $s0, $s0;
	// 
	min_ps_u16x2	$s0, $s0, $s0;
	min_sp_u16x2	$s0, $s0, $s0;
	min_ss_u16x2	$s0, $s0, $s0;
	min_pp_u16x2	$s0, u16x2(-1,-1), $s0;
	min_pp_u16x2	$s0, $s0, u16x2(-1,-1);
	// 
	// Next sample
	// 
	min_pp_s8x4	$s0, $s0, $s0;
	// 
	min_ps_s8x4	$s0, $s0, $s0;
	min_sp_s8x4	$s0, $s0, $s0;
	min_ss_s8x4	$s0, $s0, $s0;
	min_pp_s8x4	$s0, s8x4(-1,-1,-1,-1), $s0;
	min_pp_s8x4	$s0, $s0, s8x4(-1,-1,-1,-1);
	// 
	// Next sample
	// 
	min_pp_s16x2	$s0, $s0, $s0;
	// 
	min_ps_s16x2	$s0, $s0, $s0;
	min_sp_s16x2	$s0, $s0, $s0;
	min_ss_s16x2	$s0, $s0, $s0;
	min_pp_s16x2	$s0, s16x2(-1,-1), $s0;
	min_pp_s16x2	$s0, $s0, s16x2(-1,-1);
	// 
	// Next sample
	// 
	min_ftz_pp_f16x2	$s0, $s0, $s0;
	// 
	min_ftz_ps_f16x2	$s0, $s0, $s0;
	min_ftz_sp_f16x2	$s0, $s0, $s0;
	min_ftz_ss_f16x2	$s0, $s0, $s0;
	min_ftz_pp_f16x2	$s0, f16x2(0Hffff,0Hffff), $s0;
	min_ftz_pp_f16x2	$s0, $s0, f16x2(0Hffff,0Hffff);
	// 
	// Next sample
	// 
	min_pp_u8x8	$d0, $d0, $d0;
	// 
	min_ps_u8x8	$d0, $d0, $d0;
	min_sp_u8x8	$d0, $d0, $d0;
	min_ss_u8x8	$d0, $d0, $d0;
	min_pp_u8x8	$d0, u8x8(255,255,255,255,255,255,255,255), $d0;
	min_pp_u8x8	$d0, $d0, u8x8(255,255,255,255,255,255,255,255);
	// 
	// Next sample
	// 
	min_pp_u16x4	$d0, $d0, $d0;
	// 
	min_ps_u16x4	$d0, $d0, $d0;
	min_sp_u16x4	$d0, $d0, $d0;
	min_ss_u16x4	$d0, $d0, $d0;
	min_pp_u16x4	$d0, u16x4(-1,-1,-1,-1), $d0;
	min_pp_u16x4	$d0, $d0, u16x4(-1,-1,-1,-1);
	// 
	// Next sample
	// 
	min_pp_u32x2	$d0, $d0, $d0;
	// 
	min_ps_u32x2	$d0, $d0, $d0;
	min_sp_u32x2	$d0, $d0, $d0;
	min_ss_u32x2	$d0, $d0, $d0;
	min_pp_u32x2	$d0, u32x2(-1,-1), $d0;
	min_pp_u32x2	$d0, $d0, u32x2(-1,-1);
	// 
	// Next sample
	// 
	min_pp_s8x8	$d0, $d0, $d0;
	// 
	min_ps_s8x8	$d0, $d0, $d0;
	min_sp_s8x8	$d0, $d0, $d0;
	min_ss_s8x8	$d0, $d0, $d0;
	min_pp_s8x8	$d0, s8x8(-1,-1,-1,-1,-1,-1,-1,-1), $d0;
	min_pp_s8x8	$d0, $d0, s8x8(-1,-1,-1,-1,-1,-1,-1,-1);
	// 
	// Next sample
	// 
	min_pp_s16x4	$d0, $d0, $d0;
	// 
	min_ps_s16x4	$d0, $d0, $d0;
	min_sp_s16x4	$d0, $d0, $d0;
	min_ss_s16x4	$d0, $d0, $d0;
	min_pp_s16x4	$d0, s16x4(-1,-1,-1,-1), $d0;
	min_pp_s16x4	$d0, $d0, s16x4(-1,-1,-1,-1);
	// 
	// Next sample
	// 
	min_pp_s32x2	$d0, $d0, $d0;
	// 
	min_ps_s32x2	$d0, $d0, $d0;
	min_sp_s32x2	$d0, $d0, $d0;
	min_ss_s32x2	$d0, $d0, $d0;
	min_pp_s32x2	$d0, s32x2(-1,-1), $d0;
	min_pp_s32x2	$d0, $d0, s32x2(-1,-1);
	// 
	// Next sample
	// 
	min_ftz_pp_f16x4	$d0, $d0, $d0;
	// 
	min_ftz_ps_f16x4	$d0, $d0, $d0;
	min_ftz_sp_f16x4	$d0, $d0, $d0;
	min_ftz_ss_f16x4	$d0, $d0, $d0;
	min_ftz_pp_f16x4	$d0, f16x4(0Hffff,0Hffff,0Hffff,0Hffff), $d0;
	min_ftz_pp_f16x4	$d0, $d0, f16x4(0Hffff,0Hffff,0Hffff,0Hffff);
	// 
	// Next sample
	// 
	min_ftz_pp_f32x2	$d0, $d0, $d0;
	// 
	min_ftz_ps_f32x2	$d0, $d0, $d0;
	min_ftz_sp_f32x2	$d0, $d0, $d0;
	min_ftz_ss_f32x2	$d0, $d0, $d0;
	min_ftz_pp_f32x2	$d0, f32x2(0Fffffffff,0Fffffffff), $d0;
	min_ftz_pp_f32x2	$d0, $d0, f32x2(0Fffffffff,0Fffffffff);
	// 
	// Next sample
	// 
	min_pp_u8x16	$q0, $q0, $q0;
	// 
	min_ps_u8x16	$q0, $q0, $q0;
	min_sp_u8x16	$q0, $q0, $q0;
	min_ss_u8x16	$q0, $q0, $q0;
	min_pp_u8x16	$q0, u8x16(0,0,0,0,0,0,0,0,107,240,55,174,50,95,28,113), $q0;
	min_pp_u8x16	$q0, $q0, u8x16(0,0,0,0,0,0,0,0,107,240,55,174,50,95,28,113);
	// 
	// Next sample
	// 
	min_pp_u16x8	$q0, $q0, $q0;
	// 
	min_ps_u16x8	$q0, $q0, $q0;
	min_sp_u16x8	$q0, $q0, $q0;
	min_ss_u16x8	$q0, $q0, $q0;
	min_pp_u16x8	$q0, u16x8(0,0,0,0,0x6bf0,0x37ae,0x325f,0x1c71), $q0;
	min_pp_u16x8	$q0, $q0, u16x8(0,0,0,0,0x6bf0,0x37ae,0x325f,0x1c71);
	// 
	// Next sample
	// 
	min_pp_u32x4	$q0, $q0, $q0;
	// 
	min_ps_u32x4	$q0, $q0, $q0;
	min_sp_u32x4	$q0, $q0, $q0;
	min_ss_u32x4	$q0, $q0, $q0;
	min_pp_u32x4	$q0, u32x4(0,0,0x6bf037ae,0x325f1c71), $q0;
	min_pp_u32x4	$q0, $q0, u32x4(0,0,0x6bf037ae,0x325f1c71);
	// 
	// Next sample
	// 
	min_pp_u64x2	$q0, $q0, $q0;
	// 
	min_ps_u64x2	$q0, $q0, $q0;
	min_sp_u64x2	$q0, $q0, $q0;
	min_ss_u64x2	$q0, $q0, $q0;
	min_pp_u64x2	$q0, u64x2(0,0x6bf037ae325f1c71), $q0;
	min_pp_u64x2	$q0, $q0, u64x2(0,0x6bf037ae325f1c71);
	// 
	// Next sample
	// 
	min_pp_s8x16	$q0, $q0, $q0;
	// 
	min_ps_s8x16	$q0, $q0, $q0;
	min_sp_s8x16	$q0, $q0, $q0;
	min_ss_s8x16	$q0, $q0, $q0;
	min_pp_s8x16	$q0, s8x16(0,0,0,0,0,0,0,0,107,-16,55,-82,50,95,28,113), $q0;
	min_pp_s8x16	$q0, $q0, s8x16(0,0,0,0,0,0,0,0,107,-16,55,-82,50,95,28,113);
	// 
	// Next sample
	// 
	min_pp_s16x8	$q0, $q0, $q0;
	// 
	min_ps_s16x8	$q0, $q0, $q0;
	min_sp_s16x8	$q0, $q0, $q0;
	min_ss_s16x8	$q0, $q0, $q0;
	min_pp_s16x8	$q0, s16x8(0,0,0,0,0x6bf0,0x37ae,0x325f,0x1c71), $q0;
	min_pp_s16x8	$q0, $q0, s16x8(0,0,0,0,0x6bf0,0x37ae,0x325f,0x1c71);
	// 
	// Next sample
	// 
	min_pp_s32x4	$q0, $q0, $q0;
	// 
	min_ps_s32x4	$q0, $q0, $q0;
	min_sp_s32x4	$q0, $q0, $q0;
	min_ss_s32x4	$q0, $q0, $q0;
	min_pp_s32x4	$q0, s32x4(0,0,0x6bf037ae,0x325f1c71), $q0;
	min_pp_s32x4	$q0, $q0, s32x4(0,0,0x6bf037ae,0x325f1c71);
	// 
	// Next sample
	// 
	min_pp_s64x2	$q0, $q0, $q0;
	// 
	min_ps_s64x2	$q0, $q0, $q0;
	min_sp_s64x2	$q0, $q0, $q0;
	min_ss_s64x2	$q0, $q0, $q0;
	min_pp_s64x2	$q0, s64x2(0,0x6bf037ae325f1c71), $q0;
	min_pp_s64x2	$q0, $q0, s64x2(0,0x6bf037ae325f1c71);
	// 
	// Next sample
	// 
	min_ftz_pp_f16x8	$q0, $q0, $q0;
	// 
	min_ftz_ps_f16x8	$q0, $q0, $q0;
	min_ftz_sp_f16x8	$q0, $q0, $q0;
	min_ftz_ss_f16x8	$q0, $q0, $q0;
	min_ftz_pp_f16x8	$q0, f16x8(0H0000,0H0000,0H0000,0H0000,0H6bf0,0H37ae,0H325f,0H1c71), $q0;
	min_ftz_pp_f16x8	$q0, $q0, f16x8(0H0000,0H0000,0H0000,0H0000,0H6bf0,0H37ae,0H325f,0H1c71);
	// 
	// Next sample
	// 
	min_ftz_pp_f32x4	$q0, $q0, $q0;
	// 
	min_ftz_ps_f32x4	$q0, $q0, $q0;
	min_ftz_sp_f32x4	$q0, $q0, $q0;
	min_ftz_ss_f32x4	$q0, $q0, $q0;
	min_ftz_pp_f32x4	$q0, f32x4(0F00000000,0F00000000,0F6bf037ae,0F325f1c71), $q0;
	min_ftz_pp_f32x4	$q0, $q0, f32x4(0F00000000,0F00000000,0F6bf037ae,0F325f1c71);
	// 
	// Next sample
	// 
	mul_u32	$s0, $s0, $s0;
	// 
	mul_u32	$s0, -1, $s0;
	mul_u32	$s0, WAVESIZE, $s0;
	mul_u32	$s0, $s0, -1;
	mul_u32	$s0, $s0, WAVESIZE;
	// 
	// Next sample
	// 
	mul_u64	$d0, $d0, $d0;
	// 
	mul_u64	$d0, -1, $d0;
	mul_u64	$d0, WAVESIZE, $d0;
	mul_u64	$d0, $d0, -1;
	mul_u64	$d0, $d0, WAVESIZE;
	// 
	// Next sample
	// 
	mul_s32	$s0, $s0, $s0;
	// 
	mul_s32	$s0, -1, $s0;
	mul_s32	$s0, WAVESIZE, $s0;
	mul_s32	$s0, $s0, -1;
	mul_s32	$s0, $s0, WAVESIZE;
	// 
	// Next sample
	// 
	mul_s64	$d0, $d0, $d0;
	// 
	mul_s64	$d0, -1, $d0;
	mul_s64	$d0, WAVESIZE, $d0;
	mul_s64	$d0, $d0, -1;
	mul_s64	$d0, $d0, WAVESIZE;
	// 
	// Next sample
	// 
	mul_ftz_f16	$s0, $s0, $s0;
	// 
	mul_ftz_f16	$s0, 0Hffff, $s0;
	mul_ftz_f16	$s0, $s0, 0Hffff;
	// 
	// Next sample
	// 
	mul_ftz_f32	$s0, $s0, $s0;
	// 
	mul_ftz_f32	$s0, 0Fffffffff, $s0;
	mul_ftz_f32	$s0, $s0, 0Fffffffff;
	// 
	// Next sample
	// 
	mul_pp_u8x4	$s0, $s0, $s0;
	// 
	mul_ps_u8x4	$s0, $s0, $s0;
	mul_sp_u8x4	$s0, $s0, $s0;
	mul_ss_u8x4	$s0, $s0, $s0;
	mul_pp_sat_u8x4	$s0, $s0, $s0;
	mul_ps_sat_u8x4	$s0, $s0, $s0;
	mul_sp_sat_u8x4	$s0, $s0, $s0;
	mul_ss_sat_u8x4	$s0, $s0, $s0;
	mul_pp_u8x4	$s0, u8x4(255,255,255,255), $s0;
	mul_pp_u8x4	$s0, $s0, u8x4(255,255,255,255);
	// 
	// Next sample
	// 
	mul_pp_u16x2	$s0, $s0, $s0;
	// 
	mul_ps_u16x2	$s0, $s0, $s0;
	mul_sp_u16x2	$s0, $s0, $s0;
	mul_ss_u16x2	$s0, $s0, $s0;
	mul_pp_sat_u16x2	$s0, $s0, $s0;
	mul_ps_sat_u16x2	$s0, $s0, $s0;
	mul_sp_sat_u16x2	$s0, $s0, $s0;
	mul_ss_sat_u16x2	$s0, $s0, $s0;
	mul_pp_u16x2	$s0, u16x2(-1,-1), $s0;
	mul_pp_u16x2	$s0, $s0, u16x2(-1,-1);
	// 
	// Next sample
	// 
	mul_pp_s8x4	$s0, $s0, $s0;
	// 
	mul_ps_s8x4	$s0, $s0, $s0;
	mul_sp_s8x4	$s0, $s0, $s0;
	mul_ss_s8x4	$s0, $s0, $s0;
	mul_pp_sat_s8x4	$s0, $s0, $s0;
	mul_ps_sat_s8x4	$s0, $s0, $s0;
	mul_sp_sat_s8x4	$s0, $s0, $s0;
	mul_ss_sat_s8x4	$s0, $s0, $s0;
	mul_pp_s8x4	$s0, s8x4(-1,-1,-1,-1), $s0;
	mul_pp_s8x4	$s0, $s0, s8x4(-1,-1,-1,-1);
	// 
	// Next sample
	// 
	mul_pp_s16x2	$s0, $s0, $s0;
	// 
	mul_ps_s16x2	$s0, $s0, $s0;
	mul_sp_s16x2	$s0, $s0, $s0;
	mul_ss_s16x2	$s0, $s0, $s0;
	mul_pp_sat_s16x2	$s0, $s0, $s0;
	mul_ps_sat_s16x2	$s0, $s0, $s0;
	mul_sp_sat_s16x2	$s0, $s0, $s0;
	mul_ss_sat_s16x2	$s0, $s0, $s0;
	mul_pp_s16x2	$s0, s16x2(-1,-1), $s0;
	mul_pp_s16x2	$s0, $s0, s16x2(-1,-1);
	// 
	// Next sample
	// 
	mul_ftz_pp_f16x2	$s0, $s0, $s0;
	// 
	mul_ftz_ps_f16x2	$s0, $s0, $s0;
	mul_ftz_sp_f16x2	$s0, $s0, $s0;
	mul_ftz_ss_f16x2	$s0, $s0, $s0;
	mul_ftz_pp_f16x2	$s0, f16x2(0Hffff,0Hffff), $s0;
	mul_ftz_pp_f16x2	$s0, $s0, f16x2(0Hffff,0Hffff);
	// 
	// Next sample
	// 
	mul_pp_u8x8	$d0, $d0, $d0;
	// 
	mul_ps_u8x8	$d0, $d0, $d0;
	mul_sp_u8x8	$d0, $d0, $d0;
	mul_ss_u8x8	$d0, $d0, $d0;
	mul_pp_sat_u8x8	$d0, $d0, $d0;
	mul_ps_sat_u8x8	$d0, $d0, $d0;
	mul_sp_sat_u8x8	$d0, $d0, $d0;
	mul_ss_sat_u8x8	$d0, $d0, $d0;
	mul_pp_u8x8	$d0, u8x8(255,255,255,255,255,255,255,255), $d0;
	mul_pp_u8x8	$d0, $d0, u8x8(255,255,255,255,255,255,255,255);
	// 
	// Next sample
	// 
	mul_pp_u16x4	$d0, $d0, $d0;
	// 
	mul_ps_u16x4	$d0, $d0, $d0;
	mul_sp_u16x4	$d0, $d0, $d0;
	mul_ss_u16x4	$d0, $d0, $d0;
	mul_pp_sat_u16x4	$d0, $d0, $d0;
	mul_ps_sat_u16x4	$d0, $d0, $d0;
	mul_sp_sat_u16x4	$d0, $d0, $d0;
	mul_ss_sat_u16x4	$d0, $d0, $d0;
	mul_pp_u16x4	$d0, u16x4(-1,-1,-1,-1), $d0;
	mul_pp_u16x4	$d0, $d0, u16x4(-1,-1,-1,-1);
	// 
	// Next sample
	// 
	mul_pp_u32x2	$d0, $d0, $d0;
	// 
	mul_ps_u32x2	$d0, $d0, $d0;
	mul_sp_u32x2	$d0, $d0, $d0;
	mul_ss_u32x2	$d0, $d0, $d0;
	mul_pp_sat_u32x2	$d0, $d0, $d0;
	mul_ps_sat_u32x2	$d0, $d0, $d0;
	mul_sp_sat_u32x2	$d0, $d0, $d0;
	mul_ss_sat_u32x2	$d0, $d0, $d0;
	mul_pp_u32x2	$d0, u32x2(-1,-1), $d0;
	mul_pp_u32x2	$d0, $d0, u32x2(-1,-1);
	// 
	// Next sample
	// 
	mul_pp_s8x8	$d0, $d0, $d0;
	// 
	mul_ps_s8x8	$d0, $d0, $d0;
	mul_sp_s8x8	$d0, $d0, $d0;
	mul_ss_s8x8	$d0, $d0, $d0;
	mul_pp_sat_s8x8	$d0, $d0, $d0;
	mul_ps_sat_s8x8	$d0, $d0, $d0;
	mul_sp_sat_s8x8	$d0, $d0, $d0;
	mul_ss_sat_s8x8	$d0, $d0, $d0;
	mul_pp_s8x8	$d0, s8x8(-1,-1,-1,-1,-1,-1,-1,-1), $d0;
	mul_pp_s8x8	$d0, $d0, s8x8(-1,-1,-1,-1,-1,-1,-1,-1);
	// 
	// Next sample
	// 
	mul_pp_s16x4	$d0, $d0, $d0;
	// 
	mul_ps_s16x4	$d0, $d0, $d0;
	mul_sp_s16x4	$d0, $d0, $d0;
	mul_ss_s16x4	$d0, $d0, $d0;
	mul_pp_sat_s16x4	$d0, $d0, $d0;
	mul_ps_sat_s16x4	$d0, $d0, $d0;
	mul_sp_sat_s16x4	$d0, $d0, $d0;
	mul_ss_sat_s16x4	$d0, $d0, $d0;
	mul_pp_s16x4	$d0, s16x4(-1,-1,-1,-1), $d0;
	mul_pp_s16x4	$d0, $d0, s16x4(-1,-1,-1,-1);
	// 
	// Next sample
	// 
	mul_pp_s32x2	$d0, $d0, $d0;
	// 
	mul_ps_s32x2	$d0, $d0, $d0;
	mul_sp_s32x2	$d0, $d0, $d0;
	mul_ss_s32x2	$d0, $d0, $d0;
	mul_pp_sat_s32x2	$d0, $d0, $d0;
	mul_ps_sat_s32x2	$d0, $d0, $d0;
	mul_sp_sat_s32x2	$d0, $d0, $d0;
	mul_ss_sat_s32x2	$d0, $d0, $d0;
	mul_pp_s32x2	$d0, s32x2(-1,-1), $d0;
	mul_pp_s32x2	$d0, $d0, s32x2(-1,-1);
	// 
	// Next sample
	// 
	mul_ftz_pp_f16x4	$d0, $d0, $d0;
	// 
	mul_ftz_ps_f16x4	$d0, $d0, $d0;
	mul_ftz_sp_f16x4	$d0, $d0, $d0;
	mul_ftz_ss_f16x4	$d0, $d0, $d0;
	mul_ftz_pp_f16x4	$d0, f16x4(0Hffff,0Hffff,0Hffff,0Hffff), $d0;
	mul_ftz_pp_f16x4	$d0, $d0, f16x4(0Hffff,0Hffff,0Hffff,0Hffff);
	// 
	// Next sample
	// 
	mul_ftz_pp_f32x2	$d0, $d0, $d0;
	// 
	mul_ftz_ps_f32x2	$d0, $d0, $d0;
	mul_ftz_sp_f32x2	$d0, $d0, $d0;
	mul_ftz_ss_f32x2	$d0, $d0, $d0;
	mul_ftz_pp_f32x2	$d0, f32x2(0Fffffffff,0Fffffffff), $d0;
	mul_ftz_pp_f32x2	$d0, $d0, f32x2(0Fffffffff,0Fffffffff);
	// 
	// Next sample
	// 
	mul_pp_u8x16	$q0, $q0, $q0;
	// 
	mul_ps_u8x16	$q0, $q0, $q0;
	mul_sp_u8x16	$q0, $q0, $q0;
	mul_ss_u8x16	$q0, $q0, $q0;
	mul_pp_sat_u8x16	$q0, $q0, $q0;
	mul_ps_sat_u8x16	$q0, $q0, $q0;
	mul_sp_sat_u8x16	$q0, $q0, $q0;
	mul_ss_sat_u8x16	$q0, $q0, $q0;
	mul_pp_u8x16	$q0, u8x16(0,0,0,0,0,0,0,0,107,240,55,174,50,95,28,113), $q0;
	mul_pp_u8x16	$q0, $q0, u8x16(0,0,0,0,0,0,0,0,107,240,55,174,50,95,28,113);
	// 
	// Next sample
	// 
	mul_pp_u16x8	$q0, $q0, $q0;
	// 
	mul_ps_u16x8	$q0, $q0, $q0;
	mul_sp_u16x8	$q0, $q0, $q0;
	mul_ss_u16x8	$q0, $q0, $q0;
	mul_pp_sat_u16x8	$q0, $q0, $q0;
	mul_ps_sat_u16x8	$q0, $q0, $q0;
	mul_sp_sat_u16x8	$q0, $q0, $q0;
	mul_ss_sat_u16x8	$q0, $q0, $q0;
	mul_pp_u16x8	$q0, u16x8(0,0,0,0,0x6bf0,0x37ae,0x325f,0x1c71), $q0;
	mul_pp_u16x8	$q0, $q0, u16x8(0,0,0,0,0x6bf0,0x37ae,0x325f,0x1c71);
	// 
	// Next sample
	// 
	mul_pp_u32x4	$q0, $q0, $q0;
	// 
	mul_ps_u32x4	$q0, $q0, $q0;
	mul_sp_u32x4	$q0, $q0, $q0;
	mul_ss_u32x4	$q0, $q0, $q0;
	mul_pp_sat_u32x4	$q0, $q0, $q0;
	mul_ps_sat_u32x4	$q0, $q0, $q0;
	mul_sp_sat_u32x4	$q0, $q0, $q0;
	mul_ss_sat_u32x4	$q0, $q0, $q0;
	mul_pp_u32x4	$q0, u32x4(0,0,0x6bf037ae,0x325f1c71), $q0;
	mul_pp_u32x4	$q0, $q0, u32x4(0,0,0x6bf037ae,0x325f1c71);
	// 
	// Next sample
	// 
	mul_pp_u64x2	$q0, $q0, $q0;
	// 
	mul_ps_u64x2	$q0, $q0, $q0;
	mul_sp_u64x2	$q0, $q0, $q0;
	mul_ss_u64x2	$q0, $q0, $q0;
	mul_pp_sat_u64x2	$q0, $q0, $q0;
	mul_ps_sat_u64x2	$q0, $q0, $q0;
	mul_sp_sat_u64x2	$q0, $q0, $q0;
	mul_ss_sat_u64x2	$q0, $q0, $q0;
	mul_pp_u64x2	$q0, u64x2(0,0x6bf037ae325f1c71), $q0;
	mul_pp_u64x2	$q0, $q0, u64x2(0,0x6bf037ae325f1c71);
	// 
	// Next sample
	// 
	mul_pp_s8x16	$q0, $q0, $q0;
	// 
	mul_ps_s8x16	$q0, $q0, $q0;
	mul_sp_s8x16	$q0, $q0, $q0;
	mul_ss_s8x16	$q0, $q0, $q0;
	mul_pp_sat_s8x16	$q0, $q0, $q0;
	mul_ps_sat_s8x16	$q0, $q0, $q0;
	mul_sp_sat_s8x16	$q0, $q0, $q0;
	mul_ss_sat_s8x16	$q0, $q0, $q0;
	mul_pp_s8x16	$q0, s8x16(0,0,0,0,0,0,0,0,107,-16,55,-82,50,95,28,113), $q0;
	mul_pp_s8x16	$q0, $q0, s8x16(0,0,0,0,0,0,0,0,107,-16,55,-82,50,95,28,113);
	// 
	// Next sample
	// 
	mul_pp_s16x8	$q0, $q0, $q0;
	// 
	mul_ps_s16x8	$q0, $q0, $q0;
	mul_sp_s16x8	$q0, $q0, $q0;
	mul_ss_s16x8	$q0, $q0, $q0;
	mul_pp_sat_s16x8	$q0, $q0, $q0;
	mul_ps_sat_s16x8	$q0, $q0, $q0;
	mul_sp_sat_s16x8	$q0, $q0, $q0;
	mul_ss_sat_s16x8	$q0, $q0, $q0;
	mul_pp_s16x8	$q0, s16x8(0,0,0,0,0x6bf0,0x37ae,0x325f,0x1c71), $q0;
	mul_pp_s16x8	$q0, $q0, s16x8(0,0,0,0,0x6bf0,0x37ae,0x325f,0x1c71);
	// 
	// Next sample
	// 
	mul_pp_s32x4	$q0, $q0, $q0;
	// 
	mul_ps_s32x4	$q0, $q0, $q0;
	mul_sp_s32x4	$q0, $q0, $q0;
	mul_ss_s32x4	$q0, $q0, $q0;
	mul_pp_sat_s32x4	$q0, $q0, $q0;
	mul_ps_sat_s32x4	$q0, $q0, $q0;
	mul_sp_sat_s32x4	$q0, $q0, $q0;
	mul_ss_sat_s32x4	$q0, $q0, $q0;
	mul_pp_s32x4	$q0, s32x4(0,0,0x6bf037ae,0x325f1c71), $q0;
	mul_pp_s32x4	$q0, $q0, s32x4(0,0,0x6bf037ae,0x325f1c71);
	// 
	// Next sample
	// 
	mul_pp_s64x2	$q0, $q0, $q0;
	// 
	mul_ps_s64x2	$q0, $q0, $q0;
	mul_sp_s64x2	$q0, $q0, $q0;
	mul_ss_s64x2	$q0, $q0, $q0;
	mul_pp_sat_s64x2	$q0, $q0, $q0;
	mul_ps_sat_s64x2	$q0, $q0, $q0;
	mul_sp_sat_s64x2	$q0, $q0, $q0;
	mul_ss_sat_s64x2	$q0, $q0, $q0;
	mul_pp_s64x2	$q0, s64x2(0,0x6bf037ae325f1c71), $q0;
	mul_pp_s64x2	$q0, $q0, s64x2(0,0x6bf037ae325f1c71);
	// 
	// Next sample
	// 
	mul_ftz_pp_f16x8	$q0, $q0, $q0;
	// 
	mul_ftz_ps_f16x8	$q0, $q0, $q0;
	mul_ftz_sp_f16x8	$q0, $q0, $q0;
	mul_ftz_ss_f16x8	$q0, $q0, $q0;
	mul_ftz_pp_f16x8	$q0, f16x8(0H0000,0H0000,0H0000,0H0000,0H6bf0,0H37ae,0H325f,0H1c71), $q0;
	mul_ftz_pp_f16x8	$q0, $q0, f16x8(0H0000,0H0000,0H0000,0H0000,0H6bf0,0H37ae,0H325f,0H1c71);
	// 
	// Next sample
	// 
	mul_ftz_pp_f32x4	$q0, $q0, $q0;
	// 
	mul_ftz_ps_f32x4	$q0, $q0, $q0;
	mul_ftz_sp_f32x4	$q0, $q0, $q0;
	mul_ftz_ss_f32x4	$q0, $q0, $q0;
	mul_ftz_pp_f32x4	$q0, f32x4(0F00000000,0F00000000,0F6bf037ae,0F325f1c71), $q0;
	mul_ftz_pp_f32x4	$q0, $q0, f32x4(0F00000000,0F00000000,0F6bf037ae,0F325f1c71);
	// 
	// Next sample
	// 
	mulhi_u32	$s0, $s0, $s0;
	// 
	mulhi_u32	$s0, -1, $s0;
	mulhi_u32	$s0, WAVESIZE, $s0;
	mulhi_u32	$s0, $s0, -1;
	mulhi_u32	$s0, $s0, WAVESIZE;
	// 
	// Next sample
	// 
	mulhi_u64	$d0, $d0, $d0;
	// 
	mulhi_u64	$d0, -1, $d0;
	mulhi_u64	$d0, WAVESIZE, $d0;
	mulhi_u64	$d0, $d0, -1;
	mulhi_u64	$d0, $d0, WAVESIZE;
	// 
	// Next sample
	// 
	mulhi_s32	$s0, $s0, $s0;
	// 
	mulhi_s32	$s0, -1, $s0;
	mulhi_s32	$s0, WAVESIZE, $s0;
	mulhi_s32	$s0, $s0, -1;
	mulhi_s32	$s0, $s0, WAVESIZE;
	// 
	// Next sample
	// 
	mulhi_s64	$d0, $d0, $d0;
	// 
	mulhi_s64	$d0, -1, $d0;
	mulhi_s64	$d0, WAVESIZE, $d0;
	mulhi_s64	$d0, $d0, -1;
	mulhi_s64	$d0, $d0, WAVESIZE;
	// 
	// Next sample
	// 
	mulhi_pp_u8x4	$s0, $s0, $s0;
	// 
	mulhi_ps_u8x4	$s0, $s0, $s0;
	mulhi_sp_u8x4	$s0, $s0, $s0;
	mulhi_ss_u8x4	$s0, $s0, $s0;
	mulhi_pp_u8x4	$s0, u8x4(255,255,255,255), $s0;
	mulhi_pp_u8x4	$s0, $s0, u8x4(255,255,255,255);
	// 
	// Next sample
	// 
	mulhi_pp_u16x2	$s0, $s0, $s0;
	// 
	mulhi_ps_u16x2	$s0, $s0, $s0;
	mulhi_sp_u16x2	$s0, $s0, $s0;
	mulhi_ss_u16x2	$s0, $s0, $s0;
	mulhi_pp_u16x2	$s0, u16x2(-1,-1), $s0;
	mulhi_pp_u16x2	$s0, $s0, u16x2(-1,-1);
	// 
	// Next sample
	// 
	mulhi_pp_s8x4	$s0, $s0, $s0;
	// 
	mulhi_ps_s8x4	$s0, $s0, $s0;
	mulhi_sp_s8x4	$s0, $s0, $s0;
	mulhi_ss_s8x4	$s0, $s0, $s0;
	mulhi_pp_s8x4	$s0, s8x4(-1,-1,-1,-1), $s0;
	mulhi_pp_s8x4	$s0, $s0, s8x4(-1,-1,-1,-1);
	// 
	// Next sample
	// 
	mulhi_pp_s16x2	$s0, $s0, $s0;
	// 
	mulhi_ps_s16x2	$s0, $s0, $s0;
	mulhi_sp_s16x2	$s0, $s0, $s0;
	mulhi_ss_s16x2	$s0, $s0, $s0;
	mulhi_pp_s16x2	$s0, s16x2(-1,-1), $s0;
	mulhi_pp_s16x2	$s0, $s0, s16x2(-1,-1);
	// 
	// Next sample
	// 
	mulhi_pp_u8x8	$d0, $d0, $d0;
	// 
	mulhi_ps_u8x8	$d0, $d0, $d0;
	mulhi_sp_u8x8	$d0, $d0, $d0;
	mulhi_ss_u8x8	$d0, $d0, $d0;
	mulhi_pp_u8x8	$d0, u8x8(255,255,255,255,255,255,255,255), $d0;
	mulhi_pp_u8x8	$d0, $d0, u8x8(255,255,255,255,255,255,255,255);
	// 
	// Next sample
	// 
	mulhi_pp_u16x4	$d0, $d0, $d0;
	// 
	mulhi_ps_u16x4	$d0, $d0, $d0;
	mulhi_sp_u16x4	$d0, $d0, $d0;
	mulhi_ss_u16x4	$d0, $d0, $d0;
	mulhi_pp_u16x4	$d0, u16x4(-1,-1,-1,-1), $d0;
	mulhi_pp_u16x4	$d0, $d0, u16x4(-1,-1,-1,-1);
	// 
	// Next sample
	// 
	mulhi_pp_u32x2	$d0, $d0, $d0;
	// 
	mulhi_ps_u32x2	$d0, $d0, $d0;
	mulhi_sp_u32x2	$d0, $d0, $d0;
	mulhi_ss_u32x2	$d0, $d0, $d0;
	mulhi_pp_u32x2	$d0, u32x2(-1,-1), $d0;
	mulhi_pp_u32x2	$d0, $d0, u32x2(-1,-1);
	// 
	// Next sample
	// 
	mulhi_pp_s8x8	$d0, $d0, $d0;
	// 
	mulhi_ps_s8x8	$d0, $d0, $d0;
	mulhi_sp_s8x8	$d0, $d0, $d0;
	mulhi_ss_s8x8	$d0, $d0, $d0;
	mulhi_pp_s8x8	$d0, s8x8(-1,-1,-1,-1,-1,-1,-1,-1), $d0;
	mulhi_pp_s8x8	$d0, $d0, s8x8(-1,-1,-1,-1,-1,-1,-1,-1);
	// 
	// Next sample
	// 
	mulhi_pp_s16x4	$d0, $d0, $d0;
	// 
	mulhi_ps_s16x4	$d0, $d0, $d0;
	mulhi_sp_s16x4	$d0, $d0, $d0;
	mulhi_ss_s16x4	$d0, $d0, $d0;
	mulhi_pp_s16x4	$d0, s16x4(-1,-1,-1,-1), $d0;
	mulhi_pp_s16x4	$d0, $d0, s16x4(-1,-1,-1,-1);
	// 
	// Next sample
	// 
	mulhi_pp_s32x2	$d0, $d0, $d0;
	// 
	mulhi_ps_s32x2	$d0, $d0, $d0;
	mulhi_sp_s32x2	$d0, $d0, $d0;
	mulhi_ss_s32x2	$d0, $d0, $d0;
	mulhi_pp_s32x2	$d0, s32x2(-1,-1), $d0;
	mulhi_pp_s32x2	$d0, $d0, s32x2(-1,-1);
	// 
	// Next sample
	// 
	mulhi_pp_u8x16	$q0, $q0, $q0;
	// 
	mulhi_ps_u8x16	$q0, $q0, $q0;
	mulhi_sp_u8x16	$q0, $q0, $q0;
	mulhi_ss_u8x16	$q0, $q0, $q0;
	mulhi_pp_u8x16	$q0, u8x16(0,0,0,0,0,0,0,0,107,240,55,174,50,95,28,113), $q0;
	mulhi_pp_u8x16	$q0, $q0, u8x16(0,0,0,0,0,0,0,0,107,240,55,174,50,95,28,113);
	// 
	// Next sample
	// 
	mulhi_pp_u16x8	$q0, $q0, $q0;
	// 
	mulhi_ps_u16x8	$q0, $q0, $q0;
	mulhi_sp_u16x8	$q0, $q0, $q0;
	mulhi_ss_u16x8	$q0, $q0, $q0;
	mulhi_pp_u16x8	$q0, u16x8(0,0,0,0,0x6bf0,0x37ae,0x325f,0x1c71), $q0;
	mulhi_pp_u16x8	$q0, $q0, u16x8(0,0,0,0,0x6bf0,0x37ae,0x325f,0x1c71);
	// 
	// Next sample
	// 
	mulhi_pp_u32x4	$q0, $q0, $q0;
	// 
	mulhi_ps_u32x4	$q0, $q0, $q0;
	mulhi_sp_u32x4	$q0, $q0, $q0;
	mulhi_ss_u32x4	$q0, $q0, $q0;
	mulhi_pp_u32x4	$q0, u32x4(0,0,0x6bf037ae,0x325f1c71), $q0;
	mulhi_pp_u32x4	$q0, $q0, u32x4(0,0,0x6bf037ae,0x325f1c71);
	// 
	// Next sample
	// 
	mulhi_pp_u64x2	$q0, $q0, $q0;
	// 
	mulhi_ps_u64x2	$q0, $q0, $q0;
	mulhi_sp_u64x2	$q0, $q0, $q0;
	mulhi_ss_u64x2	$q0, $q0, $q0;
	mulhi_pp_u64x2	$q0, u64x2(0,0x6bf037ae325f1c71), $q0;
	mulhi_pp_u64x2	$q0, $q0, u64x2(0,0x6bf037ae325f1c71);
	// 
	// Next sample
	// 
	mulhi_pp_s8x16	$q0, $q0, $q0;
	// 
	mulhi_ps_s8x16	$q0, $q0, $q0;
	mulhi_sp_s8x16	$q0, $q0, $q0;
	mulhi_ss_s8x16	$q0, $q0, $q0;
	mulhi_pp_s8x16	$q0, s8x16(0,0,0,0,0,0,0,0,107,-16,55,-82,50,95,28,113), $q0;
	mulhi_pp_s8x16	$q0, $q0, s8x16(0,0,0,0,0,0,0,0,107,-16,55,-82,50,95,28,113);
	// 
	// Next sample
	// 
	mulhi_pp_s16x8	$q0, $q0, $q0;
	// 
	mulhi_ps_s16x8	$q0, $q0, $q0;
	mulhi_sp_s16x8	$q0, $q0, $q0;
	mulhi_ss_s16x8	$q0, $q0, $q0;
	mulhi_pp_s16x8	$q0, s16x8(0,0,0,0,0x6bf0,0x37ae,0x325f,0x1c71), $q0;
	mulhi_pp_s16x8	$q0, $q0, s16x8(0,0,0,0,0x6bf0,0x37ae,0x325f,0x1c71);
	// 
	// Next sample
	// 
	mulhi_pp_s32x4	$q0, $q0, $q0;
	// 
	mulhi_ps_s32x4	$q0, $q0, $q0;
	mulhi_sp_s32x4	$q0, $q0, $q0;
	mulhi_ss_s32x4	$q0, $q0, $q0;
	mulhi_pp_s32x4	$q0, s32x4(0,0,0x6bf037ae,0x325f1c71), $q0;
	mulhi_pp_s32x4	$q0, $q0, s32x4(0,0,0x6bf037ae,0x325f1c71);
	// 
	// Next sample
	// 
	mulhi_pp_s64x2	$q0, $q0, $q0;
	// 
	mulhi_ps_s64x2	$q0, $q0, $q0;
	mulhi_sp_s64x2	$q0, $q0, $q0;
	mulhi_ss_s64x2	$q0, $q0, $q0;
	mulhi_pp_s64x2	$q0, s64x2(0,0x6bf037ae325f1c71), $q0;
	mulhi_pp_s64x2	$q0, $q0, s64x2(0,0x6bf037ae325f1c71);
	// 
	// Next sample
	// 
	div_u32	$s0, $s0, $s0;
	// 
	div_u32	$s0, -1, $s0;
	div_u32	$s0, WAVESIZE, $s0;
	div_u32	$s0, $s0, -1;
	div_u32	$s0, $s0, WAVESIZE;
	// 
	// Next sample
	// 
	div_u64	$d0, $d0, $d0;
	// 
	div_u64	$d0, -1, $d0;
	div_u64	$d0, WAVESIZE, $d0;
	div_u64	$d0, $d0, -1;
	div_u64	$d0, $d0, WAVESIZE;
	// 
	// Next sample
	// 
	div_s32	$s0, $s0, $s0;
	// 
	div_s32	$s0, -1, $s0;
	div_s32	$s0, WAVESIZE, $s0;
	div_s32	$s0, $s0, -1;
	div_s32	$s0, $s0, WAVESIZE;
	// 
	// Next sample
	// 
	div_s64	$d0, $d0, $d0;
	// 
	div_s64	$d0, -1, $d0;
	div_s64	$d0, WAVESIZE, $d0;
	div_s64	$d0, $d0, -1;
	div_s64	$d0, $d0, WAVESIZE;
	// 
	// Next sample
	// 
	div_ftz_f16	$s0, $s0, $s0;
	// 
	div_ftz_f16	$s0, 0Hffff, $s0;
	div_ftz_f16	$s0, $s0, 0Hffff;
	// 
	// Next sample
	// 
	div_ftz_f32	$s0, $s0, $s0;
	// 
	div_ftz_f32	$s0, 0Fffffffff, $s0;
	div_ftz_f32	$s0, $s0, 0Fffffffff;
	// 
	// Next sample
	// 
	div_ftz_pp_f16x2	$s0, $s0, $s0;
	// 
	div_ftz_ps_f16x2	$s0, $s0, $s0;
	div_ftz_sp_f16x2	$s0, $s0, $s0;
	div_ftz_ss_f16x2	$s0, $s0, $s0;
	div_ftz_pp_f16x2	$s0, f16x2(0Hffff,0Hffff), $s0;
	div_ftz_pp_f16x2	$s0, $s0, f16x2(0Hffff,0Hffff);
	// 
	// Next sample
	// 
	div_ftz_pp_f16x4	$d0, $d0, $d0;
	// 
	div_ftz_ps_f16x4	$d0, $d0, $d0;
	div_ftz_sp_f16x4	$d0, $d0, $d0;
	div_ftz_ss_f16x4	$d0, $d0, $d0;
	div_ftz_pp_f16x4	$d0, f16x4(0Hffff,0Hffff,0Hffff,0Hffff), $d0;
	div_ftz_pp_f16x4	$d0, $d0, f16x4(0Hffff,0Hffff,0Hffff,0Hffff);
	// 
	// Next sample
	// 
	div_ftz_pp_f32x2	$d0, $d0, $d0;
	// 
	div_ftz_ps_f32x2	$d0, $d0, $d0;
	div_ftz_sp_f32x2	$d0, $d0, $d0;
	div_ftz_ss_f32x2	$d0, $d0, $d0;
	div_ftz_pp_f32x2	$d0, f32x2(0Fffffffff,0Fffffffff), $d0;
	div_ftz_pp_f32x2	$d0, $d0, f32x2(0Fffffffff,0Fffffffff);
	// 
	// Next sample
	// 
	div_ftz_pp_f16x8	$q0, $q0, $q0;
	// 
	div_ftz_ps_f16x8	$q0, $q0, $q0;
	div_ftz_sp_f16x8	$q0, $q0, $q0;
	div_ftz_ss_f16x8	$q0, $q0, $q0;
	div_ftz_pp_f16x8	$q0, f16x8(0H0000,0H0000,0H0000,0H0000,0H6bf0,0H37ae,0H325f,0H1c71), $q0;
	div_ftz_pp_f16x8	$q0, $q0, f16x8(0H0000,0H0000,0H0000,0H0000,0H6bf0,0H37ae,0H325f,0H1c71);
	// 
	// Next sample
	// 
	div_ftz_pp_f32x4	$q0, $q0, $q0;
	// 
	div_ftz_ps_f32x4	$q0, $q0, $q0;
	div_ftz_sp_f32x4	$q0, $q0, $q0;
	div_ftz_ss_f32x4	$q0, $q0, $q0;
	div_ftz_pp_f32x4	$q0, f32x4(0F00000000,0F00000000,0F6bf037ae,0F325f1c71), $q0;
	div_ftz_pp_f32x4	$q0, $q0, f32x4(0F00000000,0F00000000,0F6bf037ae,0F325f1c71);
	// 
	// Next sample
	// 
	rem_u32	$s0, $s0, $s0;
	// 
	rem_u32	$s0, -1, $s0;
	rem_u32	$s0, WAVESIZE, $s0;
	rem_u32	$s0, $s0, -1;
	rem_u32	$s0, $s0, WAVESIZE;
	// 
	// Next sample
	// 
	rem_u64	$d0, $d0, $d0;
	// 
	rem_u64	$d0, -1, $d0;
	rem_u64	$d0, WAVESIZE, $d0;
	rem_u64	$d0, $d0, -1;
	rem_u64	$d0, $d0, WAVESIZE;
	// 
	// Next sample
	// 
	rem_s32	$s0, $s0, $s0;
	// 
	rem_s32	$s0, -1, $s0;
	rem_s32	$s0, WAVESIZE, $s0;
	rem_s32	$s0, $s0, -1;
	rem_s32	$s0, $s0, WAVESIZE;
	// 
	// Next sample
	// 
	rem_s64	$d0, $d0, $d0;
	// 
	rem_s64	$d0, -1, $d0;
	rem_s64	$d0, WAVESIZE, $d0;
	rem_s64	$d0, $d0, -1;
	rem_s64	$d0, $d0, WAVESIZE;
	// 
	// Next sample
	// 
	carry_u32	$s0, $s0, $s0;
	// 
	carry_u32	$s0, -1, $s0;
	carry_u32	$s0, WAVESIZE, $s0;
	carry_u32	$s0, $s0, -1;
	carry_u32	$s0, $s0, WAVESIZE;
	// 
	// Next sample
	// 
	carry_u64	$d0, $d0, $d0;
	// 
	carry_u64	$d0, -1, $d0;
	carry_u64	$d0, WAVESIZE, $d0;
	carry_u64	$d0, $d0, -1;
	carry_u64	$d0, $d0, WAVESIZE;
	// 
	// Next sample
	// 
	carry_s32	$s0, $s0, $s0;
	// 
	carry_s32	$s0, -1, $s0;
	carry_s32	$s0, WAVESIZE, $s0;
	carry_s32	$s0, $s0, -1;
	carry_s32	$s0, $s0, WAVESIZE;
	// 
	// Next sample
	// 
	carry_s64	$d0, $d0, $d0;
	// 
	carry_s64	$d0, -1, $d0;
	carry_s64	$d0, WAVESIZE, $d0;
	carry_s64	$d0, $d0, -1;
	carry_s64	$d0, $d0, WAVESIZE;
	// 
	// Next sample
	// 
	borrow_u32	$s0, $s0, $s0;
	// 
	borrow_u32	$s0, -1, $s0;
	borrow_u32	$s0, WAVESIZE, $s0;
	borrow_u32	$s0, $s0, -1;
	borrow_u32	$s0, $s0, WAVESIZE;
	// 
	// Next sample
	// 
	borrow_u64	$d0, $d0, $d0;
	// 
	borrow_u64	$d0, -1, $d0;
	borrow_u64	$d0, WAVESIZE, $d0;
	borrow_u64	$d0, $d0, -1;
	borrow_u64	$d0, $d0, WAVESIZE;
	// 
	// Next sample
	// 
	borrow_s32	$s0, $s0, $s0;
	// 
	borrow_s32	$s0, -1, $s0;
	borrow_s32	$s0, WAVESIZE, $s0;
	borrow_s32	$s0, $s0, -1;
	borrow_s32	$s0, $s0, WAVESIZE;
	// 
	// Next sample
	// 
	borrow_s64	$d0, $d0, $d0;
	// 
	borrow_s64	$d0, -1, $d0;
	borrow_s64	$d0, WAVESIZE, $d0;
	borrow_s64	$d0, $d0, -1;
	borrow_s64	$d0, $d0, WAVESIZE;
	// 
	// Next sample
	// 
	neg_s32	$s0, $s0;
	// 
	neg_s32	$s0, -1;
	neg_s32	$s0, WAVESIZE;
	// 
	// Next sample
	// 
	neg_s64	$d0, $d0;
	// 
	neg_s64	$d0, -1;
	neg_s64	$d0, WAVESIZE;
	// 
	// Next sample
	// 
	neg_f16	$s0, $s0;
	// 
	neg_f16	$s0, 0Hffff;
	// 
	// Next sample
	// 
	neg_f32	$s0, $s0;
	// 
	neg_f32	$s0, 0Fffffffff;
	// 
	// Next sample
	// 
	neg_s_s8x4	$s0, $s0;
	// 
	neg_p_s8x4	$s0, $s0;
	neg_s_s8x4	$s0, s8x4(-1,-1,-1,-1);
	// 
	// Next sample
	// 
	neg_s_s16x2	$s0, $s0;
	// 
	neg_p_s16x2	$s0, $s0;
	neg_s_s16x2	$s0, s16x2(-1,-1);
	// 
	// Next sample
	// 
	neg_s_f16x2	$s0, $s0;
	// 
	neg_p_f16x2	$s0, $s0;
	neg_s_f16x2	$s0, f16x2(0Hffff,0Hffff);
	// 
	// Next sample
	// 
	neg_s_s8x8	$d0, $d0;
	// 
	neg_p_s8x8	$d0, $d0;
	neg_s_s8x8	$d0, s8x8(-1,-1,-1,-1,-1,-1,-1,-1);
	// 
	// Next sample
	// 
	neg_s_s16x4	$d0, $d0;
	// 
	neg_p_s16x4	$d0, $d0;
	neg_s_s16x4	$d0, s16x4(-1,-1,-1,-1);
	// 
	// Next sample
	// 
	neg_s_s32x2	$d0, $d0;
	// 
	neg_p_s32x2	$d0, $d0;
	neg_s_s32x2	$d0, s32x2(-1,-1);
	// 
	// Next sample
	// 
	neg_s_f16x4	$d0, $d0;
	// 
	neg_p_f16x4	$d0, $d0;
	neg_s_f16x4	$d0, f16x4(0Hffff,0Hffff,0Hffff,0Hffff);
	// 
	// Next sample
	// 
	neg_s_f32x2	$d0, $d0;
	// 
	neg_p_f32x2	$d0, $d0;
	neg_s_f32x2	$d0, f32x2(0Fffffffff,0Fffffffff);
	// 
	// Next sample
	// 
	neg_s_s8x16	$q0, $q0;
	// 
	neg_p_s8x16	$q0, $q0;
	neg_s_s8x16	$q0, s8x16(0,0,0,0,0,0,0,0,107,-16,55,-82,50,95,28,113);
	// 
	// Next sample
	// 
	neg_s_s16x8	$q0, $q0;
	// 
	neg_p_s16x8	$q0, $q0;
	neg_s_s16x8	$q0, s16x8(0,0,0,0,0x6bf0,0x37ae,0x325f,0x1c71);
	// 
	// Next sample
	// 
	neg_s_s32x4	$q0, $q0;
	// 
	neg_p_s32x4	$q0, $q0;
	neg_s_s32x4	$q0, s32x4(0,0,0x6bf037ae,0x325f1c71);
	// 
	// Next sample
	// 
	neg_s_s64x2	$q0, $q0;
	// 
	neg_p_s64x2	$q0, $q0;
	neg_s_s64x2	$q0, s64x2(0,0x6bf037ae325f1c71);
	// 
	// Next sample
	// 
	neg_s_f16x8	$q0, $q0;
	// 
	neg_p_f16x8	$q0, $q0;
	neg_s_f16x8	$q0, f16x8(0H0000,0H0000,0H0000,0H0000,0H6bf0,0H37ae,0H325f,0H1c71);
	// 
	// Next sample
	// 
	neg_s_f32x4	$q0, $q0;
	// 
	neg_p_f32x4	$q0, $q0;
	neg_s_f32x4	$q0, f32x4(0F00000000,0F00000000,0F6bf037ae,0F325f1c71);
	// 
	// Next sample
	// 
	abs_s32	$s0, $s0;
	// 
	abs_s32	$s0, -1;
	abs_s32	$s0, WAVESIZE;
	// 
	// Next sample
	// 
	abs_s64	$d0, $d0;
	// 
	abs_s64	$d0, -1;
	abs_s64	$d0, WAVESIZE;
	// 
	// Next sample
	// 
	abs_f16	$s0, $s0;
	// 
	abs_f16	$s0, 0Hffff;
	// 
	// Next sample
	// 
	abs_f32	$s0, $s0;
	// 
	abs_f32	$s0, 0Fffffffff;
	// 
	// Next sample
	// 
	abs_s_s8x4	$s0, $s0;
	// 
	abs_p_s8x4	$s0, $s0;
	abs_s_s8x4	$s0, s8x4(-1,-1,-1,-1);
	// 
	// Next sample
	// 
	abs_s_s16x2	$s0, $s0;
	// 
	abs_p_s16x2	$s0, $s0;
	abs_s_s16x2	$s0, s16x2(-1,-1);
	// 
	// Next sample
	// 
	abs_s_f16x2	$s0, $s0;
	// 
	abs_p_f16x2	$s0, $s0;
	abs_s_f16x2	$s0, f16x2(0Hffff,0Hffff);
	// 
	// Next sample
	// 
	abs_s_s8x8	$d0, $d0;
	// 
	abs_p_s8x8	$d0, $d0;
	abs_s_s8x8	$d0, s8x8(-1,-1,-1,-1,-1,-1,-1,-1);
	// 
	// Next sample
	// 
	abs_s_s16x4	$d0, $d0;
	// 
	abs_p_s16x4	$d0, $d0;
	abs_s_s16x4	$d0, s16x4(-1,-1,-1,-1);
	// 
	// Next sample
	// 
	abs_s_s32x2	$d0, $d0;
	// 
	abs_p_s32x2	$d0, $d0;
	abs_s_s32x2	$d0, s32x2(-1,-1);
	// 
	// Next sample
	// 
	abs_s_f16x4	$d0, $d0;
	// 
	abs_p_f16x4	$d0, $d0;
	abs_s_f16x4	$d0, f16x4(0Hffff,0Hffff,0Hffff,0Hffff);
	// 
	// Next sample
	// 
	abs_s_f32x2	$d0, $d0;
	// 
	abs_p_f32x2	$d0, $d0;
	abs_s_f32x2	$d0, f32x2(0Fffffffff,0Fffffffff);
	// 
	// Next sample
	// 
	abs_s_s8x16	$q0, $q0;
	// 
	abs_p_s8x16	$q0, $q0;
	abs_s_s8x16	$q0, s8x16(0,0,0,0,0,0,0,0,107,-16,55,-82,50,95,28,113);
	// 
	// Next sample
	// 
	abs_s_s16x8	$q0, $q0;
	// 
	abs_p_s16x8	$q0, $q0;
	abs_s_s16x8	$q0, s16x8(0,0,0,0,0x6bf0,0x37ae,0x325f,0x1c71);
	// 
	// Next sample
	// 
	abs_s_s32x4	$q0, $q0;
	// 
	abs_p_s32x4	$q0, $q0;
	abs_s_s32x4	$q0, s32x4(0,0,0x6bf037ae,0x325f1c71);
	// 
	// Next sample
	// 
	abs_s_s64x2	$q0, $q0;
	// 
	abs_p_s64x2	$q0, $q0;
	abs_s_s64x2	$q0, s64x2(0,0x6bf037ae325f1c71);
	// 
	// Next sample
	// 
	abs_s_f16x8	$q0, $q0;
	// 
	abs_p_f16x8	$q0, $q0;
	abs_s_f16x8	$q0, f16x8(0H0000,0H0000,0H0000,0H0000,0H6bf0,0H37ae,0H325f,0H1c71);
	// 
	// Next sample
	// 
	abs_s_f32x4	$q0, $q0;
	// 
	abs_p_f32x4	$q0, $q0;
	abs_s_f32x4	$q0, f32x4(0F00000000,0F00000000,0F6bf037ae,0F325f1c71);
	// 
	// Next sample
	// 
	copysign_f16	$s0, $s0, $s0;
	// 
	copysign_f16	$s0, 0Hffff, $s0;
	copysign_f16	$s0, $s0, 0Hffff;
	// 
	// Next sample
	// 
	copysign_f32	$s0, $s0, $s0;
	// 
	copysign_f32	$s0, 0Fffffffff, $s0;
	copysign_f32	$s0, $s0, 0Fffffffff;
	// 
	// Next sample
	// 
	copysign_pp_f16x2	$s0, $s0, $s0;
	// 
	copysign_ps_f16x2	$s0, $s0, $s0;
	copysign_sp_f16x2	$s0, $s0, $s0;
	copysign_ss_f16x2	$s0, $s0, $s0;
	copysign_pp_f16x2	$s0, f16x2(0Hffff,0Hffff), $s0;
	copysign_pp_f16x2	$s0, $s0, f16x2(0Hffff,0Hffff);
	// 
	// Next sample
	// 
	copysign_pp_f16x4	$d0, $d0, $d0;
	// 
	copysign_ps_f16x4	$d0, $d0, $d0;
	copysign_sp_f16x4	$d0, $d0, $d0;
	copysign_ss_f16x4	$d0, $d0, $d0;
	copysign_pp_f16x4	$d0, f16x4(0Hffff,0Hffff,0Hffff,0Hffff), $d0;
	copysign_pp_f16x4	$d0, $d0, f16x4(0Hffff,0Hffff,0Hffff,0Hffff);
	// 
	// Next sample
	// 
	copysign_pp_f32x2	$d0, $d0, $d0;
	// 
	copysign_ps_f32x2	$d0, $d0, $d0;
	copysign_sp_f32x2	$d0, $d0, $d0;
	copysign_ss_f32x2	$d0, $d0, $d0;
	copysign_pp_f32x2	$d0, f32x2(0Fffffffff,0Fffffffff), $d0;
	copysign_pp_f32x2	$d0, $d0, f32x2(0Fffffffff,0Fffffffff);
	// 
	// Next sample
	// 
	copysign_pp_f16x8	$q0, $q0, $q0;
	// 
	copysign_ps_f16x8	$q0, $q0, $q0;
	copysign_sp_f16x8	$q0, $q0, $q0;
	copysign_ss_f16x8	$q0, $q0, $q0;
	copysign_pp_f16x8	$q0, f16x8(0H0000,0H0000,0H0000,0H0000,0H6bf0,0H37ae,0H325f,0H1c71), $q0;
	copysign_pp_f16x8	$q0, $q0, f16x8(0H0000,0H0000,0H0000,0H0000,0H6bf0,0H37ae,0H325f,0H1c71);
	// 
	// Next sample
	// 
	copysign_pp_f32x4	$q0, $q0, $q0;
	// 
	copysign_ps_f32x4	$q0, $q0, $q0;
	copysign_sp_f32x4	$q0, $q0, $q0;
	copysign_ss_f32x4	$q0, $q0, $q0;
	copysign_pp_f32x4	$q0, f32x4(0F00000000,0F00000000,0F6bf037ae,0F325f1c71), $q0;
	copysign_pp_f32x4	$q0, $q0, f32x4(0F00000000,0F00000000,0F6bf037ae,0F325f1c71);
	// 
	// Next sample
	// 
	fract_ftz_f16	$s0, $s0;
	// 
	fract_ftz_f16	$s0, 0Hffff;
	// 
	// Next sample
	// 
	fract_ftz_f32	$s0, $s0;
	// 
	fract_ftz_f32	$s0, 0Fffffffff;
	// 
	// Next sample
	// 
	fract_ftz_s_f16x2	$s0, $s0;
	// 
	fract_ftz_p_f16x2	$s0, $s0;
	fract_ftz_s_f16x2	$s0, f16x2(0Hffff,0Hffff);
	// 
	// Next sample
	// 
	fract_ftz_s_f16x4	$d0, $d0;
	// 
	fract_ftz_p_f16x4	$d0, $d0;
	fract_ftz_s_f16x4	$d0, f16x4(0Hffff,0Hffff,0Hffff,0Hffff);
	// 
	// Next sample
	// 
	fract_ftz_s_f32x2	$d0, $d0;
	// 
	fract_ftz_p_f32x2	$d0, $d0;
	fract_ftz_s_f32x2	$d0, f32x2(0Fffffffff,0Fffffffff);
	// 
	// Next sample
	// 
	fract_ftz_s_f16x8	$q0, $q0;
	// 
	fract_ftz_p_f16x8	$q0, $q0;
	fract_ftz_s_f16x8	$q0, f16x8(0H0000,0H0000,0H0000,0H0000,0H6bf0,0H37ae,0H325f,0H1c71);
	// 
	// Next sample
	// 
	fract_ftz_s_f32x4	$q0, $q0;
	// 
	fract_ftz_p_f32x4	$q0, $q0;
	fract_ftz_s_f32x4	$q0, f32x4(0F00000000,0F00000000,0F6bf037ae,0F325f1c71);
	// 
	// Next sample
	// 
	sqrt_ftz_f16	$s0, $s0;
	// 
	sqrt_ftz_f16	$s0, 0Hffff;
	// 
	// Next sample
	// 
	sqrt_ftz_f32	$s0, $s0;
	// 
	sqrt_ftz_f32	$s0, 0Fffffffff;
	// 
	// Next sample
	// 
	sqrt_ftz_s_f16x2	$s0, $s0;
	// 
	sqrt_ftz_p_f16x2	$s0, $s0;
	sqrt_ftz_s_f16x2	$s0, f16x2(0Hffff,0Hffff);
	// 
	// Next sample
	// 
	sqrt_ftz_s_f16x4	$d0, $d0;
	// 
	sqrt_ftz_p_f16x4	$d0, $d0;
	sqrt_ftz_s_f16x4	$d0, f16x4(0Hffff,0Hffff,0Hffff,0Hffff);
	// 
	// Next sample
	// 
	sqrt_ftz_s_f32x2	$d0, $d0;
	// 
	sqrt_ftz_p_f32x2	$d0, $d0;
	sqrt_ftz_s_f32x2	$d0, f32x2(0Fffffffff,0Fffffffff);
	// 
	// Next sample
	// 
	sqrt_ftz_s_f16x8	$q0, $q0;
	// 
	sqrt_ftz_p_f16x8	$q0, $q0;
	sqrt_ftz_s_f16x8	$q0, f16x8(0H0000,0H0000,0H0000,0H0000,0H6bf0,0H37ae,0H325f,0H1c71);
	// 
	// Next sample
	// 
	sqrt_ftz_s_f32x4	$q0, $q0;
	// 
	sqrt_ftz_p_f32x4	$q0, $q0;
	sqrt_ftz_s_f32x4	$q0, f32x4(0F00000000,0F00000000,0F6bf037ae,0F325f1c71);
	// 
	// Next sample
	// 
	ceil_ftz_f16	$s0, $s0;
	// 
	ceil_ftz_f16	$s0, 0Hffff;
	// 
	// Next sample
	// 
	ceil_ftz_f32	$s0, $s0;
	// 
	ceil_ftz_f32	$s0, 0Fffffffff;
	// 
	// Next sample
	// 
	ceil_ftz_s_f16x2	$s0, $s0;
	// 
	ceil_ftz_p_f16x2	$s0, $s0;
	ceil_ftz_s_f16x2	$s0, f16x2(0Hffff,0Hffff);
	// 
	// Next sample
	// 
	ceil_ftz_s_f16x4	$d0, $d0;
	// 
	ceil_ftz_p_f16x4	$d0, $d0;
	ceil_ftz_s_f16x4	$d0, f16x4(0Hffff,0Hffff,0Hffff,0Hffff);
	// 
	// Next sample
	// 
	ceil_ftz_s_f32x2	$d0, $d0;
	// 
	ceil_ftz_p_f32x2	$d0, $d0;
	ceil_ftz_s_f32x2	$d0, f32x2(0Fffffffff,0Fffffffff);
	// 
	// Next sample
	// 
	ceil_ftz_s_f16x8	$q0, $q0;
	// 
	ceil_ftz_p_f16x8	$q0, $q0;
	ceil_ftz_s_f16x8	$q0, f16x8(0H0000,0H0000,0H0000,0H0000,0H6bf0,0H37ae,0H325f,0H1c71);
	// 
	// Next sample
	// 
	ceil_ftz_s_f32x4	$q0, $q0;
	// 
	ceil_ftz_p_f32x4	$q0, $q0;
	ceil_ftz_s_f32x4	$q0, f32x4(0F00000000,0F00000000,0F6bf037ae,0F325f1c71);
	// 
	// Next sample
	// 
	floor_ftz_f16	$s0, $s0;
	// 
	floor_ftz_f16	$s0, 0Hffff;
	// 
	// Next sample
	// 
	floor_ftz_f32	$s0, $s0;
	// 
	floor_ftz_f32	$s0, 0Fffffffff;
	// 
	// Next sample
	// 
	floor_ftz_s_f16x2	$s0, $s0;
	// 
	floor_ftz_p_f16x2	$s0, $s0;
	floor_ftz_s_f16x2	$s0, f16x2(0Hffff,0Hffff);
	// 
	// Next sample
	// 
	floor_ftz_s_f16x4	$d0, $d0;
	// 
	floor_ftz_p_f16x4	$d0, $d0;
	floor_ftz_s_f16x4	$d0, f16x4(0Hffff,0Hffff,0Hffff,0Hffff);
	// 
	// Next sample
	// 
	floor_ftz_s_f32x2	$d0, $d0;
	// 
	floor_ftz_p_f32x2	$d0, $d0;
	floor_ftz_s_f32x2	$d0, f32x2(0Fffffffff,0Fffffffff);
	// 
	// Next sample
	// 
	floor_ftz_s_f16x8	$q0, $q0;
	// 
	floor_ftz_p_f16x8	$q0, $q0;
	floor_ftz_s_f16x8	$q0, f16x8(0H0000,0H0000,0H0000,0H0000,0H6bf0,0H37ae,0H325f,0H1c71);
	// 
	// Next sample
	// 
	floor_ftz_s_f32x4	$q0, $q0;
	// 
	floor_ftz_p_f32x4	$q0, $q0;
	floor_ftz_s_f32x4	$q0, f32x4(0F00000000,0F00000000,0F6bf037ae,0F325f1c71);
	// 
	// Next sample
	// 
	rint_ftz_f16	$s0, $s0;
	// 
	rint_ftz_f16	$s0, 0Hffff;
	// 
	// Next sample
	// 
	rint_ftz_f32	$s0, $s0;
	// 
	rint_ftz_f32	$s0, 0Fffffffff;
	// 
	// Next sample
	// 
	rint_ftz_s_f16x2	$s0, $s0;
	// 
	rint_ftz_p_f16x2	$s0, $s0;
	rint_ftz_s_f16x2	$s0, f16x2(0Hffff,0Hffff);
	// 
	// Next sample
	// 
	rint_ftz_s_f16x4	$d0, $d0;
	// 
	rint_ftz_p_f16x4	$d0, $d0;
	rint_ftz_s_f16x4	$d0, f16x4(0Hffff,0Hffff,0Hffff,0Hffff);
	// 
	// Next sample
	// 
	rint_ftz_s_f32x2	$d0, $d0;
	// 
	rint_ftz_p_f32x2	$d0, $d0;
	rint_ftz_s_f32x2	$d0, f32x2(0Fffffffff,0Fffffffff);
	// 
	// Next sample
	// 
	rint_ftz_s_f16x8	$q0, $q0;
	// 
	rint_ftz_p_f16x8	$q0, $q0;
	rint_ftz_s_f16x8	$q0, f16x8(0H0000,0H0000,0H0000,0H0000,0H6bf0,0H37ae,0H325f,0H1c71);
	// 
	// Next sample
	// 
	rint_ftz_s_f32x4	$q0, $q0;
	// 
	rint_ftz_p_f32x4	$q0, $q0;
	rint_ftz_s_f32x4	$q0, f32x4(0F00000000,0F00000000,0F6bf037ae,0F325f1c71);
	// 
	// Next sample
	// 
	trunc_ftz_f16	$s0, $s0;
	// 
	trunc_ftz_f16	$s0, 0Hffff;
	// 
	// Next sample
	// 
	trunc_ftz_f32	$s0, $s0;
	// 
	trunc_ftz_f32	$s0, 0Fffffffff;
	// 
	// Next sample
	// 
	trunc_ftz_s_f16x2	$s0, $s0;
	// 
	trunc_ftz_p_f16x2	$s0, $s0;
	trunc_ftz_s_f16x2	$s0, f16x2(0Hffff,0Hffff);
	// 
	// Next sample
	// 
	trunc_ftz_s_f16x4	$d0, $d0;
	// 
	trunc_ftz_p_f16x4	$d0, $d0;
	trunc_ftz_s_f16x4	$d0, f16x4(0Hffff,0Hffff,0Hffff,0Hffff);
	// 
	// Next sample
	// 
	trunc_ftz_s_f32x2	$d0, $d0;
	// 
	trunc_ftz_p_f32x2	$d0, $d0;
	trunc_ftz_s_f32x2	$d0, f32x2(0Fffffffff,0Fffffffff);
	// 
	// Next sample
	// 
	trunc_ftz_s_f16x8	$q0, $q0;
	// 
	trunc_ftz_p_f16x8	$q0, $q0;
	trunc_ftz_s_f16x8	$q0, f16x8(0H0000,0H0000,0H0000,0H0000,0H6bf0,0H37ae,0H325f,0H1c71);
	// 
	// Next sample
	// 
	trunc_ftz_s_f32x4	$q0, $q0;
	// 
	trunc_ftz_p_f32x4	$q0, $q0;
	trunc_ftz_s_f32x4	$q0, f32x4(0F00000000,0F00000000,0F6bf037ae,0F325f1c71);
	// 
	// Next sample
	// 
	mul24_u32	$s0, $s0, $s0;
	// 
	mul24_u32	$s0, -1, $s0;
	mul24_u32	$s0, WAVESIZE, $s0;
	mul24_u32	$s0, $s0, -1;
	mul24_u32	$s0, $s0, WAVESIZE;
	// 
	// Next sample
	// 
	mul24_s32	$s0, $s0, $s0;
	// 
	mul24_s32	$s0, -1, $s0;
	mul24_s32	$s0, WAVESIZE, $s0;
	mul24_s32	$s0, $s0, -1;
	mul24_s32	$s0, $s0, WAVESIZE;
	// 
	// Next sample
	// 
	mul24hi_u32	$s0, $s0, $s0;
	// 
	mul24hi_u32	$s0, -1, $s0;
	mul24hi_u32	$s0, WAVESIZE, $s0;
	mul24hi_u32	$s0, $s0, -1;
	mul24hi_u32	$s0, $s0, WAVESIZE;
	// 
	// Next sample
	// 
	mul24hi_s32	$s0, $s0, $s0;
	// 
	mul24hi_s32	$s0, -1, $s0;
	mul24hi_s32	$s0, WAVESIZE, $s0;
	mul24hi_s32	$s0, $s0, -1;
	mul24hi_s32	$s0, $s0, WAVESIZE;
	// 
	// Next sample
	// 
	mad24_u32	$s0, $s0, $s0, $s0;
	// 
	mad24_u32	$s0, -1, $s0, $s0;
	mad24_u32	$s0, WAVESIZE, $s0, $s0;
	mad24_u32	$s0, $s0, -1, $s0;
	mad24_u32	$s0, $s0, WAVESIZE, $s0;
	mad24_u32	$s0, $s0, $s0, -1;
	mad24_u32	$s0, $s0, $s0, WAVESIZE;
	// 
	// Next sample
	// 
	mad24_s32	$s0, $s0, $s0, $s0;
	// 
	mad24_s32	$s0, -1, $s0, $s0;
	mad24_s32	$s0, WAVESIZE, $s0, $s0;
	mad24_s32	$s0, $s0, -1, $s0;
	mad24_s32	$s0, $s0, WAVESIZE, $s0;
	mad24_s32	$s0, $s0, $s0, -1;
	mad24_s32	$s0, $s0, $s0, WAVESIZE;
	// 
	// Next sample
	// 
	mad24hi_u32	$s0, $s0, $s0, $s0;
	// 
	mad24hi_u32	$s0, -1, $s0, $s0;
	mad24hi_u32	$s0, WAVESIZE, $s0, $s0;
	mad24hi_u32	$s0, $s0, -1, $s0;
	mad24hi_u32	$s0, $s0, WAVESIZE, $s0;
	mad24hi_u32	$s0, $s0, $s0, -1;
	mad24hi_u32	$s0, $s0, $s0, WAVESIZE;
	// 
	// Next sample
	// 
	mad24hi_s32	$s0, $s0, $s0, $s0;
	// 
	mad24hi_s32	$s0, -1, $s0, $s0;
	mad24hi_s32	$s0, WAVESIZE, $s0, $s0;
	mad24hi_s32	$s0, $s0, -1, $s0;
	mad24hi_s32	$s0, $s0, WAVESIZE, $s0;
	mad24hi_s32	$s0, $s0, $s0, -1;
	mad24hi_s32	$s0, $s0, $s0, WAVESIZE;
	// 
	// Next sample
	// 
	mad_u32	$s0, $s0, $s0, $s0;
	// 
	mad_u32	$s0, -1, $s0, $s0;
	mad_u32	$s0, WAVESIZE, $s0, $s0;
	mad_u32	$s0, $s0, -1, $s0;
	mad_u32	$s0, $s0, WAVESIZE, $s0;
	mad_u32	$s0, $s0, $s0, -1;
	mad_u32	$s0, $s0, $s0, WAVESIZE;
	// 
	// Next sample
	// 
	mad_u64	$d0, $d0, $d0, $d0;
	// 
	mad_u64	$d0, -1, $d0, $d0;
	mad_u64	$d0, WAVESIZE, $d0, $d0;
	mad_u64	$d0, $d0, -1, $d0;
	mad_u64	$d0, $d0, WAVESIZE, $d0;
	mad_u64	$d0, $d0, $d0, -1;
	mad_u64	$d0, $d0, $d0, WAVESIZE;
	// 
	// Next sample
	// 
	mad_s32	$s0, $s0, $s0, $s0;
	// 
	mad_s32	$s0, -1, $s0, $s0;
	mad_s32	$s0, WAVESIZE, $s0, $s0;
	mad_s32	$s0, $s0, -1, $s0;
	mad_s32	$s0, $s0, WAVESIZE, $s0;
	mad_s32	$s0, $s0, $s0, -1;
	mad_s32	$s0, $s0, $s0, WAVESIZE;
	// 
	// Next sample
	// 
	mad_s64	$d0, $d0, $d0, $d0;
	// 
	mad_s64	$d0, -1, $d0, $d0;
	mad_s64	$d0, WAVESIZE, $d0, $d0;
	mad_s64	$d0, $d0, -1, $d0;
	mad_s64	$d0, $d0, WAVESIZE, $d0;
	mad_s64	$d0, $d0, $d0, -1;
	mad_s64	$d0, $d0, $d0, WAVESIZE;
	// 
	// Next sample
	// 
	mad_ftz_f16	$s0, $s0, $s0, $s0;
	// 
	mad_ftz_f16	$s0, 0Hffff, $s0, $s0;
	mad_ftz_f16	$s0, $s0, 0Hffff, $s0;
	mad_ftz_f16	$s0, $s0, $s0, 0Hffff;
	// 
	// Next sample
	// 
	mad_ftz_f32	$s0, $s0, $s0, $s0;
	// 
	mad_ftz_f32	$s0, 0Fffffffff, $s0, $s0;
	mad_ftz_f32	$s0, $s0, 0Fffffffff, $s0;
	mad_ftz_f32	$s0, $s0, $s0, 0Fffffffff;
	// 
	// Next sample
	// 
	fma_ftz_f16	$s0, $s0, $s0, $s0;
	// 
	fma_ftz_f16	$s0, 0Hffff, $s0, $s0;
	fma_ftz_f16	$s0, $s0, 0Hffff, $s0;
	fma_ftz_f16	$s0, $s0, $s0, 0Hffff;
	// 
	// Next sample
	// 
	fma_ftz_f32	$s0, $s0, $s0, $s0;
	// 
	fma_ftz_f32	$s0, 0Fffffffff, $s0, $s0;
	fma_ftz_f32	$s0, $s0, 0Fffffffff, $s0;
	fma_ftz_f32	$s0, $s0, $s0, 0Fffffffff;
	// 
	// Next sample
	// 
	shl_u32	$s0, $s0, $s0;
	// 
	shl_u32	$s0, -1, $s0;
	shl_u32	$s0, WAVESIZE, $s0;
	shl_u32	$s0, $s0, -1;
	shl_u32	$s0, $s0, WAVESIZE;
	// 
	// Next sample
	// 
	shl_u64	$d0, $d0, $s0;
	// 
	shl_u64	$d0, -1, $s0;
	shl_u64	$d0, WAVESIZE, $s0;
	shl_u64	$d0, $d0, -1;
	shl_u64	$d0, $d0, WAVESIZE;
	// 
	// Next sample
	// 
	shl_s32	$s0, $s0, $s0;
	// 
	shl_s32	$s0, -1, $s0;
	shl_s32	$s0, WAVESIZE, $s0;
	shl_s32	$s0, $s0, -1;
	shl_s32	$s0, $s0, WAVESIZE;
	// 
	// Next sample
	// 
	shl_s64	$d0, $d0, $s0;
	// 
	shl_s64	$d0, -1, $s0;
	shl_s64	$d0, WAVESIZE, $s0;
	shl_s64	$d0, $d0, -1;
	shl_s64	$d0, $d0, WAVESIZE;
	// 
	// Next sample
	// 
	shl_u8x4	$s0, $s0, $s0;
	// 
	shl_u8x4	$s0, u8x4(255,255,255,255), $s0;
	shl_u8x4	$s0, $s0, -1;
	shl_u8x4	$s0, $s0, WAVESIZE;
	// 
	// Next sample
	// 
	shl_u16x2	$s0, $s0, $s0;
	// 
	shl_u16x2	$s0, u16x2(-1,-1), $s0;
	shl_u16x2	$s0, $s0, -1;
	shl_u16x2	$s0, $s0, WAVESIZE;
	// 
	// Next sample
	// 
	shl_s8x4	$s0, $s0, $s0;
	// 
	shl_s8x4	$s0, s8x4(-1,-1,-1,-1), $s0;
	shl_s8x4	$s0, $s0, -1;
	shl_s8x4	$s0, $s0, WAVESIZE;
	// 
	// Next sample
	// 
	shl_s16x2	$s0, $s0, $s0;
	// 
	shl_s16x2	$s0, s16x2(-1,-1), $s0;
	shl_s16x2	$s0, $s0, -1;
	shl_s16x2	$s0, $s0, WAVESIZE;
	// 
	// Next sample
	// 
	shl_u8x8	$d0, $d0, $s0;
	// 
	shl_u8x8	$d0, u8x8(255,255,255,255,255,255,255,255), $s0;
	shl_u8x8	$d0, $d0, -1;
	shl_u8x8	$d0, $d0, WAVESIZE;
	// 
	// Next sample
	// 
	shl_u16x4	$d0, $d0, $s0;
	// 
	shl_u16x4	$d0, u16x4(-1,-1,-1,-1), $s0;
	shl_u16x4	$d0, $d0, -1;
	shl_u16x4	$d0, $d0, WAVESIZE;
	// 
	// Next sample
	// 
	shl_u32x2	$d0, $d0, $s0;
	// 
	shl_u32x2	$d0, u32x2(-1,-1), $s0;
	shl_u32x2	$d0, $d0, -1;
	shl_u32x2	$d0, $d0, WAVESIZE;
	// 
	// Next sample
	// 
	shl_s8x8	$d0, $d0, $s0;
	// 
	shl_s8x8	$d0, s8x8(-1,-1,-1,-1,-1,-1,-1,-1), $s0;
	shl_s8x8	$d0, $d0, -1;
	shl_s8x8	$d0, $d0, WAVESIZE;
	// 
	// Next sample
	// 
	shl_s16x4	$d0, $d0, $s0;
	// 
	shl_s16x4	$d0, s16x4(-1,-1,-1,-1), $s0;
	shl_s16x4	$d0, $d0, -1;
	shl_s16x4	$d0, $d0, WAVESIZE;
	// 
	// Next sample
	// 
	shl_s32x2	$d0, $d0, $s0;
	// 
	shl_s32x2	$d0, s32x2(-1,-1), $s0;
	shl_s32x2	$d0, $d0, -1;
	shl_s32x2	$d0, $d0, WAVESIZE;
	// 
	// Next sample
	// 
	shl_u8x16	$q0, $q0, $s0;
	// 
	shl_u8x16	$q0, u8x16(0,0,0,0,0,0,0,0,107,240,55,174,50,95,28,113), $s0;
	shl_u8x16	$q0, $q0, -1;
	shl_u8x16	$q0, $q0, WAVESIZE;
	// 
	// Next sample
	// 
	shl_u16x8	$q0, $q0, $s0;
	// 
	shl_u16x8	$q0, u16x8(0,0,0,0,0x6bf0,0x37ae,0x325f,0x1c71), $s0;
	shl_u16x8	$q0, $q0, -1;
	shl_u16x8	$q0, $q0, WAVESIZE;
	// 
	// Next sample
	// 
	shl_u32x4	$q0, $q0, $s0;
	// 
	shl_u32x4	$q0, u32x4(0,0,0x6bf037ae,0x325f1c71), $s0;
	shl_u32x4	$q0, $q0, -1;
	shl_u32x4	$q0, $q0, WAVESIZE;
	// 
	// Next sample
	// 
	shl_u64x2	$q0, $q0, $s0;
	// 
	shl_u64x2	$q0, u64x2(0,0x6bf037ae325f1c71), $s0;
	shl_u64x2	$q0, $q0, -1;
	shl_u64x2	$q0, $q0, WAVESIZE;
	// 
	// Next sample
	// 
	shl_s8x16	$q0, $q0, $s0;
	// 
	shl_s8x16	$q0, s8x16(0,0,0,0,0,0,0,0,107,-16,55,-82,50,95,28,113), $s0;
	shl_s8x16	$q0, $q0, -1;
	shl_s8x16	$q0, $q0, WAVESIZE;
	// 
	// Next sample
	// 
	shl_s16x8	$q0, $q0, $s0;
	// 
	shl_s16x8	$q0, s16x8(0,0,0,0,0x6bf0,0x37ae,0x325f,0x1c71), $s0;
	shl_s16x8	$q0, $q0, -1;
	shl_s16x8	$q0, $q0, WAVESIZE;
	// 
	// Next sample
	// 
	shl_s32x4	$q0, $q0, $s0;
	// 
	shl_s32x4	$q0, s32x4(0,0,0x6bf037ae,0x325f1c71), $s0;
	shl_s32x4	$q0, $q0, -1;
	shl_s32x4	$q0, $q0, WAVESIZE;
	// 
	// Next sample
	// 
	shl_s64x2	$q0, $q0, $s0;
	// 
	shl_s64x2	$q0, s64x2(0,0x6bf037ae325f1c71), $s0;
	shl_s64x2	$q0, $q0, -1;
	shl_s64x2	$q0, $q0, WAVESIZE;
	// 
	// Next sample
	// 
	shr_u32	$s0, $s0, $s0;
	// 
	shr_u32	$s0, -1, $s0;
	shr_u32	$s0, WAVESIZE, $s0;
	shr_u32	$s0, $s0, -1;
	shr_u32	$s0, $s0, WAVESIZE;
	// 
	// Next sample
	// 
	shr_u64	$d0, $d0, $s0;
	// 
	shr_u64	$d0, -1, $s0;
	shr_u64	$d0, WAVESIZE, $s0;
	shr_u64	$d0, $d0, -1;
	shr_u64	$d0, $d0, WAVESIZE;
	// 
	// Next sample
	// 
	shr_s32	$s0, $s0, $s0;
	// 
	shr_s32	$s0, -1, $s0;
	shr_s32	$s0, WAVESIZE, $s0;
	shr_s32	$s0, $s0, -1;
	shr_s32	$s0, $s0, WAVESIZE;
	// 
	// Next sample
	// 
	shr_s64	$d0, $d0, $s0;
	// 
	shr_s64	$d0, -1, $s0;
	shr_s64	$d0, WAVESIZE, $s0;
	shr_s64	$d0, $d0, -1;
	shr_s64	$d0, $d0, WAVESIZE;
	// 
	// Next sample
	// 
	shr_u8x4	$s0, $s0, $s0;
	// 
	shr_u8x4	$s0, u8x4(255,255,255,255), $s0;
	shr_u8x4	$s0, $s0, -1;
	shr_u8x4	$s0, $s0, WAVESIZE;
	// 
	// Next sample
	// 
	shr_u16x2	$s0, $s0, $s0;
	// 
	shr_u16x2	$s0, u16x2(-1,-1), $s0;
	shr_u16x2	$s0, $s0, -1;
	shr_u16x2	$s0, $s0, WAVESIZE;
	// 
	// Next sample
	// 
	shr_s8x4	$s0, $s0, $s0;
	// 
	shr_s8x4	$s0, s8x4(-1,-1,-1,-1), $s0;
	shr_s8x4	$s0, $s0, -1;
	shr_s8x4	$s0, $s0, WAVESIZE;
	// 
	// Next sample
	// 
	shr_s16x2	$s0, $s0, $s0;
	// 
	shr_s16x2	$s0, s16x2(-1,-1), $s0;
	shr_s16x2	$s0, $s0, -1;
	shr_s16x2	$s0, $s0, WAVESIZE;
	// 
	// Next sample
	// 
	shr_u8x8	$d0, $d0, $s0;
	// 
	shr_u8x8	$d0, u8x8(255,255,255,255,255,255,255,255), $s0;
	shr_u8x8	$d0, $d0, -1;
	shr_u8x8	$d0, $d0, WAVESIZE;
	// 
	// Next sample
	// 
	shr_u16x4	$d0, $d0, $s0;
	// 
	shr_u16x4	$d0, u16x4(-1,-1,-1,-1), $s0;
	shr_u16x4	$d0, $d0, -1;
	shr_u16x4	$d0, $d0, WAVESIZE;
	// 
	// Next sample
	// 
	shr_u32x2	$d0, $d0, $s0;
	// 
	shr_u32x2	$d0, u32x2(-1,-1), $s0;
	shr_u32x2	$d0, $d0, -1;
	shr_u32x2	$d0, $d0, WAVESIZE;
	// 
	// Next sample
	// 
	shr_s8x8	$d0, $d0, $s0;
	// 
	shr_s8x8	$d0, s8x8(-1,-1,-1,-1,-1,-1,-1,-1), $s0;
	shr_s8x8	$d0, $d0, -1;
	shr_s8x8	$d0, $d0, WAVESIZE;
	// 
	// Next sample
	// 
	shr_s16x4	$d0, $d0, $s0;
	// 
	shr_s16x4	$d0, s16x4(-1,-1,-1,-1), $s0;
	shr_s16x4	$d0, $d0, -1;
	shr_s16x4	$d0, $d0, WAVESIZE;
	// 
	// Next sample
	// 
	shr_s32x2	$d0, $d0, $s0;
	// 
	shr_s32x2	$d0, s32x2(-1,-1), $s0;
	shr_s32x2	$d0, $d0, -1;
	shr_s32x2	$d0, $d0, WAVESIZE;
	// 
	// Next sample
	// 
	shr_u8x16	$q0, $q0, $s0;
	// 
	shr_u8x16	$q0, u8x16(0,0,0,0,0,0,0,0,107,240,55,174,50,95,28,113), $s0;
	shr_u8x16	$q0, $q0, -1;
	shr_u8x16	$q0, $q0, WAVESIZE;
	// 
	// Next sample
	// 
	shr_u16x8	$q0, $q0, $s0;
	// 
	shr_u16x8	$q0, u16x8(0,0,0,0,0x6bf0,0x37ae,0x325f,0x1c71), $s0;
	shr_u16x8	$q0, $q0, -1;
	shr_u16x8	$q0, $q0, WAVESIZE;
	// 
	// Next sample
	// 
	shr_u32x4	$q0, $q0, $s0;
	// 
	shr_u32x4	$q0, u32x4(0,0,0x6bf037ae,0x325f1c71), $s0;
	shr_u32x4	$q0, $q0, -1;
	shr_u32x4	$q0, $q0, WAVESIZE;
	// 
	// Next sample
	// 
	shr_u64x2	$q0, $q0, $s0;
	// 
	shr_u64x2	$q0, u64x2(0,0x6bf037ae325f1c71), $s0;
	shr_u64x2	$q0, $q0, -1;
	shr_u64x2	$q0, $q0, WAVESIZE;
	// 
	// Next sample
	// 
	shr_s8x16	$q0, $q0, $s0;
	// 
	shr_s8x16	$q0, s8x16(0,0,0,0,0,0,0,0,107,-16,55,-82,50,95,28,113), $s0;
	shr_s8x16	$q0, $q0, -1;
	shr_s8x16	$q0, $q0, WAVESIZE;
	// 
	// Next sample
	// 
	shr_s16x8	$q0, $q0, $s0;
	// 
	shr_s16x8	$q0, s16x8(0,0,0,0,0x6bf0,0x37ae,0x325f,0x1c71), $s0;
	shr_s16x8	$q0, $q0, -1;
	shr_s16x8	$q0, $q0, WAVESIZE;
	// 
	// Next sample
	// 
	shr_s32x4	$q0, $q0, $s0;
	// 
	shr_s32x4	$q0, s32x4(0,0,0x6bf037ae,0x325f1c71), $s0;
	shr_s32x4	$q0, $q0, -1;
	shr_s32x4	$q0, $q0, WAVESIZE;
	// 
	// Next sample
	// 
	shr_s64x2	$q0, $q0, $s0;
	// 
	shr_s64x2	$q0, s64x2(0,0x6bf037ae325f1c71), $s0;
	shr_s64x2	$q0, $q0, -1;
	shr_s64x2	$q0, $q0, WAVESIZE;
	// 
	// Next sample
	// 
	and_b1	$c0, $c0, $c0;
	// 
	and_b1	$c0, 1, $c0;
	and_b1	$c0, WAVESIZE, $c0;
	and_b1	$c0, $c0, 1;
	and_b1	$c0, $c0, WAVESIZE;
	// 
	// Next sample
	// 
	and_b32	$s0, $s0, $s0;
	// 
	and_b32	$s0, -1, $s0;
	and_b32	$s0, WAVESIZE, $s0;
	and_b32	$s0, $s0, -1;
	and_b32	$s0, $s0, WAVESIZE;
	// 
	// Next sample
	// 
	and_b64	$d0, $d0, $d0;
	// 
	and_b64	$d0, -1, $d0;
	and_b64	$d0, WAVESIZE, $d0;
	and_b64	$d0, $d0, -1;
	and_b64	$d0, $d0, WAVESIZE;
	// 
	// Next sample
	// 
	or_b1	$c0, $c0, $c0;
	// 
	or_b1	$c0, 1, $c0;
	or_b1	$c0, WAVESIZE, $c0;
	or_b1	$c0, $c0, 1;
	or_b1	$c0, $c0, WAVESIZE;
	// 
	// Next sample
	// 
	or_b32	$s0, $s0, $s0;
	// 
	or_b32	$s0, -1, $s0;
	or_b32	$s0, WAVESIZE, $s0;
	or_b32	$s0, $s0, -1;
	or_b32	$s0, $s0, WAVESIZE;
	// 
	// Next sample
	// 
	or_b64	$d0, $d0, $d0;
	// 
	or_b64	$d0, -1, $d0;
	or_b64	$d0, WAVESIZE, $d0;
	or_b64	$d0, $d0, -1;
	or_b64	$d0, $d0, WAVESIZE;
	// 
	// Next sample
	// 
	xor_b1	$c0, $c0, $c0;
	// 
	xor_b1	$c0, 1, $c0;
	xor_b1	$c0, WAVESIZE, $c0;
	xor_b1	$c0, $c0, 1;
	xor_b1	$c0, $c0, WAVESIZE;
	// 
	// Next sample
	// 
	xor_b32	$s0, $s0, $s0;
	// 
	xor_b32	$s0, -1, $s0;
	xor_b32	$s0, WAVESIZE, $s0;
	xor_b32	$s0, $s0, -1;
	xor_b32	$s0, $s0, WAVESIZE;
	// 
	// Next sample
	// 
	xor_b64	$d0, $d0, $d0;
	// 
	xor_b64	$d0, -1, $d0;
	xor_b64	$d0, WAVESIZE, $d0;
	xor_b64	$d0, $d0, -1;
	xor_b64	$d0, $d0, WAVESIZE;
	// 
	// Next sample
	// 
	not_b1	$c0, $c0;
	// 
	not_b1	$c0, 1;
	not_b1	$c0, WAVESIZE;
	// 
	// Next sample
	// 
	not_b32	$s0, $s0;
	// 
	not_b32	$s0, -1;
	not_b32	$s0, WAVESIZE;
	// 
	// Next sample
	// 
	not_b64	$d0, $d0;
	// 
	not_b64	$d0, -1;
	not_b64	$d0, WAVESIZE;
	// 
	// Next sample
	// 
	popcount_u32_b32	$s0, $s0;
	// 
	popcount_u32_b32	$s0, -1;
	popcount_u32_b32	$s0, WAVESIZE;
	// 
	// Next sample
	// 
	popcount_u32_b64	$s0, $d0;
	// 
	popcount_u32_b64	$s0, -1;
	popcount_u32_b64	$s0, WAVESIZE;
	// 
	// Next sample
	// 
	bitmask_b32	$s0, $s0, $s0;
	// 
	bitmask_b32	$s0, -1, $s0;
	bitmask_b32	$s0, WAVESIZE, $s0;
	bitmask_b32	$s0, $s0, -1;
	bitmask_b32	$s0, $s0, WAVESIZE;
	// 
	// Next sample
	// 
	bitmask_b64	$d0, $s0, $s0;
	// 
	bitmask_b64	$d0, -1, $s0;
	bitmask_b64	$d0, WAVESIZE, $s0;
	bitmask_b64	$d0, $s0, -1;
	bitmask_b64	$d0, $s0, WAVESIZE;
	// 
	// Next sample
	// 
	bitselect_b32	$s0, $s0, $s0, $s0;
	// 
	bitselect_b32	$s0, -1, $s0, $s0;
	bitselect_b32	$s0, WAVESIZE, $s0, $s0;
	bitselect_b32	$s0, $s0, -1, $s0;
	bitselect_b32	$s0, $s0, WAVESIZE, $s0;
	bitselect_b32	$s0, $s0, $s0, -1;
	bitselect_b32	$s0, $s0, $s0, WAVESIZE;
	// 
	// Next sample
	// 
	bitselect_b64	$d0, $d0, $d0, $d0;
	// 
	bitselect_b64	$d0, -1, $d0, $d0;
	bitselect_b64	$d0, WAVESIZE, $d0, $d0;
	bitselect_b64	$d0, $d0, -1, $d0;
	bitselect_b64	$d0, $d0, WAVESIZE, $d0;
	bitselect_b64	$d0, $d0, $d0, -1;
	bitselect_b64	$d0, $d0, $d0, WAVESIZE;
	// 
	// Next sample
	// 
	bitrev_b32	$s0, $s0;
	// 
	bitrev_b32	$s0, -1;
	bitrev_b32	$s0, WAVESIZE;
	// 
	// Next sample
	// 
	bitrev_b64	$d0, $d0;
	// 
	bitrev_b64	$d0, -1;
	bitrev_b64	$d0, WAVESIZE;
	// 
	// Next sample
	// 
	bitextract_u32	$s0, $s0, $s0, $s0;
	// 
	bitextract_u32	$s0, -1, $s0, $s0;
	bitextract_u32	$s0, WAVESIZE, $s0, $s0;
	bitextract_u32	$s0, $s0, -1, $s0;
	bitextract_u32	$s0, $s0, WAVESIZE, $s0;
	bitextract_u32	$s0, $s0, $s0, -1;
	bitextract_u32	$s0, $s0, $s0, WAVESIZE;
	// 
	// Next sample
	// 
	bitextract_u64	$d0, $d0, $s0, $s0;
	// 
	bitextract_u64	$d0, -1, $s0, $s0;
	bitextract_u64	$d0, WAVESIZE, $s0, $s0;
	bitextract_u64	$d0, $d0, -1, $s0;
	bitextract_u64	$d0, $d0, WAVESIZE, $s0;
	bitextract_u64	$d0, $d0, $s0, -1;
	bitextract_u64	$d0, $d0, $s0, WAVESIZE;
	// 
	// Next sample
	// 
	bitextract_s32	$s0, $s0, $s0, $s0;
	// 
	bitextract_s32	$s0, -1, $s0, $s0;
	bitextract_s32	$s0, WAVESIZE, $s0, $s0;
	bitextract_s32	$s0, $s0, -1, $s0;
	bitextract_s32	$s0, $s0, WAVESIZE, $s0;
	bitextract_s32	$s0, $s0, $s0, -1;
	bitextract_s32	$s0, $s0, $s0, WAVESIZE;
	// 
	// Next sample
	// 
	bitextract_s64	$d0, $d0, $s0, $s0;
	// 
	bitextract_s64	$d0, -1, $s0, $s0;
	bitextract_s64	$d0, WAVESIZE, $s0, $s0;
	bitextract_s64	$d0, $d0, -1, $s0;
	bitextract_s64	$d0, $d0, WAVESIZE, $s0;
	bitextract_s64	$d0, $d0, $s0, -1;
	bitextract_s64	$d0, $d0, $s0, WAVESIZE;
	// 
	// Next sample
	// 
	bitinsert_u32	$s0, $s0, $s0, $s0, $s0;
	// 
	bitinsert_u32	$s0, -1, $s0, $s0, $s0;
	bitinsert_u32	$s0, WAVESIZE, $s0, $s0, $s0;
	bitinsert_u32	$s0, $s0, -1, $s0, $s0;
	bitinsert_u32	$s0, $s0, WAVESIZE, $s0, $s0;
	bitinsert_u32	$s0, $s0, $s0, -1, $s0;
	bitinsert_u32	$s0, $s0, $s0, WAVESIZE, $s0;
	bitinsert_u32	$s0, $s0, $s0, $s0, -1;
	bitinsert_u32	$s0, $s0, $s0, $s0, WAVESIZE;
	// 
	// Next sample
	// 
	bitinsert_u64	$d0, $d0, $d0, $s0, $s0;
	// 
	bitinsert_u64	$d0, -1, $d0, $s0, $s0;
	bitinsert_u64	$d0, WAVESIZE, $d0, $s0, $s0;
	bitinsert_u64	$d0, $d0, -1, $s0, $s0;
	bitinsert_u64	$d0, $d0, WAVESIZE, $s0, $s0;
	bitinsert_u64	$d0, $d0, $d0, -1, $s0;
	bitinsert_u64	$d0, $d0, $d0, WAVESIZE, $s0;
	bitinsert_u64	$d0, $d0, $d0, $s0, -1;
	bitinsert_u64	$d0, $d0, $d0, $s0, WAVESIZE;
	// 
	// Next sample
	// 
	bitinsert_s32	$s0, $s0, $s0, $s0, $s0;
	// 
	bitinsert_s32	$s0, -1, $s0, $s0, $s0;
	bitinsert_s32	$s0, WAVESIZE, $s0, $s0, $s0;
	bitinsert_s32	$s0, $s0, -1, $s0, $s0;
	bitinsert_s32	$s0, $s0, WAVESIZE, $s0, $s0;
	bitinsert_s32	$s0, $s0, $s0, -1, $s0;
	bitinsert_s32	$s0, $s0, $s0, WAVESIZE, $s0;
	bitinsert_s32	$s0, $s0, $s0, $s0, -1;
	bitinsert_s32	$s0, $s0, $s0, $s0, WAVESIZE;
	// 
	// Next sample
	// 
	bitinsert_s64	$d0, $d0, $d0, $s0, $s0;
	// 
	bitinsert_s64	$d0, -1, $d0, $s0, $s0;
	bitinsert_s64	$d0, WAVESIZE, $d0, $s0, $s0;
	bitinsert_s64	$d0, $d0, -1, $s0, $s0;
	bitinsert_s64	$d0, $d0, WAVESIZE, $s0, $s0;
	bitinsert_s64	$d0, $d0, $d0, -1, $s0;
	bitinsert_s64	$d0, $d0, $d0, WAVESIZE, $s0;
	bitinsert_s64	$d0, $d0, $d0, $s0, -1;
	bitinsert_s64	$d0, $d0, $d0, $s0, WAVESIZE;
	// 
	// Next sample
	// 
	firstbit_u32_u32	$s0, $s0;
	// 
	firstbit_u32_u32	$s0, -1;
	firstbit_u32_u32	$s0, WAVESIZE;
	// 
	// Next sample
	// 
	firstbit_u32_u64	$s0, $d0;
	// 
	firstbit_u32_u64	$s0, -1;
	firstbit_u32_u64	$s0, WAVESIZE;
	// 
	// Next sample
	// 
	firstbit_u32_s32	$s0, $s0;
	// 
	firstbit_u32_s32	$s0, -1;
	firstbit_u32_s32	$s0, WAVESIZE;
	// 
	// Next sample
	// 
	firstbit_u32_s64	$s0, $d0;
	// 
	firstbit_u32_s64	$s0, -1;
	firstbit_u32_s64	$s0, WAVESIZE;
	// 
	// Next sample
	// 
	lastbit_u32_u32	$s0, $s0;
	// 
	lastbit_u32_u32	$s0, -1;
	lastbit_u32_u32	$s0, WAVESIZE;
	// 
	// Next sample
	// 
	lastbit_u32_u64	$s0, $d0;
	// 
	lastbit_u32_u64	$s0, -1;
	lastbit_u32_u64	$s0, WAVESIZE;
	// 
	// Next sample
	// 
	lastbit_u32_s32	$s0, $s0;
	// 
	lastbit_u32_s32	$s0, -1;
	lastbit_u32_s32	$s0, WAVESIZE;
	// 
	// Next sample
	// 
	lastbit_u32_s64	$s0, $d0;
	// 
	lastbit_u32_s64	$s0, -1;
	lastbit_u32_s64	$s0, WAVESIZE;
	// 
	// Next sample
	// 
	combine_v2_b64_b32	$d0, ($s0, $s0);
	// 
	combine_v2_b64_b32	$d0, (WAVESIZE, -1);
	combine_v2_b64_b32	$d0, (0, $s0);
	combine_v2_b64_b32	$d0, ($s0, $s1);
	// 
	// Next sample
	// 
	combine_v4_b128_b32	$q0, ($s0, $s0, $s0, $s0);
	// 
	combine_v4_b128_b32	$q0, (WAVESIZE, -1, -1, -1);
	combine_v4_b128_b32	$q0, (0, -1, $s0, $s0);
	combine_v4_b128_b32	$q0, ($s0, $s1, $s2, $s3);
	// 
	// Next sample
	// 
	combine_v2_b128_b64	$q0, ($d0, $d0);
	// 
	combine_v2_b128_b64	$q0, (WAVESIZE, -1);
	combine_v2_b128_b64	$q0, (0, $d0);
	combine_v2_b128_b64	$q0, ($d0, $d1);
	// 
	// Next sample
	// 
	expand_v2_b32_b64	($s0, $s1), $d0;
	// 
	expand_v2_b32_b64	($s0, $s1), -1;
	expand_v2_b32_b64	($s0, $s1), WAVESIZE;
	// 
	// Next sample
	// 
	expand_v4_b32_b128	($s0, $s1, $s2, $s3), $q0;
	// 
	expand_v4_b32_b128	($s0, $s1, $s2, $s3), u8x16(0,0,0,0,0,0,0,0,107,240,55,174,50,95,28,113);
	// 
	// Next sample
	// 
	expand_v2_b64_b128	($d0, $d1), $q0;
	// 
	expand_v2_b64_b128	($d0, $d1), u8x16(0,0,0,0,0,0,0,0,107,240,55,174,50,95,28,113);
	// 
	// Next sample
	// 
	mov_u32	$s0, $s0;
	// 
	mov_u32	$s0, -1;
	mov_u32	$s0, WAVESIZE;
	// 
	// Next sample
	// 
	mov_u64	$d0, $d0;
	// 
	mov_u64	$d0, -1;
	mov_u64	$d0, WAVESIZE;
	// 
	// Next sample
	// 
	mov_s32	$s0, $s0;
	// 
	mov_s32	$s0, -1;
	mov_s32	$s0, WAVESIZE;
	// 
	// Next sample
	// 
	mov_s64	$d0, $d0;
	// 
	mov_s64	$d0, -1;
	mov_s64	$d0, WAVESIZE;
	// 
	// Next sample
	// 
	mov_f16	$s0, $s0;
	// 
	mov_f16	$s0, 0Hffff;
	// 
	// Next sample
	// 
	mov_f32	$s0, $s0;
	// 
	mov_f32	$s0, 0Fffffffff;
	// 
	// Next sample
	// 
	mov_b1	$c0, $c0;
	// 
	mov_b1	$c0, 1;
	mov_b1	$c0, WAVESIZE;
	// 
	// Next sample
	// 
	mov_b32	$s0, $s0;
	// 
	mov_b32	$s0, -1;
	mov_b32	$s0, WAVESIZE;
	// 
	// Next sample
	// 
	mov_b64	$d0, $d0;
	// 
	mov_b64	$d0, -1;
	mov_b64	$d0, WAVESIZE;
	// 
	// Next sample
	// 
	mov_b128	$q0, $q0;
	// 
	mov_b128	$q0, u8x16(0,0,0,0,0,0,0,0,107,240,55,174,50,95,28,113);
	// 
	// Next sample
	// 
	mov_sig64	$d0, $d0;
	// 
	// 
	// Next sample
	// 
	lda_group_u32	$s0, [&GroupVar];
	// 
	lda_group_u32	$s0, [$s0+2];
	lda_group_u32	$s0, [$s0+3];
	lda_group_u32	$s0, [$s0+5];
	lda_group_u32	$s0, [$s0+6];
	lda_group_u32	$s0, [0];
	// 
	// Next sample
	// 
	lda_private_u32	$s0, [&PrivateVar];
	// 
	lda_private_u32	$s0, [$s0+2];
	lda_private_u32	$s0, [$s0+3];
	lda_private_u32	$s0, [$s0+5];
	lda_private_u32	$s0, [$s0+6];
	lda_private_u32	$s0, [0];
	// 
	// Next sample
	// 
	lda_u64	$d0, [$d0+2];
	// 
	lda_u64	$d0, [$d0+3];
	lda_u64	$d0, [$d0+5];
	lda_u64	$d0, [$d0+6];
	lda_u64	$d0, [0];
	// 
	// Next sample
	// 
	lda_global_u64	$d0, [&GlobalVar];
	// 
	lda_global_u64	$d0, [&GlobalSig64];
	lda_global_u64	$d0, [$d0+2];
	lda_global_u64	$d0, [$d0+3];
	lda_global_u64	$d0, [$d0+5];
	lda_global_u64	$d0, [$d0+6];
	lda_global_u64	$d0, [0];
	// 
	// Next sample
	// 
	lda_readonly_u64	$d0, [&ReadonlyVar];
	// 
	lda_readonly_u64	$d0, [&ReadonlySig64];
	lda_readonly_u64	$d0, [$d0+2];
	lda_readonly_u64	$d0, [$d0+3];
	lda_readonly_u64	$d0, [$d0+5];
	lda_readonly_u64	$d0, [$d0+6];
	lda_readonly_u64	$d0, [0];
	// 
	// Next sample
	// 
	lda_kernarg_u64	$d0, [$d0+2];
	// 
	lda_kernarg_u64	$d0, [$d0+3];
	lda_kernarg_u64	$d0, [$d0+5];
	lda_kernarg_u64	$d0, [$d0+6];
	lda_kernarg_u64	$d0, [0];
	// 
	// Next sample
	// 
	shuffle_u8x4	$s0, $s0, $s0, -1;
	// 
	shuffle_u8x4	$s0, u8x4(255,255,255,255), $s0, -1;
	shuffle_u8x4	$s0, $s0, u8x4(255,255,255,255), -1;
	// 
	// Next sample
	// 
	shuffle_u16x2	$s0, $s0, $s0, -1;
	// 
	shuffle_u16x2	$s0, u16x2(-1,-1), $s0, -1;
	shuffle_u16x2	$s0, $s0, u16x2(-1,-1), -1;
	// 
	// Next sample
	// 
	shuffle_s8x4	$s0, $s0, $s0, -1;
	// 
	shuffle_s8x4	$s0, s8x4(-1,-1,-1,-1), $s0, -1;
	shuffle_s8x4	$s0, $s0, s8x4(-1,-1,-1,-1), -1;
	// 
	// Next sample
	// 
	shuffle_s16x2	$s0, $s0, $s0, -1;
	// 
	shuffle_s16x2	$s0, s16x2(-1,-1), $s0, -1;
	shuffle_s16x2	$s0, $s0, s16x2(-1,-1), -1;
	// 
	// Next sample
	// 
	shuffle_f16x2	$s0, $s0, $s0, -1;
	// 
	shuffle_f16x2	$s0, f16x2(0Hffff,0Hffff), $s0, -1;
	shuffle_f16x2	$s0, $s0, f16x2(0Hffff,0Hffff), -1;
	// 
	// Next sample
	// 
	shuffle_u8x8	$d0, $d0, $d0, -1;
	// 
	shuffle_u8x8	$d0, u8x8(255,255,255,255,255,255,255,255), $d0, -1;
	shuffle_u8x8	$d0, $d0, u8x8(255,255,255,255,255,255,255,255), -1;
	// 
	// Next sample
	// 
	shuffle_u16x4	$d0, $d0, $d0, -1;
	// 
	shuffle_u16x4	$d0, u16x4(-1,-1,-1,-1), $d0, -1;
	shuffle_u16x4	$d0, $d0, u16x4(-1,-1,-1,-1), -1;
	// 
	// Next sample
	// 
	shuffle_u32x2	$d0, $d0, $d0, -1;
	// 
	shuffle_u32x2	$d0, u32x2(-1,-1), $d0, -1;
	shuffle_u32x2	$d0, $d0, u32x2(-1,-1), -1;
	// 
	// Next sample
	// 
	shuffle_s8x8	$d0, $d0, $d0, -1;
	// 
	shuffle_s8x8	$d0, s8x8(-1,-1,-1,-1,-1,-1,-1,-1), $d0, -1;
	shuffle_s8x8	$d0, $d0, s8x8(-1,-1,-1,-1,-1,-1,-1,-1), -1;
	// 
	// Next sample
	// 
	shuffle_s16x4	$d0, $d0, $d0, -1;
	// 
	shuffle_s16x4	$d0, s16x4(-1,-1,-1,-1), $d0, -1;
	shuffle_s16x4	$d0, $d0, s16x4(-1,-1,-1,-1), -1;
	// 
	// Next sample
	// 
	shuffle_s32x2	$d0, $d0, $d0, -1;
	// 
	shuffle_s32x2	$d0, s32x2(-1,-1), $d0, -1;
	shuffle_s32x2	$d0, $d0, s32x2(-1,-1), -1;
	// 
	// Next sample
	// 
	shuffle_f16x4	$d0, $d0, $d0, -1;
	// 
	shuffle_f16x4	$d0, f16x4(0Hffff,0Hffff,0Hffff,0Hffff), $d0, -1;
	shuffle_f16x4	$d0, $d0, f16x4(0Hffff,0Hffff,0Hffff,0Hffff), -1;
	// 
	// Next sample
	// 
	shuffle_f32x2	$d0, $d0, $d0, -1;
	// 
	shuffle_f32x2	$d0, f32x2(0Fffffffff,0Fffffffff), $d0, -1;
	shuffle_f32x2	$d0, $d0, f32x2(0Fffffffff,0Fffffffff), -1;
	// 
	// Next sample
	// 
	unpacklo_u8x4	$s0, $s0, $s0;
	// 
	unpacklo_u8x4	$s0, u8x4(255,255,255,255), $s0;
	unpacklo_u8x4	$s0, $s0, u8x4(255,255,255,255);
	// 
	// Next sample
	// 
	unpacklo_u16x2	$s0, $s0, $s0;
	// 
	unpacklo_u16x2	$s0, u16x2(-1,-1), $s0;
	unpacklo_u16x2	$s0, $s0, u16x2(-1,-1);
	// 
	// Next sample
	// 
	unpacklo_s8x4	$s0, $s0, $s0;
	// 
	unpacklo_s8x4	$s0, s8x4(-1,-1,-1,-1), $s0;
	unpacklo_s8x4	$s0, $s0, s8x4(-1,-1,-1,-1);
	// 
	// Next sample
	// 
	unpacklo_s16x2	$s0, $s0, $s0;
	// 
	unpacklo_s16x2	$s0, s16x2(-1,-1), $s0;
	unpacklo_s16x2	$s0, $s0, s16x2(-1,-1);
	// 
	// Next sample
	// 
	unpacklo_f16x2	$s0, $s0, $s0;
	// 
	unpacklo_f16x2	$s0, f16x2(0Hffff,0Hffff), $s0;
	unpacklo_f16x2	$s0, $s0, f16x2(0Hffff,0Hffff);
	// 
	// Next sample
	// 
	unpacklo_u8x8	$d0, $d0, $d0;
	// 
	unpacklo_u8x8	$d0, u8x8(255,255,255,255,255,255,255,255), $d0;
	unpacklo_u8x8	$d0, $d0, u8x8(255,255,255,255,255,255,255,255);
	// 
	// Next sample
	// 
	unpacklo_u16x4	$d0, $d0, $d0;
	// 
	unpacklo_u16x4	$d0, u16x4(-1,-1,-1,-1), $d0;
	unpacklo_u16x4	$d0, $d0, u16x4(-1,-1,-1,-1);
	// 
	// Next sample
	// 
	unpacklo_u32x2	$d0, $d0, $d0;
	// 
	unpacklo_u32x2	$d0, u32x2(-1,-1), $d0;
	unpacklo_u32x2	$d0, $d0, u32x2(-1,-1);
	// 
	// Next sample
	// 
	unpacklo_s8x8	$d0, $d0, $d0;
	// 
	unpacklo_s8x8	$d0, s8x8(-1,-1,-1,-1,-1,-1,-1,-1), $d0;
	unpacklo_s8x8	$d0, $d0, s8x8(-1,-1,-1,-1,-1,-1,-1,-1);
	// 
	// Next sample
	// 
	unpacklo_s16x4	$d0, $d0, $d0;
	// 
	unpacklo_s16x4	$d0, s16x4(-1,-1,-1,-1), $d0;
	unpacklo_s16x4	$d0, $d0, s16x4(-1,-1,-1,-1);
	// 
	// Next sample
	// 
	unpacklo_s32x2	$d0, $d0, $d0;
	// 
	unpacklo_s32x2	$d0, s32x2(-1,-1), $d0;
	unpacklo_s32x2	$d0, $d0, s32x2(-1,-1);
	// 
	// Next sample
	// 
	unpacklo_f16x4	$d0, $d0, $d0;
	// 
	unpacklo_f16x4	$d0, f16x4(0Hffff,0Hffff,0Hffff,0Hffff), $d0;
	unpacklo_f16x4	$d0, $d0, f16x4(0Hffff,0Hffff,0Hffff,0Hffff);
	// 
	// Next sample
	// 
	unpacklo_f32x2	$d0, $d0, $d0;
	// 
	unpacklo_f32x2	$d0, f32x2(0Fffffffff,0Fffffffff), $d0;
	unpacklo_f32x2	$d0, $d0, f32x2(0Fffffffff,0Fffffffff);
	// 
	// Next sample
	// 
	unpackhi_u8x4	$s0, $s0, $s0;
	// 
	unpackhi_u8x4	$s0, u8x4(255,255,255,255), $s0;
	unpackhi_u8x4	$s0, $s0, u8x4(255,255,255,255);
	// 
	// Next sample
	// 
	unpackhi_u16x2	$s0, $s0, $s0;
	// 
	unpackhi_u16x2	$s0, u16x2(-1,-1), $s0;
	unpackhi_u16x2	$s0, $s0, u16x2(-1,-1);
	// 
	// Next sample
	// 
	unpackhi_s8x4	$s0, $s0, $s0;
	// 
	unpackhi_s8x4	$s0, s8x4(-1,-1,-1,-1), $s0;
	unpackhi_s8x4	$s0, $s0, s8x4(-1,-1,-1,-1);
	// 
	// Next sample
	// 
	unpackhi_s16x2	$s0, $s0, $s0;
	// 
	unpackhi_s16x2	$s0, s16x2(-1,-1), $s0;
	unpackhi_s16x2	$s0, $s0, s16x2(-1,-1);
	// 
	// Next sample
	// 
	unpackhi_f16x2	$s0, $s0, $s0;
	// 
	unpackhi_f16x2	$s0, f16x2(0Hffff,0Hffff), $s0;
	unpackhi_f16x2	$s0, $s0, f16x2(0Hffff,0Hffff);
	// 
	// Next sample
	// 
	unpackhi_u8x8	$d0, $d0, $d0;
	// 
	unpackhi_u8x8	$d0, u8x8(255,255,255,255,255,255,255,255), $d0;
	unpackhi_u8x8	$d0, $d0, u8x8(255,255,255,255,255,255,255,255);
	// 
	// Next sample
	// 
	unpackhi_u16x4	$d0, $d0, $d0;
	// 
	unpackhi_u16x4	$d0, u16x4(-1,-1,-1,-1), $d0;
	unpackhi_u16x4	$d0, $d0, u16x4(-1,-1,-1,-1);
	// 
	// Next sample
	// 
	unpackhi_u32x2	$d0, $d0, $d0;
	// 
	unpackhi_u32x2	$d0, u32x2(-1,-1), $d0;
	unpackhi_u32x2	$d0, $d0, u32x2(-1,-1);
	// 
	// Next sample
	// 
	unpackhi_s8x8	$d0, $d0, $d0;
	// 
	unpackhi_s8x8	$d0, s8x8(-1,-1,-1,-1,-1,-1,-1,-1), $d0;
	unpackhi_s8x8	$d0, $d0, s8x8(-1,-1,-1,-1,-1,-1,-1,-1);
	// 
	// Next sample
	// 
	unpackhi_s16x4	$d0, $d0, $d0;
	// 
	unpackhi_s16x4	$d0, s16x4(-1,-1,-1,-1), $d0;
	unpackhi_s16x4	$d0, $d0, s16x4(-1,-1,-1,-1);
	// 
	// Next sample
	// 
	unpackhi_s32x2	$d0, $d0, $d0;
	// 
	unpackhi_s32x2	$d0, s32x2(-1,-1), $d0;
	unpackhi_s32x2	$d0, $d0, s32x2(-1,-1);
	// 
	// Next sample
	// 
	unpackhi_f16x4	$d0, $d0, $d0;
	// 
	unpackhi_f16x4	$d0, f16x4(0Hffff,0Hffff,0Hffff,0Hffff), $d0;
	unpackhi_f16x4	$d0, $d0, f16x4(0Hffff,0Hffff,0Hffff,0Hffff);
	// 
	// Next sample
	// 
	unpackhi_f32x2	$d0, $d0, $d0;
	// 
	unpackhi_f32x2	$d0, f32x2(0Fffffffff,0Fffffffff), $d0;
	unpackhi_f32x2	$d0, $d0, f32x2(0Fffffffff,0Fffffffff);
	// 
	// Next sample
	// 
	pack_u8x4_u32	$s0, $s0, $s0, $s0;
	// 
	pack_u8x4_u32	$s0, u8x4(255,255,255,255), $s0, $s0;
	pack_u8x4_u32	$s0, $s0, -1, $s0;
	pack_u8x4_u32	$s0, $s0, WAVESIZE, $s0;
	pack_u8x4_u32	$s0, $s0, $s0, -1;
	pack_u8x4_u32	$s0, $s0, $s0, WAVESIZE;
	// 
	// Next sample
	// 
	pack_u16x2_u32	$s0, $s0, $s0, $s0;
	// 
	pack_u16x2_u32	$s0, u16x2(-1,-1), $s0, $s0;
	pack_u16x2_u32	$s0, $s0, -1, $s0;
	pack_u16x2_u32	$s0, $s0, WAVESIZE, $s0;
	pack_u16x2_u32	$s0, $s0, $s0, -1;
	pack_u16x2_u32	$s0, $s0, $s0, WAVESIZE;
	// 
	// Next sample
	// 
	pack_u8x8_u32	$d0, $d0, $s0, $s0;
	// 
	pack_u8x8_u32	$d0, u8x8(255,255,255,255,255,255,255,255), $s0, $s0;
	pack_u8x8_u32	$d0, $d0, -1, $s0;
	pack_u8x8_u32	$d0, $d0, WAVESIZE, $s0;
	pack_u8x8_u32	$d0, $d0, $s0, -1;
	pack_u8x8_u32	$d0, $d0, $s0, WAVESIZE;
	// 
	// Next sample
	// 
	pack_u16x4_u32	$d0, $d0, $s0, $s0;
	// 
	pack_u16x4_u32	$d0, u16x4(-1,-1,-1,-1), $s0, $s0;
	pack_u16x4_u32	$d0, $d0, -1, $s0;
	pack_u16x4_u32	$d0, $d0, WAVESIZE, $s0;
	pack_u16x4_u32	$d0, $d0, $s0, -1;
	pack_u16x4_u32	$d0, $d0, $s0, WAVESIZE;
	// 
	// Next sample
	// 
	pack_u32x2_u32	$d0, $d0, $s0, $s0;
	// 
	pack_u32x2_u32	$d0, u32x2(-1,-1), $s0, $s0;
	pack_u32x2_u32	$d0, $d0, -1, $s0;
	pack_u32x2_u32	$d0, $d0, WAVESIZE, $s0;
	pack_u32x2_u32	$d0, $d0, $s0, -1;
	pack_u32x2_u32	$d0, $d0, $s0, WAVESIZE;
	// 
	// Next sample
	// 
	pack_u8x16_u32	$q0, $q0, $s0, $s0;
	// 
	pack_u8x16_u32	$q0, u8x16(0,0,0,0,0,0,0,0,107,240,55,174,50,95,28,113), $s0, $s0;
	pack_u8x16_u32	$q0, $q0, -1, $s0;
	pack_u8x16_u32	$q0, $q0, WAVESIZE, $s0;
	pack_u8x16_u32	$q0, $q0, $s0, -1;
	pack_u8x16_u32	$q0, $q0, $s0, WAVESIZE;
	// 
	// Next sample
	// 
	pack_u16x8_u32	$q0, $q0, $s0, $s0;
	// 
	pack_u16x8_u32	$q0, u16x8(0,0,0,0,0x6bf0,0x37ae,0x325f,0x1c71), $s0, $s0;
	pack_u16x8_u32	$q0, $q0, -1, $s0;
	pack_u16x8_u32	$q0, $q0, WAVESIZE, $s0;
	pack_u16x8_u32	$q0, $q0, $s0, -1;
	pack_u16x8_u32	$q0, $q0, $s0, WAVESIZE;
	// 
	// Next sample
	// 
	pack_u32x4_u32	$q0, $q0, $s0, $s0;
	// 
	pack_u32x4_u32	$q0, u32x4(0,0,0x6bf037ae,0x325f1c71), $s0, $s0;
	pack_u32x4_u32	$q0, $q0, -1, $s0;
	pack_u32x4_u32	$q0, $q0, WAVESIZE, $s0;
	pack_u32x4_u32	$q0, $q0, $s0, -1;
	pack_u32x4_u32	$q0, $q0, $s0, WAVESIZE;
	// 
	// Next sample
	// 
	pack_u64x2_u64	$q0, $q0, $d0, $s0;
	// 
	pack_u64x2_u64	$q0, u64x2(0,0x6bf037ae325f1c71), $d0, $s0;
	pack_u64x2_u64	$q0, $q0, -1, $s0;
	pack_u64x2_u64	$q0, $q0, WAVESIZE, $s0;
	pack_u64x2_u64	$q0, $q0, $d0, -1;
	pack_u64x2_u64	$q0, $q0, $d0, WAVESIZE;
	// 
	// Next sample
	// 
	pack_s8x4_s32	$s0, $s0, $s0, $s0;
	// 
	pack_s8x4_s32	$s0, s8x4(-1,-1,-1,-1), $s0, $s0;
	pack_s8x4_s32	$s0, $s0, -1, $s0;
	pack_s8x4_s32	$s0, $s0, WAVESIZE, $s0;
	pack_s8x4_s32	$s0, $s0, $s0, -1;
	pack_s8x4_s32	$s0, $s0, $s0, WAVESIZE;
	// 
	// Next sample
	// 
	pack_s16x2_s32	$s0, $s0, $s0, $s0;
	// 
	pack_s16x2_s32	$s0, s16x2(-1,-1), $s0, $s0;
	pack_s16x2_s32	$s0, $s0, -1, $s0;
	pack_s16x2_s32	$s0, $s0, WAVESIZE, $s0;
	pack_s16x2_s32	$s0, $s0, $s0, -1;
	pack_s16x2_s32	$s0, $s0, $s0, WAVESIZE;
	// 
	// Next sample
	// 
	pack_s8x8_s32	$d0, $d0, $s0, $s0;
	// 
	pack_s8x8_s32	$d0, s8x8(-1,-1,-1,-1,-1,-1,-1,-1), $s0, $s0;
	pack_s8x8_s32	$d0, $d0, -1, $s0;
	pack_s8x8_s32	$d0, $d0, WAVESIZE, $s0;
	pack_s8x8_s32	$d0, $d0, $s0, -1;
	pack_s8x8_s32	$d0, $d0, $s0, WAVESIZE;
	// 
	// Next sample
	// 
	pack_s16x4_s32	$d0, $d0, $s0, $s0;
	// 
	pack_s16x4_s32	$d0, s16x4(-1,-1,-1,-1), $s0, $s0;
	pack_s16x4_s32	$d0, $d0, -1, $s0;
	pack_s16x4_s32	$d0, $d0, WAVESIZE, $s0;
	pack_s16x4_s32	$d0, $d0, $s0, -1;
	pack_s16x4_s32	$d0, $d0, $s0, WAVESIZE;
	// 
	// Next sample
	// 
	pack_s32x2_s32	$d0, $d0, $s0, $s0;
	// 
	pack_s32x2_s32	$d0, s32x2(-1,-1), $s0, $s0;
	pack_s32x2_s32	$d0, $d0, -1, $s0;
	pack_s32x2_s32	$d0, $d0, WAVESIZE, $s0;
	pack_s32x2_s32	$d0, $d0, $s0, -1;
	pack_s32x2_s32	$d0, $d0, $s0, WAVESIZE;
	// 
	// Next sample
	// 
	pack_s8x16_s32	$q0, $q0, $s0, $s0;
	// 
	pack_s8x16_s32	$q0, s8x16(0,0,0,0,0,0,0,0,107,-16,55,-82,50,95,28,113), $s0, $s0;
	pack_s8x16_s32	$q0, $q0, -1, $s0;
	pack_s8x16_s32	$q0, $q0, WAVESIZE, $s0;
	pack_s8x16_s32	$q0, $q0, $s0, -1;
	pack_s8x16_s32	$q0, $q0, $s0, WAVESIZE;
	// 
	// Next sample
	// 
	pack_s16x8_s32	$q0, $q0, $s0, $s0;
	// 
	pack_s16x8_s32	$q0, s16x8(0,0,0,0,0x6bf0,0x37ae,0x325f,0x1c71), $s0, $s0;
	pack_s16x8_s32	$q0, $q0, -1, $s0;
	pack_s16x8_s32	$q0, $q0, WAVESIZE, $s0;
	pack_s16x8_s32	$q0, $q0, $s0, -1;
	pack_s16x8_s32	$q0, $q0, $s0, WAVESIZE;
	// 
	// Next sample
	// 
	pack_s32x4_s32	$q0, $q0, $s0, $s0;
	// 
	pack_s32x4_s32	$q0, s32x4(0,0,0x6bf037ae,0x325f1c71), $s0, $s0;
	pack_s32x4_s32	$q0, $q0, -1, $s0;
	pack_s32x4_s32	$q0, $q0, WAVESIZE, $s0;
	pack_s32x4_s32	$q0, $q0, $s0, -1;
	pack_s32x4_s32	$q0, $q0, $s0, WAVESIZE;
	// 
	// Next sample
	// 
	pack_s64x2_s64	$q0, $q0, $d0, $s0;
	// 
	pack_s64x2_s64	$q0, s64x2(0,0x6bf037ae325f1c71), $d0, $s0;
	pack_s64x2_s64	$q0, $q0, -1, $s0;
	pack_s64x2_s64	$q0, $q0, WAVESIZE, $s0;
	pack_s64x2_s64	$q0, $q0, $d0, -1;
	pack_s64x2_s64	$q0, $q0, $d0, WAVESIZE;
	// 
	// Next sample
	// 
	pack_f16x2_f16	$s0, $s0, $s0, $s0;
	// 
	pack_f16x2_f16	$s0, f16x2(0Hffff,0Hffff), $s0, $s0;
	pack_f16x2_f16	$s0, $s0, 0Hffff, $s0;
	pack_f16x2_f16	$s0, $s0, $s0, -1;
	pack_f16x2_f16	$s0, $s0, $s0, WAVESIZE;
	// 
	// Next sample
	// 
	pack_f16x4_f16	$d0, $d0, $s0, $s0;
	// 
	pack_f16x4_f16	$d0, f16x4(0Hffff,0Hffff,0Hffff,0Hffff), $s0, $s0;
	pack_f16x4_f16	$d0, $d0, 0Hffff, $s0;
	pack_f16x4_f16	$d0, $d0, $s0, -1;
	pack_f16x4_f16	$d0, $d0, $s0, WAVESIZE;
	// 
	// Next sample
	// 
	pack_f16x8_f16	$q0, $q0, $s0, $s0;
	// 
	pack_f16x8_f16	$q0, f16x8(0H0000,0H0000,0H0000,0H0000,0H6bf0,0H37ae,0H325f,0H1c71), $s0, $s0;
	pack_f16x8_f16	$q0, $q0, 0Hffff, $s0;
	pack_f16x8_f16	$q0, $q0, $s0, -1;
	pack_f16x8_f16	$q0, $q0, $s0, WAVESIZE;
	// 
	// Next sample
	// 
	pack_f32x2_f32	$d0, $d0, $s0, $s0;
	// 
	pack_f32x2_f32	$d0, f32x2(0Fffffffff,0Fffffffff), $s0, $s0;
	pack_f32x2_f32	$d0, $d0, 0Fffffffff, $s0;
	pack_f32x2_f32	$d0, $d0, $s0, -1;
	pack_f32x2_f32	$d0, $d0, $s0, WAVESIZE;
	// 
	// Next sample
	// 
	pack_f32x4_f32	$q0, $q0, $s0, $s0;
	// 
	pack_f32x4_f32	$q0, f32x4(0F00000000,0F00000000,0F6bf037ae,0F325f1c71), $s0, $s0;
	pack_f32x4_f32	$q0, $q0, 0Fffffffff, $s0;
	pack_f32x4_f32	$q0, $q0, $s0, -1;
	pack_f32x4_f32	$q0, $q0, $s0, WAVESIZE;
	// 
	// Next sample
	// 
	unpack_u32_u8x4	$s0, $s0, $s0;
	// 
	unpack_u32_u8x4	$s0, u8x4(255,255,255,255), $s0;
	unpack_u32_u8x4	$s0, $s0, -1;
	unpack_u32_u8x4	$s0, $s0, WAVESIZE;
	// 
	// Next sample
	// 
	unpack_u32_u16x2	$s0, $s0, $s0;
	// 
	unpack_u32_u16x2	$s0, u16x2(-1,-1), $s0;
	unpack_u32_u16x2	$s0, $s0, -1;
	unpack_u32_u16x2	$s0, $s0, WAVESIZE;
	// 
	// Next sample
	// 
	unpack_s32_s8x4	$s0, $s0, $s0;
	// 
	unpack_s32_s8x4	$s0, s8x4(-1,-1,-1,-1), $s0;
	unpack_s32_s8x4	$s0, $s0, -1;
	unpack_s32_s8x4	$s0, $s0, WAVESIZE;
	// 
	// Next sample
	// 
	unpack_s32_s16x2	$s0, $s0, $s0;
	// 
	unpack_s32_s16x2	$s0, s16x2(-1,-1), $s0;
	unpack_s32_s16x2	$s0, $s0, -1;
	unpack_s32_s16x2	$s0, $s0, WAVESIZE;
	// 
	// Next sample
	// 
	unpack_f16_f16x2	$s0, $s0, $s0;
	// 
	unpack_f16_f16x2	$s0, f16x2(0Hffff,0Hffff), $s0;
	unpack_f16_f16x2	$s0, $s0, -1;
	unpack_f16_f16x2	$s0, $s0, WAVESIZE;
	// 
	// Next sample
	// 
	unpack_u32_u8x8	$s0, $d0, $s0;
	// 
	unpack_u32_u8x8	$s0, u8x8(255,255,255,255,255,255,255,255), $s0;
	unpack_u32_u8x8	$s0, $d0, -1;
	unpack_u32_u8x8	$s0, $d0, WAVESIZE;
	// 
	// Next sample
	// 
	unpack_u32_u16x4	$s0, $d0, $s0;
	// 
	unpack_u32_u16x4	$s0, u16x4(-1,-1,-1,-1), $s0;
	unpack_u32_u16x4	$s0, $d0, -1;
	unpack_u32_u16x4	$s0, $d0, WAVESIZE;
	// 
	// Next sample
	// 
	unpack_u32_u32x2	$s0, $d0, $s0;
	// 
	unpack_u32_u32x2	$s0, u32x2(-1,-1), $s0;
	unpack_u32_u32x2	$s0, $d0, -1;
	unpack_u32_u32x2	$s0, $d0, WAVESIZE;
	// 
	// Next sample
	// 
	unpack_s32_s8x8	$s0, $d0, $s0;
	// 
	unpack_s32_s8x8	$s0, s8x8(-1,-1,-1,-1,-1,-1,-1,-1), $s0;
	unpack_s32_s8x8	$s0, $d0, -1;
	unpack_s32_s8x8	$s0, $d0, WAVESIZE;
	// 
	// Next sample
	// 
	unpack_s32_s16x4	$s0, $d0, $s0;
	// 
	unpack_s32_s16x4	$s0, s16x4(-1,-1,-1,-1), $s0;
	unpack_s32_s16x4	$s0, $d0, -1;
	unpack_s32_s16x4	$s0, $d0, WAVESIZE;
	// 
	// Next sample
	// 
	unpack_s32_s32x2	$s0, $d0, $s0;
	// 
	unpack_s32_s32x2	$s0, s32x2(-1,-1), $s0;
	unpack_s32_s32x2	$s0, $d0, -1;
	unpack_s32_s32x2	$s0, $d0, WAVESIZE;
	// 
	// Next sample
	// 
	unpack_f16_f16x4	$s0, $d0, $s0;
	// 
	unpack_f16_f16x4	$s0, f16x4(0Hffff,0Hffff,0Hffff,0Hffff), $s0;
	unpack_f16_f16x4	$s0, $d0, -1;
	unpack_f16_f16x4	$s0, $d0, WAVESIZE;
	// 
	// Next sample
	// 
	unpack_f32_f32x2	$s0, $d0, $s0;
	// 
	unpack_f32_f32x2	$s0, f32x2(0Fffffffff,0Fffffffff), $s0;
	unpack_f32_f32x2	$s0, $d0, -1;
	unpack_f32_f32x2	$s0, $d0, WAVESIZE;
	// 
	// Next sample
	// 
	unpack_u32_u8x16	$s0, $q0, $s0;
	// 
	unpack_u32_u8x16	$s0, u8x16(0,0,0,0,0,0,0,0,107,240,55,174,50,95,28,113), $s0;
	unpack_u32_u8x16	$s0, $q0, -1;
	unpack_u32_u8x16	$s0, $q0, WAVESIZE;
	// 
	// Next sample
	// 
	unpack_u32_u16x8	$s0, $q0, $s0;
	// 
	unpack_u32_u16x8	$s0, u16x8(0,0,0,0,0x6bf0,0x37ae,0x325f,0x1c71), $s0;
	unpack_u32_u16x8	$s0, $q0, -1;
	unpack_u32_u16x8	$s0, $q0, WAVESIZE;
	// 
	// Next sample
	// 
	unpack_u32_u32x4	$s0, $q0, $s0;
	// 
	unpack_u32_u32x4	$s0, u32x4(0,0,0x6bf037ae,0x325f1c71), $s0;
	unpack_u32_u32x4	$s0, $q0, -1;
	unpack_u32_u32x4	$s0, $q0, WAVESIZE;
	// 
	// Next sample
	// 
	unpack_u64_u64x2	$d0, $q0, $s0;
	// 
	unpack_u64_u64x2	$d0, u64x2(0,0x6bf037ae325f1c71), $s0;
	unpack_u64_u64x2	$d0, $q0, -1;
	unpack_u64_u64x2	$d0, $q0, WAVESIZE;
	// 
	// Next sample
	// 
	unpack_s32_s8x16	$s0, $q0, $s0;
	// 
	unpack_s32_s8x16	$s0, s8x16(0,0,0,0,0,0,0,0,107,-16,55,-82,50,95,28,113), $s0;
	unpack_s32_s8x16	$s0, $q0, -1;
	unpack_s32_s8x16	$s0, $q0, WAVESIZE;
	// 
	// Next sample
	// 
	unpack_s32_s16x8	$s0, $q0, $s0;
	// 
	unpack_s32_s16x8	$s0, s16x8(0,0,0,0,0x6bf0,0x37ae,0x325f,0x1c71), $s0;
	unpack_s32_s16x8	$s0, $q0, -1;
	unpack_s32_s16x8	$s0, $q0, WAVESIZE;
	// 
	// Next sample
	// 
	unpack_s32_s32x4	$s0, $q0, $s0;
	// 
	unpack_s32_s32x4	$s0, s32x4(0,0,0x6bf037ae,0x325f1c71), $s0;
	unpack_s32_s32x4	$s0, $q0, -1;
	unpack_s32_s32x4	$s0, $q0, WAVESIZE;
	// 
	// Next sample
	// 
	unpack_s64_s64x2	$d0, $q0, $s0;
	// 
	unpack_s64_s64x2	$d0, s64x2(0,0x6bf037ae325f1c71), $s0;
	unpack_s64_s64x2	$d0, $q0, -1;
	unpack_s64_s64x2	$d0, $q0, WAVESIZE;
	// 
	// Next sample
	// 
	unpack_f16_f16x8	$s0, $q0, $s0;
	// 
	unpack_f16_f16x8	$s0, f16x8(0H0000,0H0000,0H0000,0H0000,0H6bf0,0H37ae,0H325f,0H1c71), $s0;
	unpack_f16_f16x8	$s0, $q0, -1;
	unpack_f16_f16x8	$s0, $q0, WAVESIZE;
	// 
	// Next sample
	// 
	unpack_f32_f32x4	$s0, $q0, $s0;
	// 
	unpack_f32_f32x4	$s0, f32x4(0F00000000,0F00000000,0F6bf037ae,0F325f1c71), $s0;
	unpack_f32_f32x4	$s0, $q0, -1;
	unpack_f32_f32x4	$s0, $q0, WAVESIZE;
	// 
	// Next sample
	// 
	cmov_b1	$c0, $c0, $c0, $c0;
	// 
	cmov_b1	$c0, 1, $c0, $c0;
	cmov_b1	$c0, WAVESIZE, $c0, $c0;
	cmov_b1	$c0, $c0, 1, $c0;
	cmov_b1	$c0, $c0, WAVESIZE, $c0;
	cmov_b1	$c0, $c0, $c0, 1;
	cmov_b1	$c0, $c0, $c0, WAVESIZE;
	// 
	// Next sample
	// 
	cmov_b32	$s0, $c0, $s0, $s0;
	// 
	cmov_b32	$s0, 1, $s0, $s0;
	cmov_b32	$s0, WAVESIZE, $s0, $s0;
	cmov_b32	$s0, $c0, -1, $s0;
	cmov_b32	$s0, $c0, WAVESIZE, $s0;
	cmov_b32	$s0, $c0, $s0, -1;
	cmov_b32	$s0, $c0, $s0, WAVESIZE;
	// 
	// Next sample
	// 
	cmov_b64	$d0, $c0, $d0, $d0;
	// 
	cmov_b64	$d0, 1, $d0, $d0;
	cmov_b64	$d0, WAVESIZE, $d0, $d0;
	cmov_b64	$d0, $c0, -1, $d0;
	cmov_b64	$d0, $c0, WAVESIZE, $d0;
	cmov_b64	$d0, $c0, $d0, -1;
	cmov_b64	$d0, $c0, $d0, WAVESIZE;
	// 
	// Next sample
	// 
	cmov_u8x4	$s0, $s0, $s0, $s0;
	// 
	cmov_u8x4	$s0, u8x4(255,255,255,255), $s0, $s0;
	cmov_u8x4	$s0, $s0, u8x4(255,255,255,255), $s0;
	cmov_u8x4	$s0, $s0, $s0, u8x4(255,255,255,255);
	// 
	// Next sample
	// 
	cmov_u16x2	$s0, $s0, $s0, $s0;
	// 
	cmov_u16x2	$s0, u16x2(-1,-1), $s0, $s0;
	cmov_u16x2	$s0, $s0, u16x2(-1,-1), $s0;
	cmov_u16x2	$s0, $s0, $s0, u16x2(-1,-1);
	// 
	// Next sample
	// 
	cmov_s8x4	$s0, $s0, $s0, $s0;
	// 
	cmov_s8x4	$s0, u8x4(255,255,255,255), $s0, $s0;
	cmov_s8x4	$s0, $s0, s8x4(-1,-1,-1,-1), $s0;
	cmov_s8x4	$s0, $s0, $s0, s8x4(-1,-1,-1,-1);
	// 
	// Next sample
	// 
	cmov_s16x2	$s0, $s0, $s0, $s0;
	// 
	cmov_s16x2	$s0, u16x2(-1,-1), $s0, $s0;
	cmov_s16x2	$s0, $s0, s16x2(-1,-1), $s0;
	cmov_s16x2	$s0, $s0, $s0, s16x2(-1,-1);
	// 
	// Next sample
	// 
	cmov_f16x2	$s0, $s0, $s0, $s0;
	// 
	cmov_f16x2	$s0, u16x2(-1,-1), $s0, $s0;
	cmov_f16x2	$s0, $s0, f16x2(0Hffff,0Hffff), $s0;
	cmov_f16x2	$s0, $s0, $s0, f16x2(0Hffff,0Hffff);
	// 
	// Next sample
	// 
	cmov_u8x8	$d0, $d0, $d0, $d0;
	// 
	cmov_u8x8	$d0, u8x8(255,255,255,255,255,255,255,255), $d0, $d0;
	cmov_u8x8	$d0, $d0, u8x8(255,255,255,255,255,255,255,255), $d0;
	cmov_u8x8	$d0, $d0, $d0, u8x8(255,255,255,255,255,255,255,255);
	// 
	// Next sample
	// 
	cmov_u16x4	$d0, $d0, $d0, $d0;
	// 
	cmov_u16x4	$d0, u16x4(-1,-1,-1,-1), $d0, $d0;
	cmov_u16x4	$d0, $d0, u16x4(-1,-1,-1,-1), $d0;
	cmov_u16x4	$d0, $d0, $d0, u16x4(-1,-1,-1,-1);
	// 
	// Next sample
	// 
	cmov_u32x2	$d0, $d0, $d0, $d0;
	// 
	cmov_u32x2	$d0, u32x2(-1,-1), $d0, $d0;
	cmov_u32x2	$d0, $d0, u32x2(-1,-1), $d0;
	cmov_u32x2	$d0, $d0, $d0, u32x2(-1,-1);
	// 
	// Next sample
	// 
	cmov_s8x8	$d0, $d0, $d0, $d0;
	// 
	cmov_s8x8	$d0, u8x8(255,255,255,255,255,255,255,255), $d0, $d0;
	cmov_s8x8	$d0, $d0, s8x8(-1,-1,-1,-1,-1,-1,-1,-1), $d0;
	cmov_s8x8	$d0, $d0, $d0, s8x8(-1,-1,-1,-1,-1,-1,-1,-1);
	// 
	// Next sample
	// 
	cmov_s16x4	$d0, $d0, $d0, $d0;
	// 
	cmov_s16x4	$d0, u16x4(-1,-1,-1,-1), $d0, $d0;
	cmov_s16x4	$d0, $d0, s16x4(-1,-1,-1,-1), $d0;
	cmov_s16x4	$d0, $d0, $d0, s16x4(-1,-1,-1,-1);
	// 
	// Next sample
	// 
	cmov_s32x2	$d0, $d0, $d0, $d0;
	// 
	cmov_s32x2	$d0, u32x2(-1,-1), $d0, $d0;
	cmov_s32x2	$d0, $d0, s32x2(-1,-1), $d0;
	cmov_s32x2	$d0, $d0, $d0, s32x2(-1,-1);
	// 
	// Next sample
	// 
	cmov_f16x4	$d0, $d0, $d0, $d0;
	// 
	cmov_f16x4	$d0, u16x4(-1,-1,-1,-1), $d0, $d0;
	cmov_f16x4	$d0, $d0, f16x4(0Hffff,0Hffff,0Hffff,0Hffff), $d0;
	cmov_f16x4	$d0, $d0, $d0, f16x4(0Hffff,0Hffff,0Hffff,0Hffff);
	// 
	// Next sample
	// 
	cmov_f32x2	$d0, $d0, $d0, $d0;
	// 
	cmov_f32x2	$d0, u32x2(-1,-1), $d0, $d0;
	cmov_f32x2	$d0, $d0, f32x2(0Fffffffff,0Fffffffff), $d0;
	cmov_f32x2	$d0, $d0, $d0, f32x2(0Fffffffff,0Fffffffff);
	// 
	// Next sample
	// 
	cmov_u8x16	$q0, $q0, $q0, $q0;
	// 
	cmov_u8x16	$q0, u8x16(0,0,0,0,0,0,0,0,107,240,55,174,50,95,28,113), $q0, $q0;
	cmov_u8x16	$q0, $q0, u8x16(0,0,0,0,0,0,0,0,107,240,55,174,50,95,28,113), $q0;
	cmov_u8x16	$q0, $q0, $q0, u8x16(0,0,0,0,0,0,0,0,107,240,55,174,50,95,28,113);
	// 
	// Next sample
	// 
	cmov_u16x8	$q0, $q0, $q0, $q0;
	// 
	cmov_u16x8	$q0, u16x8(0,0,0,0,0x6bf0,0x37ae,0x325f,0x1c71), $q0, $q0;
	cmov_u16x8	$q0, $q0, u16x8(0,0,0,0,0x6bf0,0x37ae,0x325f,0x1c71), $q0;
	cmov_u16x8	$q0, $q0, $q0, u16x8(0,0,0,0,0x6bf0,0x37ae,0x325f,0x1c71);
	// 
	// Next sample
	// 
	cmov_u32x4	$q0, $q0, $q0, $q0;
	// 
	cmov_u32x4	$q0, u32x4(0,0,0x6bf037ae,0x325f1c71), $q0, $q0;
	cmov_u32x4	$q0, $q0, u32x4(0,0,0x6bf037ae,0x325f1c71), $q0;
	cmov_u32x4	$q0, $q0, $q0, u32x4(0,0,0x6bf037ae,0x325f1c71);
	// 
	// Next sample
	// 
	cmov_u64x2	$q0, $q0, $q0, $q0;
	// 
	cmov_u64x2	$q0, u64x2(0,0x6bf037ae325f1c71), $q0, $q0;
	cmov_u64x2	$q0, $q0, u64x2(0,0x6bf037ae325f1c71), $q0;
	cmov_u64x2	$q0, $q0, $q0, u64x2(0,0x6bf037ae325f1c71);
	// 
	// Next sample
	// 
	cmov_s8x16	$q0, $q0, $q0, $q0;
	// 
	cmov_s8x16	$q0, u8x16(0,0,0,0,0,0,0,0,107,240,55,174,50,95,28,113), $q0, $q0;
	cmov_s8x16	$q0, $q0, s8x16(0,0,0,0,0,0,0,0,107,-16,55,-82,50,95,28,113), $q0;
	cmov_s8x16	$q0, $q0, $q0, s8x16(0,0,0,0,0,0,0,0,107,-16,55,-82,50,95,28,113);
	// 
	// Next sample
	// 
	cmov_s16x8	$q0, $q0, $q0, $q0;
	// 
	cmov_s16x8	$q0, u16x8(0,0,0,0,0x6bf0,0x37ae,0x325f,0x1c71), $q0, $q0;
	cmov_s16x8	$q0, $q0, s16x8(0,0,0,0,0x6bf0,0x37ae,0x325f,0x1c71), $q0;
	cmov_s16x8	$q0, $q0, $q0, s16x8(0,0,0,0,0x6bf0,0x37ae,0x325f,0x1c71);
	// 
	// Next sample
	// 
	cmov_s32x4	$q0, $q0, $q0, $q0;
	// 
	cmov_s32x4	$q0, u32x4(0,0,0x6bf037ae,0x325f1c71), $q0, $q0;
	cmov_s32x4	$q0, $q0, s32x4(0,0,0x6bf037ae,0x325f1c71), $q0;
	cmov_s32x4	$q0, $q0, $q0, s32x4(0,0,0x6bf037ae,0x325f1c71);
	// 
	// Next sample
	// 
	cmov_s64x2	$q0, $q0, $q0, $q0;
	// 
	cmov_s64x2	$q0, u64x2(0,0x6bf037ae325f1c71), $q0, $q0;
	cmov_s64x2	$q0, $q0, s64x2(0,0x6bf037ae325f1c71), $q0;
	cmov_s64x2	$q0, $q0, $q0, s64x2(0,0x6bf037ae325f1c71);
	// 
	// Next sample
	// 
	cmov_f16x8	$q0, $q0, $q0, $q0;
	// 
	cmov_f16x8	$q0, u16x8(0,0,0,0,0x6bf0,0x37ae,0x325f,0x1c71), $q0, $q0;
	cmov_f16x8	$q0, $q0, f16x8(0H0000,0H0000,0H0000,0H0000,0H6bf0,0H37ae,0H325f,0H1c71), $q0;
	cmov_f16x8	$q0, $q0, $q0, f16x8(0H0000,0H0000,0H0000,0H0000,0H6bf0,0H37ae,0H325f,0H1c71);
	// 
	// Next sample
	// 
	cmov_f32x4	$q0, $q0, $q0, $q0;
	// 
	cmov_f32x4	$q0, u32x4(0,0,0x6bf037ae,0x325f1c71), $q0, $q0;
	cmov_f32x4	$q0, $q0, f32x4(0F00000000,0F00000000,0F6bf037ae,0F325f1c71), $q0;
	cmov_f32x4	$q0, $q0, $q0, f32x4(0F00000000,0F00000000,0F6bf037ae,0F325f1c71);
	// 
	// Next sample
	// 
	class_b1_f16	$c0, $s0, $s0;
	// 
	class_b1_f16	$c0, 0Hffff, $s0;
	class_b1_f16	$c0, $s0, -1;
	// 
	// Next sample
	// 
	class_b1_f32	$c0, $s0, $s0;
	// 
	class_b1_f32	$c0, 0Fffffffff, $s0;
	class_b1_f32	$c0, $s0, -1;
	// 
	// Next sample
	// 
	nsin_f32	$s0, $s0;
	// 
	nsin_f32	$s0, 0Fffffffff;
	// 
	// Next sample
	// 
	ncos_f32	$s0, $s0;
	// 
	ncos_f32	$s0, 0Fffffffff;
	// 
	// Next sample
	// 
	nlog2_f32	$s0, $s0;
	// 
	nlog2_f32	$s0, 0Fffffffff;
	// 
	// Next sample
	// 
	nexp2_f32	$s0, $s0;
	// 
	nexp2_f32	$s0, 0Fffffffff;
	// 
	// Next sample
	// 
	nsqrt_f16	$s0, $s0;
	// 
	nsqrt_f16	$s0, 0Hffff;
	// 
	// Next sample
	// 
	nsqrt_f32	$s0, $s0;
	// 
	nsqrt_f32	$s0, 0Fffffffff;
	// 
	// Next sample
	// 
	nrsqrt_f16	$s0, $s0;
	// 
	nrsqrt_f16	$s0, 0Hffff;
	// 
	// Next sample
	// 
	nrsqrt_f32	$s0, $s0;
	// 
	nrsqrt_f32	$s0, 0Fffffffff;
	// 
	// Next sample
	// 
	nrcp_f16	$s0, $s0;
	// 
	nrcp_f16	$s0, 0Hffff;
	// 
	// Next sample
	// 
	nrcp_f32	$s0, $s0;
	// 
	nrcp_f32	$s0, 0Fffffffff;
	// 
	// Next sample
	// 
	nfma_f16	$s0, $s0, $s0, $s0;
	// 
	nfma_f16	$s0, 0Hffff, $s0, $s0;
	nfma_f16	$s0, $s0, 0Hffff, $s0;
	nfma_f16	$s0, $s0, $s0, 0Hffff;
	// 
	// Next sample
	// 
	nfma_f32	$s0, $s0, $s0, $s0;
	// 
	nfma_f32	$s0, 0Fffffffff, $s0, $s0;
	nfma_f32	$s0, $s0, 0Fffffffff, $s0;
	nfma_f32	$s0, $s0, $s0, 0Fffffffff;
	// 
	// Next sample
	// 
	bitalign_b32	$s0, $s0, $s0, $s0;
	// 
	bitalign_b32	$s0, -1, $s0, $s0;
	bitalign_b32	$s0, WAVESIZE, $s0, $s0;
	bitalign_b32	$s0, $s0, -1, $s0;
	bitalign_b32	$s0, $s0, WAVESIZE, $s0;
	bitalign_b32	$s0, $s0, $s0, -1;
	bitalign_b32	$s0, $s0, $s0, WAVESIZE;
	// 
	// Next sample
	// 
	bytealign_b32	$s0, $s0, $s0, $s0;
	// 
	bytealign_b32	$s0, -1, $s0, $s0;
	bytealign_b32	$s0, WAVESIZE, $s0, $s0;
	bytealign_b32	$s0, $s0, -1, $s0;
	bytealign_b32	$s0, $s0, WAVESIZE, $s0;
	bytealign_b32	$s0, $s0, $s0, -1;
	bytealign_b32	$s0, $s0, $s0, WAVESIZE;
	// 
	// Next sample
	// 
	lerp_u8x4	$s0, $s0, $s0, $s0;
	// 
	lerp_u8x4	$s0, u8x4(255,255,255,255), $s0, $s0;
	lerp_u8x4	$s0, $s0, u8x4(255,255,255,255), $s0;
	lerp_u8x4	$s0, $s0, $s0, u8x4(255,255,255,255);
	// 
	// Next sample
	// 
	sad_u32_u32	$s0, $s0, $s0, $s0;
	// 
	sad_u32_u32	$s0, -1, $s0, $s0;
	sad_u32_u32	$s0, WAVESIZE, $s0, $s0;
	sad_u32_u32	$s0, $s0, -1, $s0;
	sad_u32_u32	$s0, $s0, WAVESIZE, $s0;
	sad_u32_u32	$s0, $s0, $s0, -1;
	sad_u32_u32	$s0, $s0, $s0, WAVESIZE;
	// 
	// Next sample
	// 
	sad_u32_u8x4	$s0, $s0, $s0, $s0;
	// 
	sad_u32_u8x4	$s0, u8x4(255,255,255,255), $s0, $s0;
	sad_u32_u8x4	$s0, $s0, u8x4(255,255,255,255), $s0;
	sad_u32_u8x4	$s0, $s0, $s0, -1;
	sad_u32_u8x4	$s0, $s0, $s0, WAVESIZE;
	// 
	// Next sample
	// 
	sad_u32_u16x2	$s0, $s0, $s0, $s0;
	// 
	sad_u32_u16x2	$s0, u16x2(-1,-1), $s0, $s0;
	sad_u32_u16x2	$s0, $s0, u16x2(-1,-1), $s0;
	sad_u32_u16x2	$s0, $s0, $s0, -1;
	sad_u32_u16x2	$s0, $s0, $s0, WAVESIZE;
	// 
	// Next sample
	// 
	sadhi_u16x2_u8x4	$s0, $s0, $s0, $s0;
	// 
	sadhi_u16x2_u8x4	$s0, u8x4(255,255,255,255), $s0, $s0;
	sadhi_u16x2_u8x4	$s0, $s0, u8x4(255,255,255,255), $s0;
	sadhi_u16x2_u8x4	$s0, $s0, $s0, u16x2(-1,-1);
	// 
	// Next sample
	// 
	packcvt_u8x4_f32	$s0, $s0, $s0, $s0, $s0;
	// 
	packcvt_u8x4_f32	$s0, 0Fffffffff, $s0, $s0, $s0;
	packcvt_u8x4_f32	$s0, $s0, 0Fffffffff, $s0, $s0;
	packcvt_u8x4_f32	$s0, $s0, $s0, 0Fffffffff, $s0;
	packcvt_u8x4_f32	$s0, $s0, $s0, $s0, 0Fffffffff;
	// 
	// Next sample
	// 
	unpackcvt_f32_u8x4	$s0, $s0, 0;
	// 
	unpackcvt_f32_u8x4	$s0, u8x4(255,255,255,255), 0;
	unpackcvt_f32_u8x4	$s0, $s0, 1;
	unpackcvt_f32_u8x4	$s0, $s0, 2;
	unpackcvt_f32_u8x4	$s0, $s0, 3;
	// 
	// Next sample
	// 
	segmentp_global_b1_u64	$c0, $d0;
	// 
	segmentp_global_b1_u64	$c0, -1;
	segmentp_global_b1_u64	$c0, WAVESIZE;
	segmentp_global_nonull_b1_u64	$c0, $d0;
	// 
	// Next sample
	// 
	segmentp_group_b1_u64	$c0, $d0;
	// 
	segmentp_group_b1_u64	$c0, -1;
	segmentp_group_b1_u64	$c0, WAVESIZE;
	segmentp_group_nonull_b1_u64	$c0, $d0;
	// 
	// Next sample
	// 
	segmentp_private_b1_u64	$c0, $d0;
	// 
	segmentp_private_b1_u64	$c0, -1;
	segmentp_private_b1_u64	$c0, WAVESIZE;
	segmentp_private_nonull_b1_u64	$c0, $d0;
	// 
	// Next sample
	// 
	ftos_group_u32_u64	$s0, $d0;
	// 
	ftos_group_u32_u64	$s0, -1;
	ftos_group_u32_u64	$s0, WAVESIZE;
	ftos_group_nonull_u32_u64	$s0, $d0;
	// 
	// Next sample
	// 
	ftos_private_u32_u64	$s0, $d0;
	// 
	ftos_private_u32_u64	$s0, -1;
	ftos_private_u32_u64	$s0, WAVESIZE;
	ftos_private_nonull_u32_u64	$s0, $d0;
	// 
	// Next sample
	// 
	stof_group_u64_u32	$d0, $s0;
	// 
	stof_group_u64_u32	$d0, -1;
	stof_group_u64_u32	$d0, WAVESIZE;
	stof_group_nonull_u64_u32	$d0, $s0;
	// 
	// Next sample
	// 
	stof_private_u64_u32	$d0, $s0;
	// 
	stof_private_u64_u32	$d0, -1;
	stof_private_u64_u32	$d0, WAVESIZE;
	stof_private_nonull_u64_u32	$d0, $s0;
	// 
	// Next sample
	// 
	cmp_eq_u32_u32	$s0, $s0, $s0;
	// 
	cmp_ne_u32_u32	$s0, $s0, $s0;
	cmp_lt_u32_u32	$s0, $s0, $s0;
	cmp_le_u32_u32	$s0, $s0, $s0;
	cmp_gt_u32_u32	$s0, $s0, $s0;
	cmp_ge_u32_u32	$s0, $s0, $s0;
	cmp_eq_u32_u32	$s0, -1, $s0;
	cmp_eq_u32_u32	$s0, WAVESIZE, $s0;
	cmp_eq_u32_u32	$s0, $s0, -1;
	cmp_eq_u32_u32	$s0, $s0, WAVESIZE;
	// 
	// Next sample
	// 
	cmp_eq_u64_u32	$d0, $s0, $s0;
	// 
	cmp_ne_u64_u32	$d0, $s0, $s0;
	cmp_lt_u64_u32	$d0, $s0, $s0;
	cmp_le_u64_u32	$d0, $s0, $s0;
	cmp_gt_u64_u32	$d0, $s0, $s0;
	cmp_ge_u64_u32	$d0, $s0, $s0;
	cmp_eq_u64_u32	$d0, -1, $s0;
	cmp_eq_u64_u32	$d0, WAVESIZE, $s0;
	cmp_eq_u64_u32	$d0, $s0, -1;
	cmp_eq_u64_u32	$d0, $s0, WAVESIZE;
	// 
	// Next sample
	// 
	cmp_eq_s32_u32	$s0, $s0, $s0;
	// 
	cmp_ne_s32_u32	$s0, $s0, $s0;
	cmp_lt_s32_u32	$s0, $s0, $s0;
	cmp_le_s32_u32	$s0, $s0, $s0;
	cmp_gt_s32_u32	$s0, $s0, $s0;
	cmp_ge_s32_u32	$s0, $s0, $s0;
	cmp_eq_s32_u32	$s0, -1, $s0;
	cmp_eq_s32_u32	$s0, WAVESIZE, $s0;
	cmp_eq_s32_u32	$s0, $s0, -1;
	cmp_eq_s32_u32	$s0, $s0, WAVESIZE;
	// 
	// Next sample
	// 
	cmp_eq_s64_u32	$d0, $s0, $s0;
	// 
	cmp_ne_s64_u32	$d0, $s0, $s0;
	cmp_lt_s64_u32	$d0, $s0, $s0;
	cmp_le_s64_u32	$d0, $s0, $s0;
	cmp_gt_s64_u32	$d0, $s0, $s0;
	cmp_ge_s64_u32	$d0, $s0, $s0;
	cmp_eq_s64_u32	$d0, -1, $s0;
	cmp_eq_s64_u32	$d0, WAVESIZE, $s0;
	cmp_eq_s64_u32	$d0, $s0, -1;
	cmp_eq_s64_u32	$d0, $s0, WAVESIZE;
	// 
	// Next sample
	// 
	cmp_eq_f16_u32	$s0, $s0, $s0;
	// 
	cmp_ne_f16_u32	$s0, $s0, $s0;
	cmp_lt_f16_u32	$s0, $s0, $s0;
	cmp_le_f16_u32	$s0, $s0, $s0;
	cmp_gt_f16_u32	$s0, $s0, $s0;
	cmp_ge_f16_u32	$s0, $s0, $s0;
	cmp_eq_f16_u32	$s0, -1, $s0;
	cmp_eq_f16_u32	$s0, WAVESIZE, $s0;
	cmp_eq_f16_u32	$s0, $s0, -1;
	cmp_eq_f16_u32	$s0, $s0, WAVESIZE;
	// 
	// Next sample
	// 
	cmp_eq_f32_u32	$s0, $s0, $s0;
	// 
	cmp_ne_f32_u32	$s0, $s0, $s0;
	cmp_lt_f32_u32	$s0, $s0, $s0;
	cmp_le_f32_u32	$s0, $s0, $s0;
	cmp_gt_f32_u32	$s0, $s0, $s0;
	cmp_ge_f32_u32	$s0, $s0, $s0;
	cmp_eq_f32_u32	$s0, -1, $s0;
	cmp_eq_f32_u32	$s0, WAVESIZE, $s0;
	cmp_eq_f32_u32	$s0, $s0, -1;
	cmp_eq_f32_u32	$s0, $s0, WAVESIZE;
	// 
	// Next sample
	// 
	cmp_eq_b1_u32	$c0, $s0, $s0;
	// 
	cmp_ne_b1_u32	$c0, $s0, $s0;
	cmp_lt_b1_u32	$c0, $s0, $s0;
	cmp_le_b1_u32	$c0, $s0, $s0;
	cmp_gt_b1_u32	$c0, $s0, $s0;
	cmp_ge_b1_u32	$c0, $s0, $s0;
	cmp_eq_b1_u32	$c0, -1, $s0;
	cmp_eq_b1_u32	$c0, WAVESIZE, $s0;
	cmp_eq_b1_u32	$c0, $s0, -1;
	cmp_eq_b1_u32	$c0, $s0, WAVESIZE;
	// 
	// Next sample
	// 
	cmp_eq_u32_u64	$s0, $d0, $d0;
	// 
	cmp_ne_u32_u64	$s0, $d0, $d0;
	cmp_lt_u32_u64	$s0, $d0, $d0;
	cmp_le_u32_u64	$s0, $d0, $d0;
	cmp_gt_u32_u64	$s0, $d0, $d0;
	cmp_ge_u32_u64	$s0, $d0, $d0;
	cmp_eq_u32_u64	$s0, -1, $d0;
	cmp_eq_u32_u64	$s0, WAVESIZE, $d0;
	cmp_eq_u32_u64	$s0, $d0, -1;
	cmp_eq_u32_u64	$s0, $d0, WAVESIZE;
	// 
	// Next sample
	// 
	cmp_eq_u64_u64	$d0, $d0, $d0;
	// 
	cmp_ne_u64_u64	$d0, $d0, $d0;
	cmp_lt_u64_u64	$d0, $d0, $d0;
	cmp_le_u64_u64	$d0, $d0, $d0;
	cmp_gt_u64_u64	$d0, $d0, $d0;
	cmp_ge_u64_u64	$d0, $d0, $d0;
	cmp_eq_u64_u64	$d0, -1, $d0;
	cmp_eq_u64_u64	$d0, WAVESIZE, $d0;
	cmp_eq_u64_u64	$d0, $d0, -1;
	cmp_eq_u64_u64	$d0, $d0, WAVESIZE;
	// 
	// Next sample
	// 
	cmp_eq_s32_u64	$s0, $d0, $d0;
	// 
	cmp_ne_s32_u64	$s0, $d0, $d0;
	cmp_lt_s32_u64	$s0, $d0, $d0;
	cmp_le_s32_u64	$s0, $d0, $d0;
	cmp_gt_s32_u64	$s0, $d0, $d0;
	cmp_ge_s32_u64	$s0, $d0, $d0;
	cmp_eq_s32_u64	$s0, -1, $d0;
	cmp_eq_s32_u64	$s0, WAVESIZE, $d0;
	cmp_eq_s32_u64	$s0, $d0, -1;
	cmp_eq_s32_u64	$s0, $d0, WAVESIZE;
	// 
	// Next sample
	// 
	cmp_eq_s64_u64	$d0, $d0, $d0;
	// 
	cmp_ne_s64_u64	$d0, $d0, $d0;
	cmp_lt_s64_u64	$d0, $d0, $d0;
	cmp_le_s64_u64	$d0, $d0, $d0;
	cmp_gt_s64_u64	$d0, $d0, $d0;
	cmp_ge_s64_u64	$d0, $d0, $d0;
	cmp_eq_s64_u64	$d0, -1, $d0;
	cmp_eq_s64_u64	$d0, WAVESIZE, $d0;
	cmp_eq_s64_u64	$d0, $d0, -1;
	cmp_eq_s64_u64	$d0, $d0, WAVESIZE;
	// 
	// Next sample
	// 
	cmp_eq_f16_u64	$s0, $d0, $d0;
	// 
	cmp_ne_f16_u64	$s0, $d0, $d0;
	cmp_lt_f16_u64	$s0, $d0, $d0;
	cmp_le_f16_u64	$s0, $d0, $d0;
	cmp_gt_f16_u64	$s0, $d0, $d0;
	cmp_ge_f16_u64	$s0, $d0, $d0;
	cmp_eq_f16_u64	$s0, -1, $d0;
	cmp_eq_f16_u64	$s0, WAVESIZE, $d0;
	cmp_eq_f16_u64	$s0, $d0, -1;
	cmp_eq_f16_u64	$s0, $d0, WAVESIZE;
	// 
	// Next sample
	// 
	cmp_eq_f32_u64	$s0, $d0, $d0;
	// 
	cmp_ne_f32_u64	$s0, $d0, $d0;
	cmp_lt_f32_u64	$s0, $d0, $d0;
	cmp_le_f32_u64	$s0, $d0, $d0;
	cmp_gt_f32_u64	$s0, $d0, $d0;
	cmp_ge_f32_u64	$s0, $d0, $d0;
	cmp_eq_f32_u64	$s0, -1, $d0;
	cmp_eq_f32_u64	$s0, WAVESIZE, $d0;
	cmp_eq_f32_u64	$s0, $d0, -1;
	cmp_eq_f32_u64	$s0, $d0, WAVESIZE;
	// 
	// Next sample
	// 
	cmp_eq_b1_u64	$c0, $d0, $d0;
	// 
	cmp_ne_b1_u64	$c0, $d0, $d0;
	cmp_lt_b1_u64	$c0, $d0, $d0;
	cmp_le_b1_u64	$c0, $d0, $d0;
	cmp_gt_b1_u64	$c0, $d0, $d0;
	cmp_ge_b1_u64	$c0, $d0, $d0;
	cmp_eq_b1_u64	$c0, -1, $d0;
	cmp_eq_b1_u64	$c0, WAVESIZE, $d0;
	cmp_eq_b1_u64	$c0, $d0, -1;
	cmp_eq_b1_u64	$c0, $d0, WAVESIZE;
	// 
	// Next sample
	// 
	cmp_eq_u32_s32	$s0, $s0, $s0;
	// 
	cmp_ne_u32_s32	$s0, $s0, $s0;
	cmp_lt_u32_s32	$s0, $s0, $s0;
	cmp_le_u32_s32	$s0, $s0, $s0;
	cmp_gt_u32_s32	$s0, $s0, $s0;
	cmp_ge_u32_s32	$s0, $s0, $s0;
	cmp_eq_u32_s32	$s0, -1, $s0;
	cmp_eq_u32_s32	$s0, WAVESIZE, $s0;
	cmp_eq_u32_s32	$s0, $s0, -1;
	cmp_eq_u32_s32	$s0, $s0, WAVESIZE;
	// 
	// Next sample
	// 
	cmp_eq_u64_s32	$d0, $s0, $s0;
	// 
	cmp_ne_u64_s32	$d0, $s0, $s0;
	cmp_lt_u64_s32	$d0, $s0, $s0;
	cmp_le_u64_s32	$d0, $s0, $s0;
	cmp_gt_u64_s32	$d0, $s0, $s0;
	cmp_ge_u64_s32	$d0, $s0, $s0;
	cmp_eq_u64_s32	$d0, -1, $s0;
	cmp_eq_u64_s32	$d0, WAVESIZE, $s0;
	cmp_eq_u64_s32	$d0, $s0, -1;
	cmp_eq_u64_s32	$d0, $s0, WAVESIZE;
	// 
	// Next sample
	// 
	cmp_eq_s32_s32	$s0, $s0, $s0;
	// 
	cmp_ne_s32_s32	$s0, $s0, $s0;
	cmp_lt_s32_s32	$s0, $s0, $s0;
	cmp_le_s32_s32	$s0, $s0, $s0;
	cmp_gt_s32_s32	$s0, $s0, $s0;
	cmp_ge_s32_s32	$s0, $s0, $s0;
	cmp_eq_s32_s32	$s0, -1, $s0;
	cmp_eq_s32_s32	$s0, WAVESIZE, $s0;
	cmp_eq_s32_s32	$s0, $s0, -1;
	cmp_eq_s32_s32	$s0, $s0, WAVESIZE;
	// 
	// Next sample
	// 
	cmp_eq_s64_s32	$d0, $s0, $s0;
	// 
	cmp_ne_s64_s32	$d0, $s0, $s0;
	cmp_lt_s64_s32	$d0, $s0, $s0;
	cmp_le_s64_s32	$d0, $s0, $s0;
	cmp_gt_s64_s32	$d0, $s0, $s0;
	cmp_ge_s64_s32	$d0, $s0, $s0;
	cmp_eq_s64_s32	$d0, -1, $s0;
	cmp_eq_s64_s32	$d0, WAVESIZE, $s0;
	cmp_eq_s64_s32	$d0, $s0, -1;
	cmp_eq_s64_s32	$d0, $s0, WAVESIZE;
	// 
	// Next sample
	// 
	cmp_eq_f16_s32	$s0, $s0, $s0;
	// 
	cmp_ne_f16_s32	$s0, $s0, $s0;
	cmp_lt_f16_s32	$s0, $s0, $s0;
	cmp_le_f16_s32	$s0, $s0, $s0;
	cmp_gt_f16_s32	$s0, $s0, $s0;
	cmp_ge_f16_s32	$s0, $s0, $s0;
	cmp_eq_f16_s32	$s0, -1, $s0;
	cmp_eq_f16_s32	$s0, WAVESIZE, $s0;
	cmp_eq_f16_s32	$s0, $s0, -1;
	cmp_eq_f16_s32	$s0, $s0, WAVESIZE;
	// 
	// Next sample
	// 
	cmp_eq_f32_s32	$s0, $s0, $s0;
	// 
	cmp_ne_f32_s32	$s0, $s0, $s0;
	cmp_lt_f32_s32	$s0, $s0, $s0;
	cmp_le_f32_s32	$s0, $s0, $s0;
	cmp_gt_f32_s32	$s0, $s0, $s0;
	cmp_ge_f32_s32	$s0, $s0, $s0;
	cmp_eq_f32_s32	$s0, -1, $s0;
	cmp_eq_f32_s32	$s0, WAVESIZE, $s0;
	cmp_eq_f32_s32	$s0, $s0, -1;
	cmp_eq_f32_s32	$s0, $s0, WAVESIZE;
	// 
	// Next sample
	// 
	cmp_eq_b1_s32	$c0, $s0, $s0;
	// 
	cmp_ne_b1_s32	$c0, $s0, $s0;
	cmp_lt_b1_s32	$c0, $s0, $s0;
	cmp_le_b1_s32	$c0, $s0, $s0;
	cmp_gt_b1_s32	$c0, $s0, $s0;
	cmp_ge_b1_s32	$c0, $s0, $s0;
	cmp_eq_b1_s32	$c0, -1, $s0;
	cmp_eq_b1_s32	$c0, WAVESIZE, $s0;
	cmp_eq_b1_s32	$c0, $s0, -1;
	cmp_eq_b1_s32	$c0, $s0, WAVESIZE;
	// 
	// Next sample
	// 
	cmp_eq_u32_s64	$s0, $d0, $d0;
	// 
	cmp_ne_u32_s64	$s0, $d0, $d0;
	cmp_lt_u32_s64	$s0, $d0, $d0;
	cmp_le_u32_s64	$s0, $d0, $d0;
	cmp_gt_u32_s64	$s0, $d0, $d0;
	cmp_ge_u32_s64	$s0, $d0, $d0;
	cmp_eq_u32_s64	$s0, -1, $d0;
	cmp_eq_u32_s64	$s0, WAVESIZE, $d0;
	cmp_eq_u32_s64	$s0, $d0, -1;
	cmp_eq_u32_s64	$s0, $d0, WAVESIZE;
	// 
	// Next sample
	// 
	cmp_eq_u64_s64	$d0, $d0, $d0;
	// 
	cmp_ne_u64_s64	$d0, $d0, $d0;
	cmp_lt_u64_s64	$d0, $d0, $d0;
	cmp_le_u64_s64	$d0, $d0, $d0;
	cmp_gt_u64_s64	$d0, $d0, $d0;
	cmp_ge_u64_s64	$d0, $d0, $d0;
	cmp_eq_u64_s64	$d0, -1, $d0;
	cmp_eq_u64_s64	$d0, WAVESIZE, $d0;
	cmp_eq_u64_s64	$d0, $d0, -1;
	cmp_eq_u64_s64	$d0, $d0, WAVESIZE;
	// 
	// Next sample
	// 
	cmp_eq_s32_s64	$s0, $d0, $d0;
	// 
	cmp_ne_s32_s64	$s0, $d0, $d0;
	cmp_lt_s32_s64	$s0, $d0, $d0;
	cmp_le_s32_s64	$s0, $d0, $d0;
	cmp_gt_s32_s64	$s0, $d0, $d0;
	cmp_ge_s32_s64	$s0, $d0, $d0;
	cmp_eq_s32_s64	$s0, -1, $d0;
	cmp_eq_s32_s64	$s0, WAVESIZE, $d0;
	cmp_eq_s32_s64	$s0, $d0, -1;
	cmp_eq_s32_s64	$s0, $d0, WAVESIZE;
	// 
	// Next sample
	// 
	cmp_eq_s64_s64	$d0, $d0, $d0;
	// 
	cmp_ne_s64_s64	$d0, $d0, $d0;
	cmp_lt_s64_s64	$d0, $d0, $d0;
	cmp_le_s64_s64	$d0, $d0, $d0;
	cmp_gt_s64_s64	$d0, $d0, $d0;
	cmp_ge_s64_s64	$d0, $d0, $d0;
	cmp_eq_s64_s64	$d0, -1, $d0;
	cmp_eq_s64_s64	$d0, WAVESIZE, $d0;
	cmp_eq_s64_s64	$d0, $d0, -1;
	cmp_eq_s64_s64	$d0, $d0, WAVESIZE;
	// 
	// Next sample
	// 
	cmp_eq_f16_s64	$s0, $d0, $d0;
	// 
	cmp_ne_f16_s64	$s0, $d0, $d0;
	cmp_lt_f16_s64	$s0, $d0, $d0;
	cmp_le_f16_s64	$s0, $d0, $d0;
	cmp_gt_f16_s64	$s0, $d0, $d0;
	cmp_ge_f16_s64	$s0, $d0, $d0;
	cmp_eq_f16_s64	$s0, -1, $d0;
	cmp_eq_f16_s64	$s0, WAVESIZE, $d0;
	cmp_eq_f16_s64	$s0, $d0, -1;
	cmp_eq_f16_s64	$s0, $d0, WAVESIZE;
	// 
	// Next sample
	// 
	cmp_eq_f32_s64	$s0, $d0, $d0;
	// 
	cmp_ne_f32_s64	$s0, $d0, $d0;
	cmp_lt_f32_s64	$s0, $d0, $d0;
	cmp_le_f32_s64	$s0, $d0, $d0;
	cmp_gt_f32_s64	$s0, $d0, $d0;
	cmp_ge_f32_s64	$s0, $d0, $d0;
	cmp_eq_f32_s64	$s0, -1, $d0;
	cmp_eq_f32_s64	$s0, WAVESIZE, $d0;
	cmp_eq_f32_s64	$s0, $d0, -1;
	cmp_eq_f32_s64	$s0, $d0, WAVESIZE;
	// 
	// Next sample
	// 
	cmp_eq_b1_s64	$c0, $d0, $d0;
	// 
	cmp_ne_b1_s64	$c0, $d0, $d0;
	cmp_lt_b1_s64	$c0, $d0, $d0;
	cmp_le_b1_s64	$c0, $d0, $d0;
	cmp_gt_b1_s64	$c0, $d0, $d0;
	cmp_ge_b1_s64	$c0, $d0, $d0;
	cmp_eq_b1_s64	$c0, -1, $d0;
	cmp_eq_b1_s64	$c0, WAVESIZE, $d0;
	cmp_eq_b1_s64	$c0, $d0, -1;
	cmp_eq_b1_s64	$c0, $d0, WAVESIZE;
	// 
	// Next sample
	// 
	cmp_eq_ftz_u32_f16	$s0, $s0, $s0;
	// 
	cmp_ne_ftz_u32_f16	$s0, $s0, $s0;
	cmp_lt_ftz_u32_f16	$s0, $s0, $s0;
	cmp_le_ftz_u32_f16	$s0, $s0, $s0;
	cmp_gt_ftz_u32_f16	$s0, $s0, $s0;
	cmp_ge_ftz_u32_f16	$s0, $s0, $s0;
	cmp_equ_ftz_u32_f16	$s0, $s0, $s0;
	cmp_neu_ftz_u32_f16	$s0, $s0, $s0;
	cmp_ltu_ftz_u32_f16	$s0, $s0, $s0;
	cmp_leu_ftz_u32_f16	$s0, $s0, $s0;
	cmp_gtu_ftz_u32_f16	$s0, $s0, $s0;
	cmp_geu_ftz_u32_f16	$s0, $s0, $s0;
	cmp_num_ftz_u32_f16	$s0, $s0, $s0;
	cmp_nan_ftz_u32_f16	$s0, $s0, $s0;
	cmp_seq_ftz_u32_f16	$s0, $s0, $s0;
	cmp_sne_ftz_u32_f16	$s0, $s0, $s0;
	cmp_slt_ftz_u32_f16	$s0, $s0, $s0;
	cmp_sle_ftz_u32_f16	$s0, $s0, $s0;
	cmp_sgt_ftz_u32_f16	$s0, $s0, $s0;
	cmp_sge_ftz_u32_f16	$s0, $s0, $s0;
	cmp_sgeu_ftz_u32_f16	$s0, $s0, $s0;
	cmp_sequ_ftz_u32_f16	$s0, $s0, $s0;
	cmp_sneu_ftz_u32_f16	$s0, $s0, $s0;
	cmp_sltu_ftz_u32_f16	$s0, $s0, $s0;
	cmp_sleu_ftz_u32_f16	$s0, $s0, $s0;
	cmp_snum_ftz_u32_f16	$s0, $s0, $s0;
	cmp_snan_ftz_u32_f16	$s0, $s0, $s0;
	cmp_sgtu_ftz_u32_f16	$s0, $s0, $s0;
	cmp_eq_ftz_u32_f16	$s0, 0Hffff, $s0;
	cmp_eq_ftz_u32_f16	$s0, $s0, 0Hffff;
	// 
	// Next sample
	// 
	cmp_eq_ftz_u64_f16	$d0, $s0, $s0;
	// 
	cmp_ne_ftz_u64_f16	$d0, $s0, $s0;
	cmp_lt_ftz_u64_f16	$d0, $s0, $s0;
	cmp_le_ftz_u64_f16	$d0, $s0, $s0;
	cmp_gt_ftz_u64_f16	$d0, $s0, $s0;
	cmp_ge_ftz_u64_f16	$d0, $s0, $s0;
	cmp_equ_ftz_u64_f16	$d0, $s0, $s0;
	cmp_neu_ftz_u64_f16	$d0, $s0, $s0;
	cmp_ltu_ftz_u64_f16	$d0, $s0, $s0;
	cmp_leu_ftz_u64_f16	$d0, $s0, $s0;
	cmp_gtu_ftz_u64_f16	$d0, $s0, $s0;
	cmp_geu_ftz_u64_f16	$d0, $s0, $s0;
	cmp_num_ftz_u64_f16	$d0, $s0, $s0;
	cmp_nan_ftz_u64_f16	$d0, $s0, $s0;
	cmp_seq_ftz_u64_f16	$d0, $s0, $s0;
	cmp_sne_ftz_u64_f16	$d0, $s0, $s0;
	cmp_slt_ftz_u64_f16	$d0, $s0, $s0;
	cmp_sle_ftz_u64_f16	$d0, $s0, $s0;
	cmp_sgt_ftz_u64_f16	$d0, $s0, $s0;
	cmp_sge_ftz_u64_f16	$d0, $s0, $s0;
	cmp_sgeu_ftz_u64_f16	$d0, $s0, $s0;
	cmp_sequ_ftz_u64_f16	$d0, $s0, $s0;
	cmp_sneu_ftz_u64_f16	$d0, $s0, $s0;
	cmp_sltu_ftz_u64_f16	$d0, $s0, $s0;
	cmp_sleu_ftz_u64_f16	$d0, $s0, $s0;
	cmp_snum_ftz_u64_f16	$d0, $s0, $s0;
	cmp_snan_ftz_u64_f16	$d0, $s0, $s0;
	cmp_sgtu_ftz_u64_f16	$d0, $s0, $s0;
	cmp_eq_ftz_u64_f16	$d0, 0Hffff, $s0;
	cmp_eq_ftz_u64_f16	$d0, $s0, 0Hffff;
	// 
	// Next sample
	// 
	cmp_eq_ftz_s32_f16	$s0, $s0, $s0;
	// 
	cmp_ne_ftz_s32_f16	$s0, $s0, $s0;
	cmp_lt_ftz_s32_f16	$s0, $s0, $s0;
	cmp_le_ftz_s32_f16	$s0, $s0, $s0;
	cmp_gt_ftz_s32_f16	$s0, $s0, $s0;
	cmp_ge_ftz_s32_f16	$s0, $s0, $s0;
	cmp_equ_ftz_s32_f16	$s0, $s0, $s0;
	cmp_neu_ftz_s32_f16	$s0, $s0, $s0;
	cmp_ltu_ftz_s32_f16	$s0, $s0, $s0;
	cmp_leu_ftz_s32_f16	$s0, $s0, $s0;
	cmp_gtu_ftz_s32_f16	$s0, $s0, $s0;
	cmp_geu_ftz_s32_f16	$s0, $s0, $s0;
	cmp_num_ftz_s32_f16	$s0, $s0, $s0;
	cmp_nan_ftz_s32_f16	$s0, $s0, $s0;
	cmp_seq_ftz_s32_f16	$s0, $s0, $s0;
	cmp_sne_ftz_s32_f16	$s0, $s0, $s0;
	cmp_slt_ftz_s32_f16	$s0, $s0, $s0;
	cmp_sle_ftz_s32_f16	$s0, $s0, $s0;
	cmp_sgt_ftz_s32_f16	$s0, $s0, $s0;
	cmp_sge_ftz_s32_f16	$s0, $s0, $s0;
	cmp_sgeu_ftz_s32_f16	$s0, $s0, $s0;
	cmp_sequ_ftz_s32_f16	$s0, $s0, $s0;
	cmp_sneu_ftz_s32_f16	$s0, $s0, $s0;
	cmp_sltu_ftz_s32_f16	$s0, $s0, $s0;
	cmp_sleu_ftz_s32_f16	$s0, $s0, $s0;
	cmp_snum_ftz_s32_f16	$s0, $s0, $s0;
	cmp_snan_ftz_s32_f16	$s0, $s0, $s0;
	cmp_sgtu_ftz_s32_f16	$s0, $s0, $s0;
	cmp_eq_ftz_s32_f16	$s0, 0Hffff, $s0;
	cmp_eq_ftz_s32_f16	$s0, $s0, 0Hffff;
	// 
	// Next sample
	// 
	cmp_eq_ftz_s64_f16	$d0, $s0, $s0;
	// 
	cmp_ne_ftz_s64_f16	$d0, $s0, $s0;
	cmp_lt_ftz_s64_f16	$d0, $s0, $s0;
	cmp_le_ftz_s64_f16	$d0, $s0, $s0;
	cmp_gt_ftz_s64_f16	$d0, $s0, $s0;
	cmp_ge_ftz_s64_f16	$d0, $s0, $s0;
	cmp_equ_ftz_s64_f16	$d0, $s0, $s0;
	cmp_neu_ftz_s64_f16	$d0, $s0, $s0;
	cmp_ltu_ftz_s64_f16	$d0, $s0, $s0;
	cmp_leu_ftz_s64_f16	$d0, $s0, $s0;
	cmp_gtu_ftz_s64_f16	$d0, $s0, $s0;
	cmp_geu_ftz_s64_f16	$d0, $s0, $s0;
	cmp_num_ftz_s64_f16	$d0, $s0, $s0;
	cmp_nan_ftz_s64_f16	$d0, $s0, $s0;
	cmp_seq_ftz_s64_f16	$d0, $s0, $s0;
	cmp_sne_ftz_s64_f16	$d0, $s0, $s0;
	cmp_slt_ftz_s64_f16	$d0, $s0, $s0;
	cmp_sle_ftz_s64_f16	$d0, $s0, $s0;
	cmp_sgt_ftz_s64_f16	$d0, $s0, $s0;
	cmp_sge_ftz_s64_f16	$d0, $s0, $s0;
	cmp_sgeu_ftz_s64_f16	$d0, $s0, $s0;
	cmp_sequ_ftz_s64_f16	$d0, $s0, $s0;
	cmp_sneu_ftz_s64_f16	$d0, $s0, $s0;
	cmp_sltu_ftz_s64_f16	$d0, $s0, $s0;
	cmp_sleu_ftz_s64_f16	$d0, $s0, $s0;
	cmp_snum_ftz_s64_f16	$d0, $s0, $s0;
	cmp_snan_ftz_s64_f16	$d0, $s0, $s0;
	cmp_sgtu_ftz_s64_f16	$d0, $s0, $s0;
	cmp_eq_ftz_s64_f16	$d0, 0Hffff, $s0;
	cmp_eq_ftz_s64_f16	$d0, $s0, 0Hffff;
	// 
	// Next sample
	// 
	cmp_eq_ftz_f16_f16	$s0, $s0, $s0;
	// 
	cmp_ne_ftz_f16_f16	$s0, $s0, $s0;
	cmp_lt_ftz_f16_f16	$s0, $s0, $s0;
	cmp_le_ftz_f16_f16	$s0, $s0, $s0;
	cmp_gt_ftz_f16_f16	$s0, $s0, $s0;
	cmp_ge_ftz_f16_f16	$s0, $s0, $s0;
	cmp_equ_ftz_f16_f16	$s0, $s0, $s0;
	cmp_neu_ftz_f16_f16	$s0, $s0, $s0;
	cmp_ltu_ftz_f16_f16	$s0, $s0, $s0;
	cmp_leu_ftz_f16_f16	$s0, $s0, $s0;
	cmp_gtu_ftz_f16_f16	$s0, $s0, $s0;
	cmp_geu_ftz_f16_f16	$s0, $s0, $s0;
	cmp_num_ftz_f16_f16	$s0, $s0, $s0;
	cmp_nan_ftz_f16_f16	$s0, $s0, $s0;
	cmp_seq_ftz_f16_f16	$s0, $s0, $s0;
	cmp_sne_ftz_f16_f16	$s0, $s0, $s0;
	cmp_slt_ftz_f16_f16	$s0, $s0, $s0;
	cmp_sle_ftz_f16_f16	$s0, $s0, $s0;
	cmp_sgt_ftz_f16_f16	$s0, $s0, $s0;
	cmp_sge_ftz_f16_f16	$s0, $s0, $s0;
	cmp_sgeu_ftz_f16_f16	$s0, $s0, $s0;
	cmp_sequ_ftz_f16_f16	$s0, $s0, $s0;
	cmp_sneu_ftz_f16_f16	$s0, $s0, $s0;
	cmp_sltu_ftz_f16_f16	$s0, $s0, $s0;
	cmp_sleu_ftz_f16_f16	$s0, $s0, $s0;
	cmp_snum_ftz_f16_f16	$s0, $s0, $s0;
	cmp_snan_ftz_f16_f16	$s0, $s0, $s0;
	cmp_sgtu_ftz_f16_f16	$s0, $s0, $s0;
	cmp_eq_ftz_f16_f16	$s0, 0Hffff, $s0;
	cmp_eq_ftz_f16_f16	$s0, $s0, 0Hffff;
	// 
	// Next sample
	// 
	cmp_eq_ftz_f32_f16	$s0, $s0, $s0;
	// 
	cmp_ne_ftz_f32_f16	$s0, $s0, $s0;
	cmp_lt_ftz_f32_f16	$s0, $s0, $s0;
	cmp_le_ftz_f32_f16	$s0, $s0, $s0;
	cmp_gt_ftz_f32_f16	$s0, $s0, $s0;
	cmp_ge_ftz_f32_f16	$s0, $s0, $s0;
	cmp_equ_ftz_f32_f16	$s0, $s0, $s0;
	cmp_neu_ftz_f32_f16	$s0, $s0, $s0;
	cmp_ltu_ftz_f32_f16	$s0, $s0, $s0;
	cmp_leu_ftz_f32_f16	$s0, $s0, $s0;
	cmp_gtu_ftz_f32_f16	$s0, $s0, $s0;
	cmp_geu_ftz_f32_f16	$s0, $s0, $s0;
	cmp_num_ftz_f32_f16	$s0, $s0, $s0;
	cmp_nan_ftz_f32_f16	$s0, $s0, $s0;
	cmp_seq_ftz_f32_f16	$s0, $s0, $s0;
	cmp_sne_ftz_f32_f16	$s0, $s0, $s0;
	cmp_slt_ftz_f32_f16	$s0, $s0, $s0;
	cmp_sle_ftz_f32_f16	$s0, $s0, $s0;
	cmp_sgt_ftz_f32_f16	$s0, $s0, $s0;
	cmp_sge_ftz_f32_f16	$s0, $s0, $s0;
	cmp_sgeu_ftz_f32_f16	$s0, $s0, $s0;
	cmp_sequ_ftz_f32_f16	$s0, $s0, $s0;
	cmp_sneu_ftz_f32_f16	$s0, $s0, $s0;
	cmp_sltu_ftz_f32_f16	$s0, $s0, $s0;
	cmp_sleu_ftz_f32_f16	$s0, $s0, $s0;
	cmp_snum_ftz_f32_f16	$s0, $s0, $s0;
	cmp_snan_ftz_f32_f16	$s0, $s0, $s0;
	cmp_sgtu_ftz_f32_f16	$s0, $s0, $s0;
	cmp_eq_ftz_f32_f16	$s0, 0Hffff, $s0;
	cmp_eq_ftz_f32_f16	$s0, $s0, 0Hffff;
	// 
	// Next sample
	// 
	cmp_eq_ftz_b1_f16	$c0, $s0, $s0;
	// 
	cmp_ne_ftz_b1_f16	$c0, $s0, $s0;
	cmp_lt_ftz_b1_f16	$c0, $s0, $s0;
	cmp_le_ftz_b1_f16	$c0, $s0, $s0;
	cmp_gt_ftz_b1_f16	$c0, $s0, $s0;
	cmp_ge_ftz_b1_f16	$c0, $s0, $s0;
	cmp_equ_ftz_b1_f16	$c0, $s0, $s0;
	cmp_neu_ftz_b1_f16	$c0, $s0, $s0;
	cmp_ltu_ftz_b1_f16	$c0, $s0, $s0;
	cmp_leu_ftz_b1_f16	$c0, $s0, $s0;
	cmp_gtu_ftz_b1_f16	$c0, $s0, $s0;
	cmp_geu_ftz_b1_f16	$c0, $s0, $s0;
	cmp_num_ftz_b1_f16	$c0, $s0, $s0;
	cmp_nan_ftz_b1_f16	$c0, $s0, $s0;
	cmp_seq_ftz_b1_f16	$c0, $s0, $s0;
	cmp_sne_ftz_b1_f16	$c0, $s0, $s0;
	cmp_slt_ftz_b1_f16	$c0, $s0, $s0;
	cmp_sle_ftz_b1_f16	$c0, $s0, $s0;
	cmp_sgt_ftz_b1_f16	$c0, $s0, $s0;
	cmp_sge_ftz_b1_f16	$c0, $s0, $s0;
	cmp_sgeu_ftz_b1_f16	$c0, $s0, $s0;
	cmp_sequ_ftz_b1_f16	$c0, $s0, $s0;
	cmp_sneu_ftz_b1_f16	$c0, $s0, $s0;
	cmp_sltu_ftz_b1_f16	$c0, $s0, $s0;
	cmp_sleu_ftz_b1_f16	$c0, $s0, $s0;
	cmp_snum_ftz_b1_f16	$c0, $s0, $s0;
	cmp_snan_ftz_b1_f16	$c0, $s0, $s0;
	cmp_sgtu_ftz_b1_f16	$c0, $s0, $s0;
	cmp_eq_ftz_b1_f16	$c0, 0Hffff, $s0;
	cmp_eq_ftz_b1_f16	$c0, $s0, 0Hffff;
	// 
	// Next sample
	// 
	cmp_eq_ftz_u32_f32	$s0, $s0, $s0;
	// 
	cmp_ne_ftz_u32_f32	$s0, $s0, $s0;
	cmp_lt_ftz_u32_f32	$s0, $s0, $s0;
	cmp_le_ftz_u32_f32	$s0, $s0, $s0;
	cmp_gt_ftz_u32_f32	$s0, $s0, $s0;
	cmp_ge_ftz_u32_f32	$s0, $s0, $s0;
	cmp_equ_ftz_u32_f32	$s0, $s0, $s0;
	cmp_neu_ftz_u32_f32	$s0, $s0, $s0;
	cmp_ltu_ftz_u32_f32	$s0, $s0, $s0;
	cmp_leu_ftz_u32_f32	$s0, $s0, $s0;
	cmp_gtu_ftz_u32_f32	$s0, $s0, $s0;
	cmp_geu_ftz_u32_f32	$s0, $s0, $s0;
	cmp_num_ftz_u32_f32	$s0, $s0, $s0;
	cmp_nan_ftz_u32_f32	$s0, $s0, $s0;
	cmp_seq_ftz_u32_f32	$s0, $s0, $s0;
	cmp_sne_ftz_u32_f32	$s0, $s0, $s0;
	cmp_slt_ftz_u32_f32	$s0, $s0, $s0;
	cmp_sle_ftz_u32_f32	$s0, $s0, $s0;
	cmp_sgt_ftz_u32_f32	$s0, $s0, $s0;
	cmp_sge_ftz_u32_f32	$s0, $s0, $s0;
	cmp_sgeu_ftz_u32_f32	$s0, $s0, $s0;
	cmp_sequ_ftz_u32_f32	$s0, $s0, $s0;
	cmp_sneu_ftz_u32_f32	$s0, $s0, $s0;
	cmp_sltu_ftz_u32_f32	$s0, $s0, $s0;
	cmp_sleu_ftz_u32_f32	$s0, $s0, $s0;
	cmp_snum_ftz_u32_f32	$s0, $s0, $s0;
	cmp_snan_ftz_u32_f32	$s0, $s0, $s0;
	cmp_sgtu_ftz_u32_f32	$s0, $s0, $s0;
	cmp_eq_ftz_u32_f32	$s0, 0Fffffffff, $s0;
	cmp_eq_ftz_u32_f32	$s0, $s0, 0Fffffffff;
	// 
	// Next sample
	// 
	cmp_eq_ftz_u64_f32	$d0, $s0, $s0;
	// 
	cmp_ne_ftz_u64_f32	$d0, $s0, $s0;
	cmp_lt_ftz_u64_f32	$d0, $s0, $s0;
	cmp_le_ftz_u64_f32	$d0, $s0, $s0;
	cmp_gt_ftz_u64_f32	$d0, $s0, $s0;
	cmp_ge_ftz_u64_f32	$d0, $s0, $s0;
	cmp_equ_ftz_u64_f32	$d0, $s0, $s0;
	cmp_neu_ftz_u64_f32	$d0, $s0, $s0;
	cmp_ltu_ftz_u64_f32	$d0, $s0, $s0;
	cmp_leu_ftz_u64_f32	$d0, $s0, $s0;
	cmp_gtu_ftz_u64_f32	$d0, $s0, $s0;
	cmp_geu_ftz_u64_f32	$d0, $s0, $s0;
	cmp_num_ftz_u64_f32	$d0, $s0, $s0;
	cmp_nan_ftz_u64_f32	$d0, $s0, $s0;
	cmp_seq_ftz_u64_f32	$d0, $s0, $s0;
	cmp_sne_ftz_u64_f32	$d0, $s0, $s0;
	cmp_slt_ftz_u64_f32	$d0, $s0, $s0;
	cmp_sle_ftz_u64_f32	$d0, $s0, $s0;
	cmp_sgt_ftz_u64_f32	$d0, $s0, $s0;
	cmp_sge_ftz_u64_f32	$d0, $s0, $s0;
	cmp_sgeu_ftz_u64_f32	$d0, $s0, $s0;
	cmp_sequ_ftz_u64_f32	$d0, $s0, $s0;
	cmp_sneu_ftz_u64_f32	$d0, $s0, $s0;
	cmp_sltu_ftz_u64_f32	$d0, $s0, $s0;
	cmp_sleu_ftz_u64_f32	$d0, $s0, $s0;
	cmp_snum_ftz_u64_f32	$d0, $s0, $s0;
	cmp_snan_ftz_u64_f32	$d0, $s0, $s0;
	cmp_sgtu_ftz_u64_f32	$d0, $s0, $s0;
	cmp_eq_ftz_u64_f32	$d0, 0Fffffffff, $s0;
	cmp_eq_ftz_u64_f32	$d0, $s0, 0Fffffffff;
	// 
	// Next sample
	// 
	cmp_eq_ftz_s32_f32	$s0, $s0, $s0;
	// 
	cmp_ne_ftz_s32_f32	$s0, $s0, $s0;
	cmp_lt_ftz_s32_f32	$s0, $s0, $s0;
	cmp_le_ftz_s32_f32	$s0, $s0, $s0;
	cmp_gt_ftz_s32_f32	$s0, $s0, $s0;
	cmp_ge_ftz_s32_f32	$s0, $s0, $s0;
	cmp_equ_ftz_s32_f32	$s0, $s0, $s0;
	cmp_neu_ftz_s32_f32	$s0, $s0, $s0;
	cmp_ltu_ftz_s32_f32	$s0, $s0, $s0;
	cmp_leu_ftz_s32_f32	$s0, $s0, $s0;
	cmp_gtu_ftz_s32_f32	$s0, $s0, $s0;
	cmp_geu_ftz_s32_f32	$s0, $s0, $s0;
	cmp_num_ftz_s32_f32	$s0, $s0, $s0;
	cmp_nan_ftz_s32_f32	$s0, $s0, $s0;
	cmp_seq_ftz_s32_f32	$s0, $s0, $s0;
	cmp_sne_ftz_s32_f32	$s0, $s0, $s0;
	cmp_slt_ftz_s32_f32	$s0, $s0, $s0;
	cmp_sle_ftz_s32_f32	$s0, $s0, $s0;
	cmp_sgt_ftz_s32_f32	$s0, $s0, $s0;
	cmp_sge_ftz_s32_f32	$s0, $s0, $s0;
	cmp_sgeu_ftz_s32_f32	$s0, $s0, $s0;
	cmp_sequ_ftz_s32_f32	$s0, $s0, $s0;
	cmp_sneu_ftz_s32_f32	$s0, $s0, $s0;
	cmp_sltu_ftz_s32_f32	$s0, $s0, $s0;
	cmp_sleu_ftz_s32_f32	$s0, $s0, $s0;
	cmp_snum_ftz_s32_f32	$s0, $s0, $s0;
	cmp_snan_ftz_s32_f32	$s0, $s0, $s0;
	cmp_sgtu_ftz_s32_f32	$s0, $s0, $s0;
	cmp_eq_ftz_s32_f32	$s0, 0Fffffffff, $s0;
	cmp_eq_ftz_s32_f32	$s0, $s0, 0Fffffffff;
	// 
	// Next sample
	// 
	cmp_eq_ftz_s64_f32	$d0, $s0, $s0;
	// 
	cmp_ne_ftz_s64_f32	$d0, $s0, $s0;
	cmp_lt_ftz_s64_f32	$d0, $s0, $s0;
	cmp_le_ftz_s64_f32	$d0, $s0, $s0;
	cmp_gt_ftz_s64_f32	$d0, $s0, $s0;
	cmp_ge_ftz_s64_f32	$d0, $s0, $s0;
	cmp_equ_ftz_s64_f32	$d0, $s0, $s0;
	cmp_neu_ftz_s64_f32	$d0, $s0, $s0;
	cmp_ltu_ftz_s64_f32	$d0, $s0, $s0;
	cmp_leu_ftz_s64_f32	$d0, $s0, $s0;
	cmp_gtu_ftz_s64_f32	$d0, $s0, $s0;
	cmp_geu_ftz_s64_f32	$d0, $s0, $s0;
	cmp_num_ftz_s64_f32	$d0, $s0, $s0;
	cmp_nan_ftz_s64_f32	$d0, $s0, $s0;
	cmp_seq_ftz_s64_f32	$d0, $s0, $s0;
	cmp_sne_ftz_s64_f32	$d0, $s0, $s0;
	cmp_slt_ftz_s64_f32	$d0, $s0, $s0;
	cmp_sle_ftz_s64_f32	$d0, $s0, $s0;
	cmp_sgt_ftz_s64_f32	$d0, $s0, $s0;
	cmp_sge_ftz_s64_f32	$d0, $s0, $s0;
	cmp_sgeu_ftz_s64_f32	$d0, $s0, $s0;
	cmp_sequ_ftz_s64_f32	$d0, $s0, $s0;
	cmp_sneu_ftz_s64_f32	$d0, $s0, $s0;
	cmp_sltu_ftz_s64_f32	$d0, $s0, $s0;
	cmp_sleu_ftz_s64_f32	$d0, $s0, $s0;
	cmp_snum_ftz_s64_f32	$d0, $s0, $s0;
	cmp_snan_ftz_s64_f32	$d0, $s0, $s0;
	cmp_sgtu_ftz_s64_f32	$d0, $s0, $s0;
	cmp_eq_ftz_s64_f32	$d0, 0Fffffffff, $s0;
	cmp_eq_ftz_s64_f32	$d0, $s0, 0Fffffffff;
	// 
	// Next sample
	// 
	cmp_eq_ftz_f16_f32	$s0, $s0, $s0;
	// 
	cmp_ne_ftz_f16_f32	$s0, $s0, $s0;
	cmp_lt_ftz_f16_f32	$s0, $s0, $s0;
	cmp_le_ftz_f16_f32	$s0, $s0, $s0;
	cmp_gt_ftz_f16_f32	$s0, $s0, $s0;
	cmp_ge_ftz_f16_f32	$s0, $s0, $s0;
	cmp_equ_ftz_f16_f32	$s0, $s0, $s0;
	cmp_neu_ftz_f16_f32	$s0, $s0, $s0;
	cmp_ltu_ftz_f16_f32	$s0, $s0, $s0;
	cmp_leu_ftz_f16_f32	$s0, $s0, $s0;
	cmp_gtu_ftz_f16_f32	$s0, $s0, $s0;
	cmp_geu_ftz_f16_f32	$s0, $s0, $s0;
	cmp_num_ftz_f16_f32	$s0, $s0, $s0;
	cmp_nan_ftz_f16_f32	$s0, $s0, $s0;
	cmp_seq_ftz_f16_f32	$s0, $s0, $s0;
	cmp_sne_ftz_f16_f32	$s0, $s0, $s0;
	cmp_slt_ftz_f16_f32	$s0, $s0, $s0;
	cmp_sle_ftz_f16_f32	$s0, $s0, $s0;
	cmp_sgt_ftz_f16_f32	$s0, $s0, $s0;
	cmp_sge_ftz_f16_f32	$s0, $s0, $s0;
	cmp_sgeu_ftz_f16_f32	$s0, $s0, $s0;
	cmp_sequ_ftz_f16_f32	$s0, $s0, $s0;
	cmp_sneu_ftz_f16_f32	$s0, $s0, $s0;
	cmp_sltu_ftz_f16_f32	$s0, $s0, $s0;
	cmp_sleu_ftz_f16_f32	$s0, $s0, $s0;
	cmp_snum_ftz_f16_f32	$s0, $s0, $s0;
	cmp_snan_ftz_f16_f32	$s0, $s0, $s0;
	cmp_sgtu_ftz_f16_f32	$s0, $s0, $s0;
	cmp_eq_ftz_f16_f32	$s0, 0Fffffffff, $s0;
	cmp_eq_ftz_f16_f32	$s0, $s0, 0Fffffffff;
	// 
	// Next sample
	// 
	cmp_eq_ftz_f32_f32	$s0, $s0, $s0;
	// 
	cmp_ne_ftz_f32_f32	$s0, $s0, $s0;
	cmp_lt_ftz_f32_f32	$s0, $s0, $s0;
	cmp_le_ftz_f32_f32	$s0, $s0, $s0;
	cmp_gt_ftz_f32_f32	$s0, $s0, $s0;
	cmp_ge_ftz_f32_f32	$s0, $s0, $s0;
	cmp_equ_ftz_f32_f32	$s0, $s0, $s0;
	cmp_neu_ftz_f32_f32	$s0, $s0, $s0;
	cmp_ltu_ftz_f32_f32	$s0, $s0, $s0;
	cmp_leu_ftz_f32_f32	$s0, $s0, $s0;
	cmp_gtu_ftz_f32_f32	$s0, $s0, $s0;
	cmp_geu_ftz_f32_f32	$s0, $s0, $s0;
	cmp_num_ftz_f32_f32	$s0, $s0, $s0;
	cmp_nan_ftz_f32_f32	$s0, $s0, $s0;
	cmp_seq_ftz_f32_f32	$s0, $s0, $s0;
	cmp_sne_ftz_f32_f32	$s0, $s0, $s0;
	cmp_slt_ftz_f32_f32	$s0, $s0, $s0;
	cmp_sle_ftz_f32_f32	$s0, $s0, $s0;
	cmp_sgt_ftz_f32_f32	$s0, $s0, $s0;
	cmp_sge_ftz_f32_f32	$s0, $s0, $s0;
	cmp_sgeu_ftz_f32_f32	$s0, $s0, $s0;
	cmp_sequ_ftz_f32_f32	$s0, $s0, $s0;
	cmp_sneu_ftz_f32_f32	$s0, $s0, $s0;
	cmp_sltu_ftz_f32_f32	$s0, $s0, $s0;
	cmp_sleu_ftz_f32_f32	$s0, $s0, $s0;
	cmp_snum_ftz_f32_f32	$s0, $s0, $s0;
	cmp_snan_ftz_f32_f32	$s0, $s0, $s0;
	cmp_sgtu_ftz_f32_f32	$s0, $s0, $s0;
	cmp_eq_ftz_f32_f32	$s0, 0Fffffffff, $s0;
	cmp_eq_ftz_f32_f32	$s0, $s0, 0Fffffffff;
	// 
	// Next sample
	// 
	cmp_eq_ftz_b1_f32	$c0, $s0, $s0;
	// 
	cmp_ne_ftz_b1_f32	$c0, $s0, $s0;
	cmp_lt_ftz_b1_f32	$c0, $s0, $s0;
	cmp_le_ftz_b1_f32	$c0, $s0, $s0;
	cmp_gt_ftz_b1_f32	$c0, $s0, $s0;
	cmp_ge_ftz_b1_f32	$c0, $s0, $s0;
	cmp_equ_ftz_b1_f32	$c0, $s0, $s0;
	cmp_neu_ftz_b1_f32	$c0, $s0, $s0;
	cmp_ltu_ftz_b1_f32	$c0, $s0, $s0;
	cmp_leu_ftz_b1_f32	$c0, $s0, $s0;
	cmp_gtu_ftz_b1_f32	$c0, $s0, $s0;
	cmp_geu_ftz_b1_f32	$c0, $s0, $s0;
	cmp_num_ftz_b1_f32	$c0, $s0, $s0;
	cmp_nan_ftz_b1_f32	$c0, $s0, $s0;
	cmp_seq_ftz_b1_f32	$c0, $s0, $s0;
	cmp_sne_ftz_b1_f32	$c0, $s0, $s0;
	cmp_slt_ftz_b1_f32	$c0, $s0, $s0;
	cmp_sle_ftz_b1_f32	$c0, $s0, $s0;
	cmp_sgt_ftz_b1_f32	$c0, $s0, $s0;
	cmp_sge_ftz_b1_f32	$c0, $s0, $s0;
	cmp_sgeu_ftz_b1_f32	$c0, $s0, $s0;
	cmp_sequ_ftz_b1_f32	$c0, $s0, $s0;
	cmp_sneu_ftz_b1_f32	$c0, $s0, $s0;
	cmp_sltu_ftz_b1_f32	$c0, $s0, $s0;
	cmp_sleu_ftz_b1_f32	$c0, $s0, $s0;
	cmp_snum_ftz_b1_f32	$c0, $s0, $s0;
	cmp_snan_ftz_b1_f32	$c0, $s0, $s0;
	cmp_sgtu_ftz_b1_f32	$c0, $s0, $s0;
	cmp_eq_ftz_b1_f32	$c0, 0Fffffffff, $s0;
	cmp_eq_ftz_b1_f32	$c0, $s0, 0Fffffffff;
	// 
	// Next sample
	// 
	cmp_eq_u32_b1	$s0, $c0, $c0;
	// 
	cmp_ne_u32_b1	$s0, $c0, $c0;
	cmp_eq_u32_b1	$s0, 1, $c0;
	cmp_eq_u32_b1	$s0, WAVESIZE, $c0;
	cmp_eq_u32_b1	$s0, $c0, 1;
	cmp_eq_u32_b1	$s0, $c0, WAVESIZE;
	// 
	// Next sample
	// 
	cmp_eq_u64_b1	$d0, $c0, $c0;
	// 
	cmp_ne_u64_b1	$d0, $c0, $c0;
	cmp_eq_u64_b1	$d0, 1, $c0;
	cmp_eq_u64_b1	$d0, WAVESIZE, $c0;
	cmp_eq_u64_b1	$d0, $c0, 1;
	cmp_eq_u64_b1	$d0, $c0, WAVESIZE;
	// 
	// Next sample
	// 
	cmp_eq_s32_b1	$s0, $c0, $c0;
	// 
	cmp_ne_s32_b1	$s0, $c0, $c0;
	cmp_eq_s32_b1	$s0, 1, $c0;
	cmp_eq_s32_b1	$s0, WAVESIZE, $c0;
	cmp_eq_s32_b1	$s0, $c0, 1;
	cmp_eq_s32_b1	$s0, $c0, WAVESIZE;
	// 
	// Next sample
	// 
	cmp_eq_s64_b1	$d0, $c0, $c0;
	// 
	cmp_ne_s64_b1	$d0, $c0, $c0;
	cmp_eq_s64_b1	$d0, 1, $c0;
	cmp_eq_s64_b1	$d0, WAVESIZE, $c0;
	cmp_eq_s64_b1	$d0, $c0, 1;
	cmp_eq_s64_b1	$d0, $c0, WAVESIZE;
	// 
	// Next sample
	// 
	cmp_eq_f16_b1	$s0, $c0, $c0;
	// 
	cmp_ne_f16_b1	$s0, $c0, $c0;
	cmp_eq_f16_b1	$s0, 1, $c0;
	cmp_eq_f16_b1	$s0, WAVESIZE, $c0;
	cmp_eq_f16_b1	$s0, $c0, 1;
	cmp_eq_f16_b1	$s0, $c0, WAVESIZE;
	// 
	// Next sample
	// 
	cmp_eq_f32_b1	$s0, $c0, $c0;
	// 
	cmp_ne_f32_b1	$s0, $c0, $c0;
	cmp_eq_f32_b1	$s0, 1, $c0;
	cmp_eq_f32_b1	$s0, WAVESIZE, $c0;
	cmp_eq_f32_b1	$s0, $c0, 1;
	cmp_eq_f32_b1	$s0, $c0, WAVESIZE;
	// 
	// Next sample
	// 
	cmp_eq_b1_b1	$c0, $c0, $c0;
	// 
	cmp_ne_b1_b1	$c0, $c0, $c0;
	cmp_eq_b1_b1	$c0, 1, $c0;
	cmp_eq_b1_b1	$c0, WAVESIZE, $c0;
	cmp_eq_b1_b1	$c0, $c0, 1;
	cmp_eq_b1_b1	$c0, $c0, WAVESIZE;
	// 
	// Next sample
	// 
	cmp_eq_u32_b32	$s0, $s0, $s0;
	// 
	cmp_ne_u32_b32	$s0, $s0, $s0;
	cmp_eq_u32_b32	$s0, -1, $s0;
	cmp_eq_u32_b32	$s0, WAVESIZE, $s0;
	cmp_eq_u32_b32	$s0, $s0, -1;
	cmp_eq_u32_b32	$s0, $s0, WAVESIZE;
	// 
	// Next sample
	// 
	cmp_eq_u64_b32	$d0, $s0, $s0;
	// 
	cmp_ne_u64_b32	$d0, $s0, $s0;
	cmp_eq_u64_b32	$d0, -1, $s0;
	cmp_eq_u64_b32	$d0, WAVESIZE, $s0;
	cmp_eq_u64_b32	$d0, $s0, -1;
	cmp_eq_u64_b32	$d0, $s0, WAVESIZE;
	// 
	// Next sample
	// 
	cmp_eq_s32_b32	$s0, $s0, $s0;
	// 
	cmp_ne_s32_b32	$s0, $s0, $s0;
	cmp_eq_s32_b32	$s0, -1, $s0;
	cmp_eq_s32_b32	$s0, WAVESIZE, $s0;
	cmp_eq_s32_b32	$s0, $s0, -1;
	cmp_eq_s32_b32	$s0, $s0, WAVESIZE;
	// 
	// Next sample
	// 
	cmp_eq_s64_b32	$d0, $s0, $s0;
	// 
	cmp_ne_s64_b32	$d0, $s0, $s0;
	cmp_eq_s64_b32	$d0, -1, $s0;
	cmp_eq_s64_b32	$d0, WAVESIZE, $s0;
	cmp_eq_s64_b32	$d0, $s0, -1;
	cmp_eq_s64_b32	$d0, $s0, WAVESIZE;
	// 
	// Next sample
	// 
	cmp_eq_f16_b32	$s0, $s0, $s0;
	// 
	cmp_ne_f16_b32	$s0, $s0, $s0;
	cmp_eq_f16_b32	$s0, -1, $s0;
	cmp_eq_f16_b32	$s0, WAVESIZE, $s0;
	cmp_eq_f16_b32	$s0, $s0, -1;
	cmp_eq_f16_b32	$s0, $s0, WAVESIZE;
	// 
	// Next sample
	// 
	cmp_eq_f32_b32	$s0, $s0, $s0;
	// 
	cmp_ne_f32_b32	$s0, $s0, $s0;
	cmp_eq_f32_b32	$s0, -1, $s0;
	cmp_eq_f32_b32	$s0, WAVESIZE, $s0;
	cmp_eq_f32_b32	$s0, $s0, -1;
	cmp_eq_f32_b32	$s0, $s0, WAVESIZE;
	// 
	// Next sample
	// 
	cmp_eq_b1_b32	$c0, $s0, $s0;
	// 
	cmp_ne_b1_b32	$c0, $s0, $s0;
	cmp_eq_b1_b32	$c0, -1, $s0;
	cmp_eq_b1_b32	$c0, WAVESIZE, $s0;
	cmp_eq_b1_b32	$c0, $s0, -1;
	cmp_eq_b1_b32	$c0, $s0, WAVESIZE;
	// 
	// Next sample
	// 
	cmp_eq_u32_b64	$s0, $d0, $d0;
	// 
	cmp_ne_u32_b64	$s0, $d0, $d0;
	cmp_eq_u32_b64	$s0, -1, $d0;
	cmp_eq_u32_b64	$s0, WAVESIZE, $d0;
	cmp_eq_u32_b64	$s0, $d0, -1;
	cmp_eq_u32_b64	$s0, $d0, WAVESIZE;
	// 
	// Next sample
	// 
	cmp_eq_u64_b64	$d0, $d0, $d0;
	// 
	cmp_ne_u64_b64	$d0, $d0, $d0;
	cmp_eq_u64_b64	$d0, -1, $d0;
	cmp_eq_u64_b64	$d0, WAVESIZE, $d0;
	cmp_eq_u64_b64	$d0, $d0, -1;
	cmp_eq_u64_b64	$d0, $d0, WAVESIZE;
	// 
	// Next sample
	// 
	cmp_eq_s32_b64	$s0, $d0, $d0;
	// 
	cmp_ne_s32_b64	$s0, $d0, $d0;
	cmp_eq_s32_b64	$s0, -1, $d0;
	cmp_eq_s32_b64	$s0, WAVESIZE, $d0;
	cmp_eq_s32_b64	$s0, $d0, -1;
	cmp_eq_s32_b64	$s0, $d0, WAVESIZE;
	// 
	// Next sample
	// 
	cmp_eq_s64_b64	$d0, $d0, $d0;
	// 
	cmp_ne_s64_b64	$d0, $d0, $d0;
	cmp_eq_s64_b64	$d0, -1, $d0;
	cmp_eq_s64_b64	$d0, WAVESIZE, $d0;
	cmp_eq_s64_b64	$d0, $d0, -1;
	cmp_eq_s64_b64	$d0, $d0, WAVESIZE;
	// 
	// Next sample
	// 
	cmp_eq_f16_b64	$s0, $d0, $d0;
	// 
	cmp_ne_f16_b64	$s0, $d0, $d0;
	cmp_eq_f16_b64	$s0, -1, $d0;
	cmp_eq_f16_b64	$s0, WAVESIZE, $d0;
	cmp_eq_f16_b64	$s0, $d0, -1;
	cmp_eq_f16_b64	$s0, $d0, WAVESIZE;
	// 
	// Next sample
	// 
	cmp_eq_f32_b64	$s0, $d0, $d0;
	// 
	cmp_ne_f32_b64	$s0, $d0, $d0;
	cmp_eq_f32_b64	$s0, -1, $d0;
	cmp_eq_f32_b64	$s0, WAVESIZE, $d0;
	cmp_eq_f32_b64	$s0, $d0, -1;
	cmp_eq_f32_b64	$s0, $d0, WAVESIZE;
	// 
	// Next sample
	// 
	cmp_eq_b1_b64	$c0, $d0, $d0;
	// 
	cmp_ne_b1_b64	$c0, $d0, $d0;
	cmp_eq_b1_b64	$c0, -1, $d0;
	cmp_eq_b1_b64	$c0, WAVESIZE, $d0;
	cmp_eq_b1_b64	$c0, $d0, -1;
	cmp_eq_b1_b64	$c0, $d0, WAVESIZE;
	// 
	// Next sample
	// 
	cmp_eq_pp_u8x4_u8x4	$s0, $s0, $s0;
	// 
	cmp_ne_pp_u8x4_u8x4	$s0, $s0, $s0;
	cmp_lt_pp_u8x4_u8x4	$s0, $s0, $s0;
	cmp_le_pp_u8x4_u8x4	$s0, $s0, $s0;
	cmp_gt_pp_u8x4_u8x4	$s0, $s0, $s0;
	cmp_ge_pp_u8x4_u8x4	$s0, $s0, $s0;
	cmp_eq_pp_u8x4_u8x4	$s0, u8x4(255,255,255,255), $s0;
	cmp_eq_pp_u8x4_u8x4	$s0, $s0, u8x4(255,255,255,255);
	// 
	// Next sample
	// 
	cmp_eq_pp_u16x2_u16x2	$s0, $s0, $s0;
	// 
	cmp_ne_pp_u16x2_u16x2	$s0, $s0, $s0;
	cmp_lt_pp_u16x2_u16x2	$s0, $s0, $s0;
	cmp_le_pp_u16x2_u16x2	$s0, $s0, $s0;
	cmp_gt_pp_u16x2_u16x2	$s0, $s0, $s0;
	cmp_ge_pp_u16x2_u16x2	$s0, $s0, $s0;
	cmp_eq_pp_u16x2_u16x2	$s0, u16x2(-1,-1), $s0;
	cmp_eq_pp_u16x2_u16x2	$s0, $s0, u16x2(-1,-1);
	// 
	// Next sample
	// 
	cmp_eq_pp_u8x4_s8x4	$s0, $s0, $s0;
	// 
	cmp_ne_pp_u8x4_s8x4	$s0, $s0, $s0;
	cmp_lt_pp_u8x4_s8x4	$s0, $s0, $s0;
	cmp_le_pp_u8x4_s8x4	$s0, $s0, $s0;
	cmp_gt_pp_u8x4_s8x4	$s0, $s0, $s0;
	cmp_ge_pp_u8x4_s8x4	$s0, $s0, $s0;
	cmp_eq_pp_u8x4_s8x4	$s0, s8x4(-1,-1,-1,-1), $s0;
	cmp_eq_pp_u8x4_s8x4	$s0, $s0, s8x4(-1,-1,-1,-1);
	// 
	// Next sample
	// 
	cmp_eq_pp_u16x2_s16x2	$s0, $s0, $s0;
	// 
	cmp_ne_pp_u16x2_s16x2	$s0, $s0, $s0;
	cmp_lt_pp_u16x2_s16x2	$s0, $s0, $s0;
	cmp_le_pp_u16x2_s16x2	$s0, $s0, $s0;
	cmp_gt_pp_u16x2_s16x2	$s0, $s0, $s0;
	cmp_ge_pp_u16x2_s16x2	$s0, $s0, $s0;
	cmp_eq_pp_u16x2_s16x2	$s0, s16x2(-1,-1), $s0;
	cmp_eq_pp_u16x2_s16x2	$s0, $s0, s16x2(-1,-1);
	// 
	// Next sample
	// 
	cmp_eq_ftz_pp_u16x2_f16x2	$s0, $s0, $s0;
	// 
	cmp_ne_ftz_pp_u16x2_f16x2	$s0, $s0, $s0;
	cmp_lt_ftz_pp_u16x2_f16x2	$s0, $s0, $s0;
	cmp_le_ftz_pp_u16x2_f16x2	$s0, $s0, $s0;
	cmp_gt_ftz_pp_u16x2_f16x2	$s0, $s0, $s0;
	cmp_ge_ftz_pp_u16x2_f16x2	$s0, $s0, $s0;
	cmp_equ_ftz_pp_u16x2_f16x2	$s0, $s0, $s0;
	cmp_neu_ftz_pp_u16x2_f16x2	$s0, $s0, $s0;
	cmp_ltu_ftz_pp_u16x2_f16x2	$s0, $s0, $s0;
	cmp_leu_ftz_pp_u16x2_f16x2	$s0, $s0, $s0;
	cmp_gtu_ftz_pp_u16x2_f16x2	$s0, $s0, $s0;
	cmp_geu_ftz_pp_u16x2_f16x2	$s0, $s0, $s0;
	cmp_num_ftz_pp_u16x2_f16x2	$s0, $s0, $s0;
	cmp_nan_ftz_pp_u16x2_f16x2	$s0, $s0, $s0;
	cmp_seq_ftz_pp_u16x2_f16x2	$s0, $s0, $s0;
	cmp_sne_ftz_pp_u16x2_f16x2	$s0, $s0, $s0;
	cmp_slt_ftz_pp_u16x2_f16x2	$s0, $s0, $s0;
	cmp_sle_ftz_pp_u16x2_f16x2	$s0, $s0, $s0;
	cmp_sgt_ftz_pp_u16x2_f16x2	$s0, $s0, $s0;
	cmp_sge_ftz_pp_u16x2_f16x2	$s0, $s0, $s0;
	cmp_sgeu_ftz_pp_u16x2_f16x2	$s0, $s0, $s0;
	cmp_sequ_ftz_pp_u16x2_f16x2	$s0, $s0, $s0;
	cmp_sneu_ftz_pp_u16x2_f16x2	$s0, $s0, $s0;
	cmp_sltu_ftz_pp_u16x2_f16x2	$s0, $s0, $s0;
	cmp_sleu_ftz_pp_u16x2_f16x2	$s0, $s0, $s0;
	cmp_snum_ftz_pp_u16x2_f16x2	$s0, $s0, $s0;
	cmp_snan_ftz_pp_u16x2_f16x2	$s0, $s0, $s0;
	cmp_sgtu_ftz_pp_u16x2_f16x2	$s0, $s0, $s0;
	cmp_eq_ftz_pp_u16x2_f16x2	$s0, f16x2(0Hffff,0Hffff), $s0;
	cmp_eq_ftz_pp_u16x2_f16x2	$s0, $s0, f16x2(0Hffff,0Hffff);
	// 
	// Next sample
	// 
	cmp_eq_pp_u8x8_u8x8	$d0, $d0, $d0;
	// 
	cmp_ne_pp_u8x8_u8x8	$d0, $d0, $d0;
	cmp_lt_pp_u8x8_u8x8	$d0, $d0, $d0;
	cmp_le_pp_u8x8_u8x8	$d0, $d0, $d0;
	cmp_gt_pp_u8x8_u8x8	$d0, $d0, $d0;
	cmp_ge_pp_u8x8_u8x8	$d0, $d0, $d0;
	cmp_eq_pp_u8x8_u8x8	$d0, u8x8(255,255,255,255,255,255,255,255), $d0;
	cmp_eq_pp_u8x8_u8x8	$d0, $d0, u8x8(255,255,255,255,255,255,255,255);
	// 
	// Next sample
	// 
	cmp_eq_pp_u16x4_u16x4	$d0, $d0, $d0;
	// 
	cmp_ne_pp_u16x4_u16x4	$d0, $d0, $d0;
	cmp_lt_pp_u16x4_u16x4	$d0, $d0, $d0;
	cmp_le_pp_u16x4_u16x4	$d0, $d0, $d0;
	cmp_gt_pp_u16x4_u16x4	$d0, $d0, $d0;
	cmp_ge_pp_u16x4_u16x4	$d0, $d0, $d0;
	cmp_eq_pp_u16x4_u16x4	$d0, u16x4(-1,-1,-1,-1), $d0;
	cmp_eq_pp_u16x4_u16x4	$d0, $d0, u16x4(-1,-1,-1,-1);
	// 
	// Next sample
	// 
	cmp_eq_pp_u32x2_u32x2	$d0, $d0, $d0;
	// 
	cmp_ne_pp_u32x2_u32x2	$d0, $d0, $d0;
	cmp_lt_pp_u32x2_u32x2	$d0, $d0, $d0;
	cmp_le_pp_u32x2_u32x2	$d0, $d0, $d0;
	cmp_gt_pp_u32x2_u32x2	$d0, $d0, $d0;
	cmp_ge_pp_u32x2_u32x2	$d0, $d0, $d0;
	cmp_eq_pp_u32x2_u32x2	$d0, u32x2(-1,-1), $d0;
	cmp_eq_pp_u32x2_u32x2	$d0, $d0, u32x2(-1,-1);
	// 
	// Next sample
	// 
	cmp_eq_pp_u8x8_s8x8	$d0, $d0, $d0;
	// 
	cmp_ne_pp_u8x8_s8x8	$d0, $d0, $d0;
	cmp_lt_pp_u8x8_s8x8	$d0, $d0, $d0;
	cmp_le_pp_u8x8_s8x8	$d0, $d0, $d0;
	cmp_gt_pp_u8x8_s8x8	$d0, $d0, $d0;
	cmp_ge_pp_u8x8_s8x8	$d0, $d0, $d0;
	cmp_eq_pp_u8x8_s8x8	$d0, s8x8(-1,-1,-1,-1,-1,-1,-1,-1), $d0;
	cmp_eq_pp_u8x8_s8x8	$d0, $d0, s8x8(-1,-1,-1,-1,-1,-1,-1,-1);
	// 
	// Next sample
	// 
	cmp_eq_pp_u16x4_s16x4	$d0, $d0, $d0;
	// 
	cmp_ne_pp_u16x4_s16x4	$d0, $d0, $d0;
	cmp_lt_pp_u16x4_s16x4	$d0, $d0, $d0;
	cmp_le_pp_u16x4_s16x4	$d0, $d0, $d0;
	cmp_gt_pp_u16x4_s16x4	$d0, $d0, $d0;
	cmp_ge_pp_u16x4_s16x4	$d0, $d0, $d0;
	cmp_eq_pp_u16x4_s16x4	$d0, s16x4(-1,-1,-1,-1), $d0;
	cmp_eq_pp_u16x4_s16x4	$d0, $d0, s16x4(-1,-1,-1,-1);
	// 
	// Next sample
	// 
	cmp_eq_pp_u32x2_s32x2	$d0, $d0, $d0;
	// 
	cmp_ne_pp_u32x2_s32x2	$d0, $d0, $d0;
	cmp_lt_pp_u32x2_s32x2	$d0, $d0, $d0;
	cmp_le_pp_u32x2_s32x2	$d0, $d0, $d0;
	cmp_gt_pp_u32x2_s32x2	$d0, $d0, $d0;
	cmp_ge_pp_u32x2_s32x2	$d0, $d0, $d0;
	cmp_eq_pp_u32x2_s32x2	$d0, s32x2(-1,-1), $d0;
	cmp_eq_pp_u32x2_s32x2	$d0, $d0, s32x2(-1,-1);
	// 
	// Next sample
	// 
	cmp_eq_ftz_pp_u16x4_f16x4	$d0, $d0, $d0;
	// 
	cmp_ne_ftz_pp_u16x4_f16x4	$d0, $d0, $d0;
	cmp_lt_ftz_pp_u16x4_f16x4	$d0, $d0, $d0;
	cmp_le_ftz_pp_u16x4_f16x4	$d0, $d0, $d0;
	cmp_gt_ftz_pp_u16x4_f16x4	$d0, $d0, $d0;
	cmp_ge_ftz_pp_u16x4_f16x4	$d0, $d0, $d0;
	cmp_equ_ftz_pp_u16x4_f16x4	$d0, $d0, $d0;
	cmp_neu_ftz_pp_u16x4_f16x4	$d0, $d0, $d0;
	cmp_ltu_ftz_pp_u16x4_f16x4	$d0, $d0, $d0;
	cmp_leu_ftz_pp_u16x4_f16x4	$d0, $d0, $d0;
	cmp_gtu_ftz_pp_u16x4_f16x4	$d0, $d0, $d0;
	cmp_geu_ftz_pp_u16x4_f16x4	$d0, $d0, $d0;
	cmp_num_ftz_pp_u16x4_f16x4	$d0, $d0, $d0;
	cmp_nan_ftz_pp_u16x4_f16x4	$d0, $d0, $d0;
	cmp_seq_ftz_pp_u16x4_f16x4	$d0, $d0, $d0;
	cmp_sne_ftz_pp_u16x4_f16x4	$d0, $d0, $d0;
	cmp_slt_ftz_pp_u16x4_f16x4	$d0, $d0, $d0;
	cmp_sle_ftz_pp_u16x4_f16x4	$d0, $d0, $d0;
	cmp_sgt_ftz_pp_u16x4_f16x4	$d0, $d0, $d0;
	cmp_sge_ftz_pp_u16x4_f16x4	$d0, $d0, $d0;
	cmp_sgeu_ftz_pp_u16x4_f16x4	$d0, $d0, $d0;
	cmp_sequ_ftz_pp_u16x4_f16x4	$d0, $d0, $d0;
	cmp_sneu_ftz_pp_u16x4_f16x4	$d0, $d0, $d0;
	cmp_sltu_ftz_pp_u16x4_f16x4	$d0, $d0, $d0;
	cmp_sleu_ftz_pp_u16x4_f16x4	$d0, $d0, $d0;
	cmp_snum_ftz_pp_u16x4_f16x4	$d0, $d0, $d0;
	cmp_snan_ftz_pp_u16x4_f16x4	$d0, $d0, $d0;
	cmp_sgtu_ftz_pp_u16x4_f16x4	$d0, $d0, $d0;
	cmp_eq_ftz_pp_u16x4_f16x4	$d0, f16x4(0Hffff,0Hffff,0Hffff,0Hffff), $d0;
	cmp_eq_ftz_pp_u16x4_f16x4	$d0, $d0, f16x4(0Hffff,0Hffff,0Hffff,0Hffff);
	// 
	// Next sample
	// 
	cmp_eq_ftz_pp_u32x2_f32x2	$d0, $d0, $d0;
	// 
	cmp_ne_ftz_pp_u32x2_f32x2	$d0, $d0, $d0;
	cmp_lt_ftz_pp_u32x2_f32x2	$d0, $d0, $d0;
	cmp_le_ftz_pp_u32x2_f32x2	$d0, $d0, $d0;
	cmp_gt_ftz_pp_u32x2_f32x2	$d0, $d0, $d0;
	cmp_ge_ftz_pp_u32x2_f32x2	$d0, $d0, $d0;
	cmp_equ_ftz_pp_u32x2_f32x2	$d0, $d0, $d0;
	cmp_neu_ftz_pp_u32x2_f32x2	$d0, $d0, $d0;
	cmp_ltu_ftz_pp_u32x2_f32x2	$d0, $d0, $d0;
	cmp_leu_ftz_pp_u32x2_f32x2	$d0, $d0, $d0;
	cmp_gtu_ftz_pp_u32x2_f32x2	$d0, $d0, $d0;
	cmp_geu_ftz_pp_u32x2_f32x2	$d0, $d0, $d0;
	cmp_num_ftz_pp_u32x2_f32x2	$d0, $d0, $d0;
	cmp_nan_ftz_pp_u32x2_f32x2	$d0, $d0, $d0;
	cmp_seq_ftz_pp_u32x2_f32x2	$d0, $d0, $d0;
	cmp_sne_ftz_pp_u32x2_f32x2	$d0, $d0, $d0;
	cmp_slt_ftz_pp_u32x2_f32x2	$d0, $d0, $d0;
	cmp_sle_ftz_pp_u32x2_f32x2	$d0, $d0, $d0;
	cmp_sgt_ftz_pp_u32x2_f32x2	$d0, $d0, $d0;
	cmp_sge_ftz_pp_u32x2_f32x2	$d0, $d0, $d0;
	cmp_sgeu_ftz_pp_u32x2_f32x2	$d0, $d0, $d0;
	cmp_sequ_ftz_pp_u32x2_f32x2	$d0, $d0, $d0;
	cmp_sneu_ftz_pp_u32x2_f32x2	$d0, $d0, $d0;
	cmp_sltu_ftz_pp_u32x2_f32x2	$d0, $d0, $d0;
	cmp_sleu_ftz_pp_u32x2_f32x2	$d0, $d0, $d0;
	cmp_snum_ftz_pp_u32x2_f32x2	$d0, $d0, $d0;
	cmp_snan_ftz_pp_u32x2_f32x2	$d0, $d0, $d0;
	cmp_sgtu_ftz_pp_u32x2_f32x2	$d0, $d0, $d0;
	cmp_eq_ftz_pp_u32x2_f32x2	$d0, f32x2(0Fffffffff,0Fffffffff), $d0;
	cmp_eq_ftz_pp_u32x2_f32x2	$d0, $d0, f32x2(0Fffffffff,0Fffffffff);
	// 
	// Next sample
	// 
	cmp_eq_pp_u8x16_u8x16	$q0, $q0, $q0;
	// 
	cmp_ne_pp_u8x16_u8x16	$q0, $q0, $q0;
	cmp_lt_pp_u8x16_u8x16	$q0, $q0, $q0;
	cmp_le_pp_u8x16_u8x16	$q0, $q0, $q0;
	cmp_gt_pp_u8x16_u8x16	$q0, $q0, $q0;
	cmp_ge_pp_u8x16_u8x16	$q0, $q0, $q0;
	cmp_eq_pp_u8x16_u8x16	$q0, u8x16(0,0,0,0,0,0,0,0,107,240,55,174,50,95,28,113), $q0;
	cmp_eq_pp_u8x16_u8x16	$q0, $q0, u8x16(0,0,0,0,0,0,0,0,107,240,55,174,50,95,28,113);
	// 
	// Next sample
	// 
	cmp_eq_pp_u16x8_u16x8	$q0, $q0, $q0;
	// 
	cmp_ne_pp_u16x8_u16x8	$q0, $q0, $q0;
	cmp_lt_pp_u16x8_u16x8	$q0, $q0, $q0;
	cmp_le_pp_u16x8_u16x8	$q0, $q0, $q0;
	cmp_gt_pp_u16x8_u16x8	$q0, $q0, $q0;
	cmp_ge_pp_u16x8_u16x8	$q0, $q0, $q0;
	cmp_eq_pp_u16x8_u16x8	$q0, u16x8(0,0,0,0,0x6bf0,0x37ae,0x325f,0x1c71), $q0;
	cmp_eq_pp_u16x8_u16x8	$q0, $q0, u16x8(0,0,0,0,0x6bf0,0x37ae,0x325f,0x1c71);
	// 
	// Next sample
	// 
	cmp_eq_pp_u32x4_u32x4	$q0, $q0, $q0;
	// 
	cmp_ne_pp_u32x4_u32x4	$q0, $q0, $q0;
	cmp_lt_pp_u32x4_u32x4	$q0, $q0, $q0;
	cmp_le_pp_u32x4_u32x4	$q0, $q0, $q0;
	cmp_gt_pp_u32x4_u32x4	$q0, $q0, $q0;
	cmp_ge_pp_u32x4_u32x4	$q0, $q0, $q0;
	cmp_eq_pp_u32x4_u32x4	$q0, u32x4(0,0,0x6bf037ae,0x325f1c71), $q0;
	cmp_eq_pp_u32x4_u32x4	$q0, $q0, u32x4(0,0,0x6bf037ae,0x325f1c71);
	// 
	// Next sample
	// 
	cmp_eq_pp_u64x2_u64x2	$q0, $q0, $q0;
	// 
	cmp_ne_pp_u64x2_u64x2	$q0, $q0, $q0;
	cmp_lt_pp_u64x2_u64x2	$q0, $q0, $q0;
	cmp_le_pp_u64x2_u64x2	$q0, $q0, $q0;
	cmp_gt_pp_u64x2_u64x2	$q0, $q0, $q0;
	cmp_ge_pp_u64x2_u64x2	$q0, $q0, $q0;
	cmp_eq_pp_u64x2_u64x2	$q0, u64x2(0,0x6bf037ae325f1c71), $q0;
	cmp_eq_pp_u64x2_u64x2	$q0, $q0, u64x2(0,0x6bf037ae325f1c71);
	// 
	// Next sample
	// 
	cmp_eq_pp_u8x16_s8x16	$q0, $q0, $q0;
	// 
	cmp_ne_pp_u8x16_s8x16	$q0, $q0, $q0;
	cmp_lt_pp_u8x16_s8x16	$q0, $q0, $q0;
	cmp_le_pp_u8x16_s8x16	$q0, $q0, $q0;
	cmp_gt_pp_u8x16_s8x16	$q0, $q0, $q0;
	cmp_ge_pp_u8x16_s8x16	$q0, $q0, $q0;
	cmp_eq_pp_u8x16_s8x16	$q0, s8x16(0,0,0,0,0,0,0,0,107,-16,55,-82,50,95,28,113), $q0;
	cmp_eq_pp_u8x16_s8x16	$q0, $q0, s8x16(0,0,0,0,0,0,0,0,107,-16,55,-82,50,95,28,113);
	// 
	// Next sample
	// 
	cmp_eq_pp_u16x8_s16x8	$q0, $q0, $q0;
	// 
	cmp_ne_pp_u16x8_s16x8	$q0, $q0, $q0;
	cmp_lt_pp_u16x8_s16x8	$q0, $q0, $q0;
	cmp_le_pp_u16x8_s16x8	$q0, $q0, $q0;
	cmp_gt_pp_u16x8_s16x8	$q0, $q0, $q0;
	cmp_ge_pp_u16x8_s16x8	$q0, $q0, $q0;
	cmp_eq_pp_u16x8_s16x8	$q0, s16x8(0,0,0,0,0x6bf0,0x37ae,0x325f,0x1c71), $q0;
	cmp_eq_pp_u16x8_s16x8	$q0, $q0, s16x8(0,0,0,0,0x6bf0,0x37ae,0x325f,0x1c71);
	// 
	// Next sample
	// 
	cmp_eq_pp_u32x4_s32x4	$q0, $q0, $q0;
	// 
	cmp_ne_pp_u32x4_s32x4	$q0, $q0, $q0;
	cmp_lt_pp_u32x4_s32x4	$q0, $q0, $q0;
	cmp_le_pp_u32x4_s32x4	$q0, $q0, $q0;
	cmp_gt_pp_u32x4_s32x4	$q0, $q0, $q0;
	cmp_ge_pp_u32x4_s32x4	$q0, $q0, $q0;
	cmp_eq_pp_u32x4_s32x4	$q0, s32x4(0,0,0x6bf037ae,0x325f1c71), $q0;
	cmp_eq_pp_u32x4_s32x4	$q0, $q0, s32x4(0,0,0x6bf037ae,0x325f1c71);
	// 
	// Next sample
	// 
	cmp_eq_pp_u64x2_s64x2	$q0, $q0, $q0;
	// 
	cmp_ne_pp_u64x2_s64x2	$q0, $q0, $q0;
	cmp_lt_pp_u64x2_s64x2	$q0, $q0, $q0;
	cmp_le_pp_u64x2_s64x2	$q0, $q0, $q0;
	cmp_gt_pp_u64x2_s64x2	$q0, $q0, $q0;
	cmp_ge_pp_u64x2_s64x2	$q0, $q0, $q0;
	cmp_eq_pp_u64x2_s64x2	$q0, s64x2(0,0x6bf037ae325f1c71), $q0;
	cmp_eq_pp_u64x2_s64x2	$q0, $q0, s64x2(0,0x6bf037ae325f1c71);
	// 
	// Next sample
	// 
	cmp_eq_ftz_pp_u16x8_f16x8	$q0, $q0, $q0;
	// 
	cmp_ne_ftz_pp_u16x8_f16x8	$q0, $q0, $q0;
	cmp_lt_ftz_pp_u16x8_f16x8	$q0, $q0, $q0;
	cmp_le_ftz_pp_u16x8_f16x8	$q0, $q0, $q0;
	cmp_gt_ftz_pp_u16x8_f16x8	$q0, $q0, $q0;
	cmp_ge_ftz_pp_u16x8_f16x8	$q0, $q0, $q0;
	cmp_equ_ftz_pp_u16x8_f16x8	$q0, $q0, $q0;
	cmp_neu_ftz_pp_u16x8_f16x8	$q0, $q0, $q0;
	cmp_ltu_ftz_pp_u16x8_f16x8	$q0, $q0, $q0;
	cmp_leu_ftz_pp_u16x8_f16x8	$q0, $q0, $q0;
	cmp_gtu_ftz_pp_u16x8_f16x8	$q0, $q0, $q0;
	cmp_geu_ftz_pp_u16x8_f16x8	$q0, $q0, $q0;
	cmp_num_ftz_pp_u16x8_f16x8	$q0, $q0, $q0;
	cmp_nan_ftz_pp_u16x8_f16x8	$q0, $q0, $q0;
	cmp_seq_ftz_pp_u16x8_f16x8	$q0, $q0, $q0;
	cmp_sne_ftz_pp_u16x8_f16x8	$q0, $q0, $q0;
	cmp_slt_ftz_pp_u16x8_f16x8	$q0, $q0, $q0;
	cmp_sle_ftz_pp_u16x8_f16x8	$q0, $q0, $q0;
	cmp_sgt_ftz_pp_u16x8_f16x8	$q0, $q0, $q0;
	cmp_sge_ftz_pp_u16x8_f16x8	$q0, $q0, $q0;
	cmp_sgeu_ftz_pp_u16x8_f16x8	$q0, $q0, $q0;
	cmp_sequ_ftz_pp_u16x8_f16x8	$q0, $q0, $q0;
	cmp_sneu_ftz_pp_u16x8_f16x8	$q0, $q0, $q0;
	cmp_sltu_ftz_pp_u16x8_f16x8	$q0, $q0, $q0;
	cmp_sleu_ftz_pp_u16x8_f16x8	$q0, $q0, $q0;
	cmp_snum_ftz_pp_u16x8_f16x8	$q0, $q0, $q0;
	cmp_snan_ftz_pp_u16x8_f16x8	$q0, $q0, $q0;
	cmp_sgtu_ftz_pp_u16x8_f16x8	$q0, $q0, $q0;
	cmp_eq_ftz_pp_u16x8_f16x8	$q0, f16x8(0H0000,0H0000,0H0000,0H0000,0H6bf0,0H37ae,0H325f,0H1c71), $q0;
	cmp_eq_ftz_pp_u16x8_f16x8	$q0, $q0, f16x8(0H0000,0H0000,0H0000,0H0000,0H6bf0,0H37ae,0H325f,0H1c71);
	// 
	// Next sample
	// 
	cmp_eq_ftz_pp_u32x4_f32x4	$q0, $q0, $q0;
	// 
	cmp_ne_ftz_pp_u32x4_f32x4	$q0, $q0, $q0;
	cmp_lt_ftz_pp_u32x4_f32x4	$q0, $q0, $q0;
	cmp_le_ftz_pp_u32x4_f32x4	$q0, $q0, $q0;
	cmp_gt_ftz_pp_u32x4_f32x4	$q0, $q0, $q0;
	cmp_ge_ftz_pp_u32x4_f32x4	$q0, $q0, $q0;
	cmp_equ_ftz_pp_u32x4_f32x4	$q0, $q0, $q0;
	cmp_neu_ftz_pp_u32x4_f32x4	$q0, $q0, $q0;
	cmp_ltu_ftz_pp_u32x4_f32x4	$q0, $q0, $q0;
	cmp_leu_ftz_pp_u32x4_f32x4	$q0, $q0, $q0;
	cmp_gtu_ftz_pp_u32x4_f32x4	$q0, $q0, $q0;
	cmp_geu_ftz_pp_u32x4_f32x4	$q0, $q0, $q0;
	cmp_num_ftz_pp_u32x4_f32x4	$q0, $q0, $q0;
	cmp_nan_ftz_pp_u32x4_f32x4	$q0, $q0, $q0;
	cmp_seq_ftz_pp_u32x4_f32x4	$q0, $q0, $q0;
	cmp_sne_ftz_pp_u32x4_f32x4	$q0, $q0, $q0;
	cmp_slt_ftz_pp_u32x4_f32x4	$q0, $q0, $q0;
	cmp_sle_ftz_pp_u32x4_f32x4	$q0, $q0, $q0;
	cmp_sgt_ftz_pp_u32x4_f32x4	$q0, $q0, $q0;
	cmp_sge_ftz_pp_u32x4_f32x4	$q0, $q0, $q0;
	cmp_sgeu_ftz_pp_u32x4_f32x4	$q0, $q0, $q0;
	cmp_sequ_ftz_pp_u32x4_f32x4	$q0, $q0, $q0;
	cmp_sneu_ftz_pp_u32x4_f32x4	$q0, $q0, $q0;
	cmp_sltu_ftz_pp_u32x4_f32x4	$q0, $q0, $q0;
	cmp_sleu_ftz_pp_u32x4_f32x4	$q0, $q0, $q0;
	cmp_snum_ftz_pp_u32x4_f32x4	$q0, $q0, $q0;
	cmp_snan_ftz_pp_u32x4_f32x4	$q0, $q0, $q0;
	cmp_sgtu_ftz_pp_u32x4_f32x4	$q0, $q0, $q0;
	cmp_eq_ftz_pp_u32x4_f32x4	$q0, f32x4(0F00000000,0F00000000,0F6bf037ae,0F325f1c71), $q0;
	cmp_eq_ftz_pp_u32x4_f32x4	$q0, $q0, f32x4(0F00000000,0F00000000,0F6bf037ae,0F325f1c71);
	// 
	// Next sample
	// 
	cvt_u16_u8	$s0, $s0;
	// 
	cvt_u16_u8	$s0, 1;
	cvt_u16_u8	$s0, WAVESIZE;
	// 
	// Next sample
	// 
	cvt_u32_u8	$s0, $s0;
	// 
	cvt_u32_u8	$s0, 1;
	cvt_u32_u8	$s0, WAVESIZE;
	// 
	// Next sample
	// 
	cvt_u64_u8	$d0, $s0;
	// 
	cvt_u64_u8	$d0, 1;
	cvt_u64_u8	$d0, WAVESIZE;
	// 
	// Next sample
	// 
	cvt_s16_u8	$s0, $s0;
	// 
	cvt_s16_u8	$s0, 1;
	cvt_s16_u8	$s0, WAVESIZE;
	// 
	// Next sample
	// 
	cvt_s32_u8	$s0, $s0;
	// 
	cvt_s32_u8	$s0, 1;
	cvt_s32_u8	$s0, WAVESIZE;
	// 
	// Next sample
	// 
	cvt_s64_u8	$d0, $s0;
	// 
	cvt_s64_u8	$d0, 1;
	cvt_s64_u8	$d0, WAVESIZE;
	// 
	// Next sample
	// 
	cvt_f16_u8	$s0, $s0;
	// 
	cvt_f16_u8	$s0, 1;
	cvt_f16_u8	$s0, WAVESIZE;
	// 
	// Next sample
	// 
	cvt_f32_u8	$s0, $s0;
	// 
	cvt_f32_u8	$s0, 1;
	cvt_f32_u8	$s0, WAVESIZE;
	// 
	// Next sample
	// 
	cvt_b1_u8	$c0, $s0;
	// 
	cvt_b1_u8	$c0, 1;
	cvt_b1_u8	$c0, WAVESIZE;
	// 
	// Next sample
	// 
	cvt_u8_u16	$s0, $s0;
	// 
	cvt_u8_u16	$s0, -1;
	cvt_u8_u16	$s0, WAVESIZE;
	// 
	// Next sample
	// 
	cvt_u32_u16	$s0, $s0;
	// 
	cvt_u32_u16	$s0, -1;
	cvt_u32_u16	$s0, WAVESIZE;
	// 
	// Next sample
	// 
	cvt_u64_u16	$d0, $s0;
	// 
	cvt_u64_u16	$d0, -1;
	cvt_u64_u16	$d0, WAVESIZE;
	// 
	// Next sample
	// 
	cvt_s8_u16	$s0, $s0;
	// 
	cvt_s8_u16	$s0, -1;
	cvt_s8_u16	$s0, WAVESIZE;
	// 
	// Next sample
	// 
	cvt_s32_u16	$s0, $s0;
	// 
	cvt_s32_u16	$s0, -1;
	cvt_s32_u16	$s0, WAVESIZE;
	// 
	// Next sample
	// 
	cvt_s64_u16	$d0, $s0;
	// 
	cvt_s64_u16	$d0, -1;
	cvt_s64_u16	$d0, WAVESIZE;
	// 
	// Next sample
	// 
	cvt_f16_u16	$s0, $s0;
	// 
	cvt_f16_u16	$s0, -1;
	cvt_f16_u16	$s0, WAVESIZE;
	// 
	// Next sample
	// 
	cvt_f32_u16	$s0, $s0;
	// 
	cvt_f32_u16	$s0, -1;
	cvt_f32_u16	$s0, WAVESIZE;
	// 
	// Next sample
	// 
	cvt_b1_u16	$c0, $s0;
	// 
	cvt_b1_u16	$c0, -1;
	cvt_b1_u16	$c0, WAVESIZE;
	// 
	// Next sample
	// 
	cvt_u8_u32	$s0, $s0;
	// 
	cvt_u8_u32	$s0, -1;
	cvt_u8_u32	$s0, WAVESIZE;
	// 
	// Next sample
	// 
	cvt_u16_u32	$s0, $s0;
	// 
	cvt_u16_u32	$s0, -1;
	cvt_u16_u32	$s0, WAVESIZE;
	// 
	// Next sample
	// 
	cvt_u64_u32	$d0, $s0;
	// 
	cvt_u64_u32	$d0, -1;
	cvt_u64_u32	$d0, WAVESIZE;
	// 
	// Next sample
	// 
	cvt_s8_u32	$s0, $s0;
	// 
	cvt_s8_u32	$s0, -1;
	cvt_s8_u32	$s0, WAVESIZE;
	// 
	// Next sample
	// 
	cvt_s16_u32	$s0, $s0;
	// 
	cvt_s16_u32	$s0, -1;
	cvt_s16_u32	$s0, WAVESIZE;
	// 
	// Next sample
	// 
	cvt_s64_u32	$d0, $s0;
	// 
	cvt_s64_u32	$d0, -1;
	cvt_s64_u32	$d0, WAVESIZE;
	// 
	// Next sample
	// 
	cvt_f16_u32	$s0, $s0;
	// 
	cvt_f16_u32	$s0, -1;
	cvt_f16_u32	$s0, WAVESIZE;
	// 
	// Next sample
	// 
	cvt_f32_u32	$s0, $s0;
	// 
	cvt_f32_u32	$s0, -1;
	cvt_f32_u32	$s0, WAVESIZE;
	// 
	// Next sample
	// 
	cvt_b1_u32	$c0, $s0;
	// 
	cvt_b1_u32	$c0, -1;
	cvt_b1_u32	$c0, WAVESIZE;
	// 
	// Next sample
	// 
	cvt_u8_u64	$s0, $d0;
	// 
	cvt_u8_u64	$s0, -1;
	cvt_u8_u64	$s0, WAVESIZE;
	// 
	// Next sample
	// 
	cvt_u16_u64	$s0, $d0;
	// 
	cvt_u16_u64	$s0, -1;
	cvt_u16_u64	$s0, WAVESIZE;
	// 
	// Next sample
	// 
	cvt_u32_u64	$s0, $d0;
	// 
	cvt_u32_u64	$s0, -1;
	cvt_u32_u64	$s0, WAVESIZE;
	// 
	// Next sample
	// 
	cvt_s8_u64	$s0, $d0;
	// 
	cvt_s8_u64	$s0, -1;
	cvt_s8_u64	$s0, WAVESIZE;
	// 
	// Next sample
	// 
	cvt_s16_u64	$s0, $d0;
	// 
	cvt_s16_u64	$s0, -1;
	cvt_s16_u64	$s0, WAVESIZE;
	// 
	// Next sample
	// 
	cvt_s32_u64	$s0, $d0;
	// 
	cvt_s32_u64	$s0, -1;
	cvt_s32_u64	$s0, WAVESIZE;
	// 
	// Next sample
	// 
	cvt_f16_u64	$s0, $d0;
	// 
	cvt_f16_u64	$s0, -1;
	cvt_f16_u64	$s0, WAVESIZE;
	// 
	// Next sample
	// 
	cvt_f32_u64	$s0, $d0;
	// 
	cvt_f32_u64	$s0, -1;
	cvt_f32_u64	$s0, WAVESIZE;
	// 
	// Next sample
	// 
	cvt_b1_u64	$c0, $d0;
	// 
	cvt_b1_u64	$c0, -1;
	cvt_b1_u64	$c0, WAVESIZE;
	// 
	// Next sample
	// 
	cvt_u16_s8	$s0, $s0;
	// 
	cvt_u16_s8	$s0, 1;
	cvt_u16_s8	$s0, WAVESIZE;
	// 
	// Next sample
	// 
	cvt_u32_s8	$s0, $s0;
	// 
	cvt_u32_s8	$s0, 1;
	cvt_u32_s8	$s0, WAVESIZE;
	// 
	// Next sample
	// 
	cvt_u64_s8	$d0, $s0;
	// 
	cvt_u64_s8	$d0, 1;
	cvt_u64_s8	$d0, WAVESIZE;
	// 
	// Next sample
	// 
	cvt_s16_s8	$s0, $s0;
	// 
	cvt_s16_s8	$s0, 1;
	cvt_s16_s8	$s0, WAVESIZE;
	// 
	// Next sample
	// 
	cvt_s32_s8	$s0, $s0;
	// 
	cvt_s32_s8	$s0, 1;
	cvt_s32_s8	$s0, WAVESIZE;
	// 
	// Next sample
	// 
	cvt_s64_s8	$d0, $s0;
	// 
	cvt_s64_s8	$d0, 1;
	cvt_s64_s8	$d0, WAVESIZE;
	// 
	// Next sample
	// 
	cvt_f16_s8	$s0, $s0;
	// 
	cvt_f16_s8	$s0, 1;
	cvt_f16_s8	$s0, WAVESIZE;
	// 
	// Next sample
	// 
	cvt_f32_s8	$s0, $s0;
	// 
	cvt_f32_s8	$s0, 1;
	cvt_f32_s8	$s0, WAVESIZE;
	// 
	// Next sample
	// 
	cvt_b1_s8	$c0, $s0;
	// 
	cvt_b1_s8	$c0, 1;
	cvt_b1_s8	$c0, WAVESIZE;
	// 
	// Next sample
	// 
	cvt_u8_s16	$s0, $s0;
	// 
	cvt_u8_s16	$s0, -1;
	cvt_u8_s16	$s0, WAVESIZE;
	// 
	// Next sample
	// 
	cvt_u32_s16	$s0, $s0;
	// 
	cvt_u32_s16	$s0, -1;
	cvt_u32_s16	$s0, WAVESIZE;
	// 
	// Next sample
	// 
	cvt_u64_s16	$d0, $s0;
	// 
	cvt_u64_s16	$d0, -1;
	cvt_u64_s16	$d0, WAVESIZE;
	// 
	// Next sample
	// 
	cvt_s8_s16	$s0, $s0;
	// 
	cvt_s8_s16	$s0, -1;
	cvt_s8_s16	$s0, WAVESIZE;
	// 
	// Next sample
	// 
	cvt_s32_s16	$s0, $s0;
	// 
	cvt_s32_s16	$s0, -1;
	cvt_s32_s16	$s0, WAVESIZE;
	// 
	// Next sample
	// 
	cvt_s64_s16	$d0, $s0;
	// 
	cvt_s64_s16	$d0, -1;
	cvt_s64_s16	$d0, WAVESIZE;
	// 
	// Next sample
	// 
	cvt_f16_s16	$s0, $s0;
	// 
	cvt_f16_s16	$s0, -1;
	cvt_f16_s16	$s0, WAVESIZE;
	// 
	// Next sample
	// 
	cvt_f32_s16	$s0, $s0;
	// 
	cvt_f32_s16	$s0, -1;
	cvt_f32_s16	$s0, WAVESIZE;
	// 
	// Next sample
	// 
	cvt_b1_s16	$c0, $s0;
	// 
	cvt_b1_s16	$c0, -1;
	cvt_b1_s16	$c0, WAVESIZE;
	// 
	// Next sample
	// 
	cvt_u8_s32	$s0, $s0;
	// 
	cvt_u8_s32	$s0, -1;
	cvt_u8_s32	$s0, WAVESIZE;
	// 
	// Next sample
	// 
	cvt_u16_s32	$s0, $s0;
	// 
	cvt_u16_s32	$s0, -1;
	cvt_u16_s32	$s0, WAVESIZE;
	// 
	// Next sample
	// 
	cvt_u64_s32	$d0, $s0;
	// 
	cvt_u64_s32	$d0, -1;
	cvt_u64_s32	$d0, WAVESIZE;
	// 
	// Next sample
	// 
	cvt_s8_s32	$s0, $s0;
	// 
	cvt_s8_s32	$s0, -1;
	cvt_s8_s32	$s0, WAVESIZE;
	// 
	// Next sample
	// 
	cvt_s16_s32	$s0, $s0;
	// 
	cvt_s16_s32	$s0, -1;
	cvt_s16_s32	$s0, WAVESIZE;
	// 
	// Next sample
	// 
	cvt_s64_s32	$d0, $s0;
	// 
	cvt_s64_s32	$d0, -1;
	cvt_s64_s32	$d0, WAVESIZE;
	// 
	// Next sample
	// 
	cvt_f16_s32	$s0, $s0;
	// 
	cvt_f16_s32	$s0, -1;
	cvt_f16_s32	$s0, WAVESIZE;
	// 
	// Next sample
	// 
	cvt_f32_s32	$s0, $s0;
	// 
	cvt_f32_s32	$s0, -1;
	cvt_f32_s32	$s0, WAVESIZE;
	// 
	// Next sample
	// 
	cvt_b1_s32	$c0, $s0;
	// 
	cvt_b1_s32	$c0, -1;
	cvt_b1_s32	$c0, WAVESIZE;
	// 
	// Next sample
	// 
	cvt_u8_s64	$s0, $d0;
	// 
	cvt_u8_s64	$s0, -1;
	cvt_u8_s64	$s0, WAVESIZE;
	// 
	// Next sample
	// 
	cvt_u16_s64	$s0, $d0;
	// 
	cvt_u16_s64	$s0, -1;
	cvt_u16_s64	$s0, WAVESIZE;
	// 
	// Next sample
	// 
	cvt_u32_s64	$s0, $d0;
	// 
	cvt_u32_s64	$s0, -1;
	cvt_u32_s64	$s0, WAVESIZE;
	// 
	// Next sample
	// 
	cvt_s8_s64	$s0, $d0;
	// 
	cvt_s8_s64	$s0, -1;
	cvt_s8_s64	$s0, WAVESIZE;
	// 
	// Next sample
	// 
	cvt_s16_s64	$s0, $d0;
	// 
	cvt_s16_s64	$s0, -1;
	cvt_s16_s64	$s0, WAVESIZE;
	// 
	// Next sample
	// 
	cvt_s32_s64	$s0, $d0;
	// 
	cvt_s32_s64	$s0, -1;
	cvt_s32_s64	$s0, WAVESIZE;
	// 
	// Next sample
	// 
	cvt_f16_s64	$s0, $d0;
	// 
	cvt_f16_s64	$s0, -1;
	cvt_f16_s64	$s0, WAVESIZE;
	// 
	// Next sample
	// 
	cvt_f32_s64	$s0, $d0;
	// 
	cvt_f32_s64	$s0, -1;
	cvt_f32_s64	$s0, WAVESIZE;
	// 
	// Next sample
	// 
	cvt_b1_s64	$c0, $d0;
	// 
	cvt_b1_s64	$c0, -1;
	cvt_b1_s64	$c0, WAVESIZE;
	// 
	// Next sample
	// 
	cvt_ftz_u8_f16	$s0, $s0;
	// 
	cvt_ftz_zeroi_sat_u8_f16	$s0, $s0;
	cvt_ftz_szeroi_u8_f16	$s0, $s0;
	cvt_ftz_szeroi_sat_u8_f16	$s0, $s0;
	cvt_ftz_u8_f16	$s0, 0Hffff;
	// 
	// Next sample
	// 
	cvt_ftz_u16_f16	$s0, $s0;
	// 
	cvt_ftz_zeroi_sat_u16_f16	$s0, $s0;
	cvt_ftz_szeroi_u16_f16	$s0, $s0;
	cvt_ftz_szeroi_sat_u16_f16	$s0, $s0;
	cvt_ftz_u16_f16	$s0, 0Hffff;
	// 
	// Next sample
	// 
	cvt_ftz_u32_f16	$s0, $s0;
	// 
	cvt_ftz_zeroi_sat_u32_f16	$s0, $s0;
	cvt_ftz_szeroi_u32_f16	$s0, $s0;
	cvt_ftz_szeroi_sat_u32_f16	$s0, $s0;
	cvt_ftz_u32_f16	$s0, 0Hffff;
	// 
	// Next sample
	// 
	cvt_ftz_u64_f16	$d0, $s0;
	// 
	cvt_ftz_zeroi_sat_u64_f16	$d0, $s0;
	cvt_ftz_szeroi_u64_f16	$d0, $s0;
	cvt_ftz_szeroi_sat_u64_f16	$d0, $s0;
	cvt_ftz_u64_f16	$d0, 0Hffff;
	// 
	// Next sample
	// 
	cvt_ftz_s8_f16	$s0, $s0;
	// 
	cvt_ftz_zeroi_sat_s8_f16	$s0, $s0;
	cvt_ftz_szeroi_s8_f16	$s0, $s0;
	cvt_ftz_szeroi_sat_s8_f16	$s0, $s0;
	cvt_ftz_s8_f16	$s0, 0Hffff;
	// 
	// Next sample
	// 
	cvt_ftz_s16_f16	$s0, $s0;
	// 
	cvt_ftz_zeroi_sat_s16_f16	$s0, $s0;
	cvt_ftz_szeroi_s16_f16	$s0, $s0;
	cvt_ftz_szeroi_sat_s16_f16	$s0, $s0;
	cvt_ftz_s16_f16	$s0, 0Hffff;
	// 
	// Next sample
	// 
	cvt_ftz_s32_f16	$s0, $s0;
	// 
	cvt_ftz_zeroi_sat_s32_f16	$s0, $s0;
	cvt_ftz_szeroi_s32_f16	$s0, $s0;
	cvt_ftz_szeroi_sat_s32_f16	$s0, $s0;
	cvt_ftz_s32_f16	$s0, 0Hffff;
	// 
	// Next sample
	// 
	cvt_ftz_s64_f16	$d0, $s0;
	// 
	cvt_ftz_zeroi_sat_s64_f16	$d0, $s0;
	cvt_ftz_szeroi_s64_f16	$d0, $s0;
	cvt_ftz_szeroi_sat_s64_f16	$d0, $s0;
	cvt_ftz_s64_f16	$d0, 0Hffff;
	// 
	// Next sample
	// 
	cvt_ftz_f32_f16	$s0, $s0;
	// 
	cvt_ftz_f32_f16	$s0, 0Hffff;
	// 
	// Next sample
	// 
	cvt_ftz_b1_f16	$c0, $s0;
	// 
	cvt_ftz_b1_f16	$c0, 0Hffff;
	// 
	// Next sample
	// 
	cvt_ftz_u8_f32	$s0, $s0;
	// 
	cvt_ftz_zeroi_sat_u8_f32	$s0, $s0;
	cvt_ftz_szeroi_u8_f32	$s0, $s0;
	cvt_ftz_szeroi_sat_u8_f32	$s0, $s0;
	cvt_ftz_u8_f32	$s0, 0Fffffffff;
	// 
	// Next sample
	// 
	cvt_ftz_u16_f32	$s0, $s0;
	// 
	cvt_ftz_zeroi_sat_u16_f32	$s0, $s0;
	cvt_ftz_szeroi_u16_f32	$s0, $s0;
	cvt_ftz_szeroi_sat_u16_f32	$s0, $s0;
	cvt_ftz_u16_f32	$s0, 0Fffffffff;
	// 
	// Next sample
	// 
	cvt_ftz_u32_f32	$s0, $s0;
	// 
	cvt_ftz_zeroi_sat_u32_f32	$s0, $s0;
	cvt_ftz_szeroi_u32_f32	$s0, $s0;
	cvt_ftz_szeroi_sat_u32_f32	$s0, $s0;
	cvt_ftz_u32_f32	$s0, 0Fffffffff;
	// 
	// Next sample
	// 
	cvt_ftz_u64_f32	$d0, $s0;
	// 
	cvt_ftz_zeroi_sat_u64_f32	$d0, $s0;
	cvt_ftz_szeroi_u64_f32	$d0, $s0;
	cvt_ftz_szeroi_sat_u64_f32	$d0, $s0;
	cvt_ftz_u64_f32	$d0, 0Fffffffff;
	// 
	// Next sample
	// 
	cvt_ftz_s8_f32	$s0, $s0;
	// 
	cvt_ftz_zeroi_sat_s8_f32	$s0, $s0;
	cvt_ftz_szeroi_s8_f32	$s0, $s0;
	cvt_ftz_szeroi_sat_s8_f32	$s0, $s0;
	cvt_ftz_s8_f32	$s0, 0Fffffffff;
	// 
	// Next sample
	// 
	cvt_ftz_s16_f32	$s0, $s0;
	// 
	cvt_ftz_zeroi_sat_s16_f32	$s0, $s0;
	cvt_ftz_szeroi_s16_f32	$s0, $s0;
	cvt_ftz_szeroi_sat_s16_f32	$s0, $s0;
	cvt_ftz_s16_f32	$s0, 0Fffffffff;
	// 
	// Next sample
	// 
	cvt_ftz_s32_f32	$s0, $s0;
	// 
	cvt_ftz_zeroi_sat_s32_f32	$s0, $s0;
	cvt_ftz_szeroi_s32_f32	$s0, $s0;
	cvt_ftz_szeroi_sat_s32_f32	$s0, $s0;
	cvt_ftz_s32_f32	$s0, 0Fffffffff;
	// 
	// Next sample
	// 
	cvt_ftz_s64_f32	$d0, $s0;
	// 
	cvt_ftz_zeroi_sat_s64_f32	$d0, $s0;
	cvt_ftz_szeroi_s64_f32	$d0, $s0;
	cvt_ftz_szeroi_sat_s64_f32	$d0, $s0;
	cvt_ftz_s64_f32	$d0, 0Fffffffff;
	// 
	// Next sample
	// 
	cvt_ftz_f16_f32	$s0, $s0;
	// 
	cvt_ftz_f16_f32	$s0, 0Fffffffff;
	// 
	// Next sample
	// 
	cvt_ftz_b1_f32	$c0, $s0;
	// 
	cvt_ftz_b1_f32	$c0, 0Fffffffff;
	// 
	// Next sample
	// 
	cvt_u8_b1	$s0, $c0;
	// 
	cvt_u8_b1	$s0, 1;
	cvt_u8_b1	$s0, WAVESIZE;
	// 
	// Next sample
	// 
	cvt_u16_b1	$s0, $c0;
	// 
	cvt_u16_b1	$s0, 1;
	cvt_u16_b1	$s0, WAVESIZE;
	// 
	// Next sample
	// 
	cvt_u32_b1	$s0, $c0;
	// 
	cvt_u32_b1	$s0, 1;
	cvt_u32_b1	$s0, WAVESIZE;
	// 
	// Next sample
	// 
	cvt_u64_b1	$d0, $c0;
	// 
	cvt_u64_b1	$d0, 1;
	cvt_u64_b1	$d0, WAVESIZE;
	// 
	// Next sample
	// 
	cvt_s8_b1	$s0, $c0;
	// 
	cvt_s8_b1	$s0, 1;
	cvt_s8_b1	$s0, WAVESIZE;
	// 
	// Next sample
	// 
	cvt_s16_b1	$s0, $c0;
	// 
	cvt_s16_b1	$s0, 1;
	cvt_s16_b1	$s0, WAVESIZE;
	// 
	// Next sample
	// 
	cvt_s32_b1	$s0, $c0;
	// 
	cvt_s32_b1	$s0, 1;
	cvt_s32_b1	$s0, WAVESIZE;
	// 
	// Next sample
	// 
	cvt_s64_b1	$d0, $c0;
	// 
	cvt_s64_b1	$d0, 1;
	cvt_s64_b1	$d0, WAVESIZE;
	// 
	// Next sample
	// 
	cvt_f16_b1	$s0, $c0;
	// 
	cvt_f16_b1	$s0, 1;
	cvt_f16_b1	$s0, WAVESIZE;
	// 
	// Next sample
	// 
	cvt_f32_b1	$s0, $c0;
	// 
	cvt_f32_b1	$s0, 1;
	cvt_f32_b1	$s0, WAVESIZE;
	// 
	// Next sample
	// 
	ld_u8	$s0, [$d0+2];
	// 
	ld_const_u8	$s0, [$d0+2];
	ld_v2_u8	($s0, $s1), [$d0+2];
	ld_v3_u8	($s0, $s1, $s2), [$d0+2];
	ld_v4_u8	($s0, $s1, $s2, $s3), [$d0+2];
	ld_u8	$s0, [$d0+3];
	ld_u8	$s0, [$d0+5];
	ld_u8	$s0, [$d0+6];
	ld_u8	$s0, [0];
	ld_align(2)_u8	$s0, [$d0+2];
	ld_align(4)_u8	$s0, [$d0+2];
	ld_align(8)_u8	$s0, [$d0+2];
	ld_align(16)_u8	$s0, [$d0+2];
	ld_align(32)_u8	$s0, [$d0+2];
	ld_align(64)_u8	$s0, [$d0+2];
	ld_align(128)_u8	$s0, [$d0+2];
	ld_align(256)_u8	$s0, [$d0+2];
	ld_equiv(1)_u8	$s0, [$d0+2];
	ld_equiv(2)_u8	$s0, [$d0+2];
	ld_equiv(255)_u8	$s0, [$d0+2];
	ld_width(2)_u8	$s0, [$d0+2];
	ld_width(4)_u8	$s0, [$d0+2];
	ld_width(8)_u8	$s0, [$d0+2];
	ld_width(16)_u8	$s0, [$d0+2];
	ld_width(32)_u8	$s0, [$d0+2];
	ld_width(64)_u8	$s0, [$d0+2];
	ld_width(128)_u8	$s0, [$d0+2];
	ld_width(256)_u8	$s0, [$d0+2];
	ld_width(512)_u8	$s0, [$d0+2];
	ld_width(1024)_u8	$s0, [$d0+2];
	ld_width(2048)_u8	$s0, [$d0+2];
	ld_width(4096)_u8	$s0, [$d0+2];
	ld_width(8192)_u8	$s0, [$d0+2];
	ld_width(16384)_u8	$s0, [$d0+2];
	ld_width(32768)_u8	$s0, [$d0+2];
	ld_width(65536)_u8	$s0, [$d0+2];
	ld_width(131072)_u8	$s0, [$d0+2];
	ld_width(262144)_u8	$s0, [$d0+2];
	ld_width(524288)_u8	$s0, [$d0+2];
	ld_width(1048576)_u8	$s0, [$d0+2];
	ld_width(2097152)_u8	$s0, [$d0+2];
	ld_width(4194304)_u8	$s0, [$d0+2];
	ld_width(8388608)_u8	$s0, [$d0+2];
	ld_width(16777216)_u8	$s0, [$d0+2];
	ld_width(33554432)_u8	$s0, [$d0+2];
	ld_width(67108864)_u8	$s0, [$d0+2];
	ld_width(134217728)_u8	$s0, [$d0+2];
	ld_width(268435456)_u8	$s0, [$d0+2];
	ld_width(536870912)_u8	$s0, [$d0+2];
	ld_width(1073741824)_u8	$s0, [$d0+2];
	ld_width(2147483648)_u8	$s0, [$d0+2];
	ld_width(WAVESIZE)_u8	$s0, [$d0+2];
	ld_width(all)_u8	$s0, [$d0+2];
	// 
	// Next sample
	// 
	ld_global_u8	$s0, [&GlobalVar];
	// 
	ld_global_const_u8	$s0, [&GlobalVar];
	ld_v2_global_u8	($s0, $s1), [&GlobalVar];
	ld_v3_global_u8	($s0, $s1, $s2), [&GlobalVar];
	ld_v4_global_u8	($s0, $s1, $s2, $s3), [&GlobalVar];
	ld_global_u8	$s0, [$d0+2];
	ld_global_u8	$s0, [$d0+3];
	ld_global_u8	$s0, [$d0+5];
	ld_global_u8	$s0, [$d0+6];
	ld_global_u8	$s0, [0];
	ld_global_align(2)_u8	$s0, [&GlobalVar];
	ld_global_align(4)_u8	$s0, [&GlobalVar];
	ld_global_align(8)_u8	$s0, [&GlobalVar];
	ld_global_align(16)_u8	$s0, [&GlobalVar];
	ld_global_align(32)_u8	$s0, [&GlobalVar];
	ld_global_align(64)_u8	$s0, [&GlobalVar];
	ld_global_align(128)_u8	$s0, [&GlobalVar];
	ld_global_align(256)_u8	$s0, [&GlobalVar];
	ld_global_equiv(1)_u8	$s0, [&GlobalVar];
	ld_global_equiv(2)_u8	$s0, [&GlobalVar];
	ld_global_equiv(255)_u8	$s0, [&GlobalVar];
	ld_global_width(2)_u8	$s0, [&GlobalVar];
	ld_global_width(4)_u8	$s0, [&GlobalVar];
	ld_global_width(8)_u8	$s0, [&GlobalVar];
	ld_global_width(16)_u8	$s0, [&GlobalVar];
	ld_global_width(32)_u8	$s0, [&GlobalVar];
	ld_global_width(64)_u8	$s0, [&GlobalVar];
	ld_global_width(128)_u8	$s0, [&GlobalVar];
	ld_global_width(256)_u8	$s0, [&GlobalVar];
	ld_global_width(512)_u8	$s0, [&GlobalVar];
	ld_global_width(1024)_u8	$s0, [&GlobalVar];
	ld_global_width(2048)_u8	$s0, [&GlobalVar];
	ld_global_width(4096)_u8	$s0, [&GlobalVar];
	ld_global_width(8192)_u8	$s0, [&GlobalVar];
	ld_global_width(16384)_u8	$s0, [&GlobalVar];
	ld_global_width(32768)_u8	$s0, [&GlobalVar];
	ld_global_width(65536)_u8	$s0, [&GlobalVar];
	ld_global_width(131072)_u8	$s0, [&GlobalVar];
	ld_global_width(262144)_u8	$s0, [&GlobalVar];
	ld_global_width(524288)_u8	$s0, [&GlobalVar];
	ld_global_width(1048576)_u8	$s0, [&GlobalVar];
	ld_global_width(2097152)_u8	$s0, [&GlobalVar];
	ld_global_width(4194304)_u8	$s0, [&GlobalVar];
	ld_global_width(8388608)_u8	$s0, [&GlobalVar];
	ld_global_width(16777216)_u8	$s0, [&GlobalVar];
	ld_global_width(33554432)_u8	$s0, [&GlobalVar];
	ld_global_width(67108864)_u8	$s0, [&GlobalVar];
	ld_global_width(134217728)_u8	$s0, [&GlobalVar];
	ld_global_width(268435456)_u8	$s0, [&GlobalVar];
	ld_global_width(536870912)_u8	$s0, [&GlobalVar];
	ld_global_width(1073741824)_u8	$s0, [&GlobalVar];
	ld_global_width(2147483648)_u8	$s0, [&GlobalVar];
	ld_global_width(WAVESIZE)_u8	$s0, [&GlobalVar];
	ld_global_width(all)_u8	$s0, [&GlobalVar];
	// 
	// Next sample
	// 
	ld_readonly_u8	$s0, [&ReadonlyVar];
	// 
	ld_readonly_const_u8	$s0, [&ReadonlyVar];
	ld_v2_readonly_u8	($s0, $s1), [&ReadonlyVar];
	ld_v3_readonly_u8	($s0, $s1, $s2), [&ReadonlyVar];
	ld_v4_readonly_u8	($s0, $s1, $s2, $s3), [&ReadonlyVar];
	ld_readonly_u8	$s0, [$d0+2];
	ld_readonly_u8	$s0, [$d0+3];
	ld_readonly_u8	$s0, [$d0+5];
	ld_readonly_u8	$s0, [$d0+6];
	ld_readonly_u8	$s0, [0];
	ld_readonly_align(2)_u8	$s0, [&ReadonlyVar];
	ld_readonly_align(4)_u8	$s0, [&ReadonlyVar];
	ld_readonly_align(8)_u8	$s0, [&ReadonlyVar];
	ld_readonly_align(16)_u8	$s0, [&ReadonlyVar];
	ld_readonly_align(32)_u8	$s0, [&ReadonlyVar];
	ld_readonly_align(64)_u8	$s0, [&ReadonlyVar];
	ld_readonly_align(128)_u8	$s0, [&ReadonlyVar];
	ld_readonly_align(256)_u8	$s0, [&ReadonlyVar];
	ld_readonly_equiv(1)_u8	$s0, [&ReadonlyVar];
	ld_readonly_equiv(2)_u8	$s0, [&ReadonlyVar];
	ld_readonly_equiv(255)_u8	$s0, [&ReadonlyVar];
	ld_readonly_width(2)_u8	$s0, [&ReadonlyVar];
	ld_readonly_width(4)_u8	$s0, [&ReadonlyVar];
	ld_readonly_width(8)_u8	$s0, [&ReadonlyVar];
	ld_readonly_width(16)_u8	$s0, [&ReadonlyVar];
	ld_readonly_width(32)_u8	$s0, [&ReadonlyVar];
	ld_readonly_width(64)_u8	$s0, [&ReadonlyVar];
	ld_readonly_width(128)_u8	$s0, [&ReadonlyVar];
	ld_readonly_width(256)_u8	$s0, [&ReadonlyVar];
	ld_readonly_width(512)_u8	$s0, [&ReadonlyVar];
	ld_readonly_width(1024)_u8	$s0, [&ReadonlyVar];
	ld_readonly_width(2048)_u8	$s0, [&ReadonlyVar];
	ld_readonly_width(4096)_u8	$s0, [&ReadonlyVar];
	ld_readonly_width(8192)_u8	$s0, [&ReadonlyVar];
	ld_readonly_width(16384)_u8	$s0, [&ReadonlyVar];
	ld_readonly_width(32768)_u8	$s0, [&ReadonlyVar];
	ld_readonly_width(65536)_u8	$s0, [&ReadonlyVar];
	ld_readonly_width(131072)_u8	$s0, [&ReadonlyVar];
	ld_readonly_width(262144)_u8	$s0, [&ReadonlyVar];
	ld_readonly_width(524288)_u8	$s0, [&ReadonlyVar];
	ld_readonly_width(1048576)_u8	$s0, [&ReadonlyVar];
	ld_readonly_width(2097152)_u8	$s0, [&ReadonlyVar];
	ld_readonly_width(4194304)_u8	$s0, [&ReadonlyVar];
	ld_readonly_width(8388608)_u8	$s0, [&ReadonlyVar];
	ld_readonly_width(16777216)_u8	$s0, [&ReadonlyVar];
	ld_readonly_width(33554432)_u8	$s0, [&ReadonlyVar];
	ld_readonly_width(67108864)_u8	$s0, [&ReadonlyVar];
	ld_readonly_width(134217728)_u8	$s0, [&ReadonlyVar];
	ld_readonly_width(268435456)_u8	$s0, [&ReadonlyVar];
	ld_readonly_width(536870912)_u8	$s0, [&ReadonlyVar];
	ld_readonly_width(1073741824)_u8	$s0, [&ReadonlyVar];
	ld_readonly_width(2147483648)_u8	$s0, [&ReadonlyVar];
	ld_readonly_width(WAVESIZE)_u8	$s0, [&ReadonlyVar];
	ld_readonly_width(all)_u8	$s0, [&ReadonlyVar];
	// 
	// Next sample
	// 
	ld_kernarg_u8	$s0, [$d0+2];
	// 
	ld_v2_kernarg_u8	($s0, $s1), [$d0+2];
	ld_v3_kernarg_u8	($s0, $s1, $s2), [$d0+2];
	ld_v4_kernarg_u8	($s0, $s1, $s2, $s3), [$d0+2];
	ld_kernarg_u8	$s0, [$d0+3];
	ld_kernarg_u8	$s0, [$d0+5];
	ld_kernarg_u8	$s0, [$d0+6];
	ld_kernarg_u8	$s0, [0];
	ld_kernarg_align(2)_u8	$s0, [$d0+2];
	ld_kernarg_align(4)_u8	$s0, [$d0+2];
	ld_kernarg_align(8)_u8	$s0, [$d0+2];
	ld_kernarg_align(16)_u8	$s0, [$d0+2];
	ld_kernarg_align(32)_u8	$s0, [$d0+2];
	ld_kernarg_align(64)_u8	$s0, [$d0+2];
	ld_kernarg_align(128)_u8	$s0, [$d0+2];
	ld_kernarg_align(256)_u8	$s0, [$d0+2];
	ld_kernarg_equiv(1)_u8	$s0, [$d0+2];
	ld_kernarg_equiv(2)_u8	$s0, [$d0+2];
	ld_kernarg_equiv(255)_u8	$s0, [$d0+2];
	ld_kernarg_width(2)_u8	$s0, [$d0+2];
	ld_kernarg_width(4)_u8	$s0, [$d0+2];
	ld_kernarg_width(8)_u8	$s0, [$d0+2];
	ld_kernarg_width(16)_u8	$s0, [$d0+2];
	ld_kernarg_width(32)_u8	$s0, [$d0+2];
	ld_kernarg_width(64)_u8	$s0, [$d0+2];
	ld_kernarg_width(128)_u8	$s0, [$d0+2];
	ld_kernarg_width(256)_u8	$s0, [$d0+2];
	ld_kernarg_width(512)_u8	$s0, [$d0+2];
	ld_kernarg_width(1024)_u8	$s0, [$d0+2];
	ld_kernarg_width(2048)_u8	$s0, [$d0+2];
	ld_kernarg_width(4096)_u8	$s0, [$d0+2];
	ld_kernarg_width(8192)_u8	$s0, [$d0+2];
	ld_kernarg_width(16384)_u8	$s0, [$d0+2];
	ld_kernarg_width(32768)_u8	$s0, [$d0+2];
	ld_kernarg_width(65536)_u8	$s0, [$d0+2];
	ld_kernarg_width(131072)_u8	$s0, [$d0+2];
	ld_kernarg_width(262144)_u8	$s0, [$d0+2];
	ld_kernarg_width(524288)_u8	$s0, [$d0+2];
	ld_kernarg_width(1048576)_u8	$s0, [$d0+2];
	ld_kernarg_width(2097152)_u8	$s0, [$d0+2];
	ld_kernarg_width(4194304)_u8	$s0, [$d0+2];
	ld_kernarg_width(8388608)_u8	$s0, [$d0+2];
	ld_kernarg_width(16777216)_u8	$s0, [$d0+2];
	ld_kernarg_width(33554432)_u8	$s0, [$d0+2];
	ld_kernarg_width(67108864)_u8	$s0, [$d0+2];
	ld_kernarg_width(134217728)_u8	$s0, [$d0+2];
	ld_kernarg_width(268435456)_u8	$s0, [$d0+2];
	ld_kernarg_width(536870912)_u8	$s0, [$d0+2];
	ld_kernarg_width(1073741824)_u8	$s0, [$d0+2];
	ld_kernarg_width(2147483648)_u8	$s0, [$d0+2];
	ld_kernarg_width(WAVESIZE)_u8	$s0, [$d0+2];
	ld_kernarg_width(all)_u8	$s0, [$d0+2];
	// 
	// Next sample
	// 
	ld_group_u8	$s0, [&GroupVar];
	// 
	ld_v2_group_u8	($s0, $s1), [&GroupVar];
	ld_v3_group_u8	($s0, $s1, $s2), [&GroupVar];
	ld_v4_group_u8	($s0, $s1, $s2, $s3), [&GroupVar];
	ld_group_u8	$s0, [$s0+2];
	ld_group_u8	$s0, [$s0+3];
	ld_group_u8	$s0, [$s0+5];
	ld_group_u8	$s0, [$s0+6];
	ld_group_u8	$s0, [0];
	ld_group_align(2)_u8	$s0, [&GroupVar];
	ld_group_align(4)_u8	$s0, [&GroupVar];
	ld_group_align(8)_u8	$s0, [&GroupVar];
	ld_group_align(16)_u8	$s0, [&GroupVar];
	ld_group_align(32)_u8	$s0, [&GroupVar];
	ld_group_align(64)_u8	$s0, [&GroupVar];
	ld_group_align(128)_u8	$s0, [&GroupVar];
	ld_group_align(256)_u8	$s0, [&GroupVar];
	ld_group_equiv(1)_u8	$s0, [&GroupVar];
	ld_group_equiv(2)_u8	$s0, [&GroupVar];
	ld_group_equiv(255)_u8	$s0, [&GroupVar];
	ld_group_width(2)_u8	$s0, [&GroupVar];
	ld_group_width(4)_u8	$s0, [&GroupVar];
	ld_group_width(8)_u8	$s0, [&GroupVar];
	ld_group_width(16)_u8	$s0, [&GroupVar];
	ld_group_width(32)_u8	$s0, [&GroupVar];
	ld_group_width(64)_u8	$s0, [&GroupVar];
	ld_group_width(128)_u8	$s0, [&GroupVar];
	ld_group_width(256)_u8	$s0, [&GroupVar];
	ld_group_width(512)_u8	$s0, [&GroupVar];
	ld_group_width(1024)_u8	$s0, [&GroupVar];
	ld_group_width(2048)_u8	$s0, [&GroupVar];
	ld_group_width(4096)_u8	$s0, [&GroupVar];
	ld_group_width(8192)_u8	$s0, [&GroupVar];
	ld_group_width(16384)_u8	$s0, [&GroupVar];
	ld_group_width(32768)_u8	$s0, [&GroupVar];
	ld_group_width(65536)_u8	$s0, [&GroupVar];
	ld_group_width(131072)_u8	$s0, [&GroupVar];
	ld_group_width(262144)_u8	$s0, [&GroupVar];
	ld_group_width(524288)_u8	$s0, [&GroupVar];
	ld_group_width(1048576)_u8	$s0, [&GroupVar];
	ld_group_width(2097152)_u8	$s0, [&GroupVar];
	ld_group_width(4194304)_u8	$s0, [&GroupVar];
	ld_group_width(8388608)_u8	$s0, [&GroupVar];
	ld_group_width(16777216)_u8	$s0, [&GroupVar];
	ld_group_width(33554432)_u8	$s0, [&GroupVar];
	ld_group_width(67108864)_u8	$s0, [&GroupVar];
	ld_group_width(134217728)_u8	$s0, [&GroupVar];
	ld_group_width(268435456)_u8	$s0, [&GroupVar];
	ld_group_width(536870912)_u8	$s0, [&GroupVar];
	ld_group_width(1073741824)_u8	$s0, [&GroupVar];
	ld_group_width(2147483648)_u8	$s0, [&GroupVar];
	ld_group_width(WAVESIZE)_u8	$s0, [&GroupVar];
	ld_group_width(all)_u8	$s0, [&GroupVar];
	// 
	// Next sample
	// 
	ld_private_u8	$s0, [&PrivateVar];
	// 
	ld_v2_private_u8	($s0, $s1), [&PrivateVar];
	ld_v3_private_u8	($s0, $s1, $s2), [&PrivateVar];
	ld_v4_private_u8	($s0, $s1, $s2, $s3), [&PrivateVar];
	ld_private_u8	$s0, [$s0+2];
	ld_private_u8	$s0, [$s0+3];
	ld_private_u8	$s0, [$s0+5];
	ld_private_u8	$s0, [$s0+6];
	ld_private_u8	$s0, [0];
	ld_private_align(2)_u8	$s0, [&PrivateVar];
	ld_private_align(4)_u8	$s0, [&PrivateVar];
	ld_private_align(8)_u8	$s0, [&PrivateVar];
	ld_private_align(16)_u8	$s0, [&PrivateVar];
	ld_private_align(32)_u8	$s0, [&PrivateVar];
	ld_private_align(64)_u8	$s0, [&PrivateVar];
	ld_private_align(128)_u8	$s0, [&PrivateVar];
	ld_private_align(256)_u8	$s0, [&PrivateVar];
	ld_private_equiv(1)_u8	$s0, [&PrivateVar];
	ld_private_equiv(2)_u8	$s0, [&PrivateVar];
	ld_private_equiv(255)_u8	$s0, [&PrivateVar];
	ld_private_width(2)_u8	$s0, [&PrivateVar];
	ld_private_width(4)_u8	$s0, [&PrivateVar];
	ld_private_width(8)_u8	$s0, [&PrivateVar];
	ld_private_width(16)_u8	$s0, [&PrivateVar];
	ld_private_width(32)_u8	$s0, [&PrivateVar];
	ld_private_width(64)_u8	$s0, [&PrivateVar];
	ld_private_width(128)_u8	$s0, [&PrivateVar];
	ld_private_width(256)_u8	$s0, [&PrivateVar];
	ld_private_width(512)_u8	$s0, [&PrivateVar];
	ld_private_width(1024)_u8	$s0, [&PrivateVar];
	ld_private_width(2048)_u8	$s0, [&PrivateVar];
	ld_private_width(4096)_u8	$s0, [&PrivateVar];
	ld_private_width(8192)_u8	$s0, [&PrivateVar];
	ld_private_width(16384)_u8	$s0, [&PrivateVar];
	ld_private_width(32768)_u8	$s0, [&PrivateVar];
	ld_private_width(65536)_u8	$s0, [&PrivateVar];
	ld_private_width(131072)_u8	$s0, [&PrivateVar];
	ld_private_width(262144)_u8	$s0, [&PrivateVar];
	ld_private_width(524288)_u8	$s0, [&PrivateVar];
	ld_private_width(1048576)_u8	$s0, [&PrivateVar];
	ld_private_width(2097152)_u8	$s0, [&PrivateVar];
	ld_private_width(4194304)_u8	$s0, [&PrivateVar];
	ld_private_width(8388608)_u8	$s0, [&PrivateVar];
	ld_private_width(16777216)_u8	$s0, [&PrivateVar];
	ld_private_width(33554432)_u8	$s0, [&PrivateVar];
	ld_private_width(67108864)_u8	$s0, [&PrivateVar];
	ld_private_width(134217728)_u8	$s0, [&PrivateVar];
	ld_private_width(268435456)_u8	$s0, [&PrivateVar];
	ld_private_width(536870912)_u8	$s0, [&PrivateVar];
	ld_private_width(1073741824)_u8	$s0, [&PrivateVar];
	ld_private_width(2147483648)_u8	$s0, [&PrivateVar];
	ld_private_width(WAVESIZE)_u8	$s0, [&PrivateVar];
	ld_private_width(all)_u8	$s0, [&PrivateVar];
	// 
	// Next sample
	// 
	ld_spill_u8	$s0, [%SpillVar];
	// 
	ld_v2_spill_u8	($s0, $s1), [%SpillVar];
	ld_v3_spill_u8	($s0, $s1, $s2), [%SpillVar];
	ld_v4_spill_u8	($s0, $s1, $s2, $s3), [%SpillVar];
	ld_spill_align(2)_u8	$s0, [%SpillVar];
	ld_spill_align(4)_u8	$s0, [%SpillVar];
	ld_spill_align(8)_u8	$s0, [%SpillVar];
	ld_spill_align(16)_u8	$s0, [%SpillVar];
	ld_spill_align(32)_u8	$s0, [%SpillVar];
	ld_spill_align(64)_u8	$s0, [%SpillVar];
	ld_spill_align(128)_u8	$s0, [%SpillVar];
	ld_spill_align(256)_u8	$s0, [%SpillVar];
	ld_spill_equiv(1)_u8	$s0, [%SpillVar];
	ld_spill_equiv(2)_u8	$s0, [%SpillVar];
	ld_spill_equiv(255)_u8	$s0, [%SpillVar];
	ld_spill_width(2)_u8	$s0, [%SpillVar];
	ld_spill_width(4)_u8	$s0, [%SpillVar];
	ld_spill_width(8)_u8	$s0, [%SpillVar];
	ld_spill_width(16)_u8	$s0, [%SpillVar];
	ld_spill_width(32)_u8	$s0, [%SpillVar];
	ld_spill_width(64)_u8	$s0, [%SpillVar];
	ld_spill_width(128)_u8	$s0, [%SpillVar];
	ld_spill_width(256)_u8	$s0, [%SpillVar];
	ld_spill_width(512)_u8	$s0, [%SpillVar];
	ld_spill_width(1024)_u8	$s0, [%SpillVar];
	ld_spill_width(2048)_u8	$s0, [%SpillVar];
	ld_spill_width(4096)_u8	$s0, [%SpillVar];
	ld_spill_width(8192)_u8	$s0, [%SpillVar];
	ld_spill_width(16384)_u8	$s0, [%SpillVar];
	ld_spill_width(32768)_u8	$s0, [%SpillVar];
	ld_spill_width(65536)_u8	$s0, [%SpillVar];
	ld_spill_width(131072)_u8	$s0, [%SpillVar];
	ld_spill_width(262144)_u8	$s0, [%SpillVar];
	ld_spill_width(524288)_u8	$s0, [%SpillVar];
	ld_spill_width(1048576)_u8	$s0, [%SpillVar];
	ld_spill_width(2097152)_u8	$s0, [%SpillVar];
	ld_spill_width(4194304)_u8	$s0, [%SpillVar];
	ld_spill_width(8388608)_u8	$s0, [%SpillVar];
	ld_spill_width(16777216)_u8	$s0, [%SpillVar];
	ld_spill_width(33554432)_u8	$s0, [%SpillVar];
	ld_spill_width(67108864)_u8	$s0, [%SpillVar];
	ld_spill_width(134217728)_u8	$s0, [%SpillVar];
	ld_spill_width(268435456)_u8	$s0, [%SpillVar];
	ld_spill_width(536870912)_u8	$s0, [%SpillVar];
	ld_spill_width(1073741824)_u8	$s0, [%SpillVar];
	ld_spill_width(2147483648)_u8	$s0, [%SpillVar];
	ld_spill_width(WAVESIZE)_u8	$s0, [%SpillVar];
	ld_spill_width(all)_u8	$s0, [%SpillVar];
	// 
	// Next sample
	// 
	ld_u16	$s0, [$d0+2];
	// 
	ld_const_u16	$s0, [$d0+2];
	ld_v2_u16	($s0, $s1), [$d0+2];
	ld_v3_u16	($s0, $s1, $s2), [$d0+2];
	ld_v4_u16	($s0, $s1, $s2, $s3), [$d0+2];
	ld_u16	$s0, [$d0+3];
	ld_u16	$s0, [$d0+5];
	ld_u16	$s0, [$d0+6];
	ld_u16	$s0, [0];
	ld_align(2)_u16	$s0, [$d0+2];
	ld_align(4)_u16	$s0, [$d0+2];
	ld_align(8)_u16	$s0, [$d0+2];
	ld_align(16)_u16	$s0, [$d0+2];
	ld_align(32)_u16	$s0, [$d0+2];
	ld_align(64)_u16	$s0, [$d0+2];
	ld_align(128)_u16	$s0, [$d0+2];
	ld_align(256)_u16	$s0, [$d0+2];
	ld_equiv(1)_u16	$s0, [$d0+2];
	ld_equiv(2)_u16	$s0, [$d0+2];
	ld_equiv(255)_u16	$s0, [$d0+2];
	ld_width(2)_u16	$s0, [$d0+2];
	ld_width(4)_u16	$s0, [$d0+2];
	ld_width(8)_u16	$s0, [$d0+2];
	ld_width(16)_u16	$s0, [$d0+2];
	ld_width(32)_u16	$s0, [$d0+2];
	ld_width(64)_u16	$s0, [$d0+2];
	ld_width(128)_u16	$s0, [$d0+2];
	ld_width(256)_u16	$s0, [$d0+2];
	ld_width(512)_u16	$s0, [$d0+2];
	ld_width(1024)_u16	$s0, [$d0+2];
	ld_width(2048)_u16	$s0, [$d0+2];
	ld_width(4096)_u16	$s0, [$d0+2];
	ld_width(8192)_u16	$s0, [$d0+2];
	ld_width(16384)_u16	$s0, [$d0+2];
	ld_width(32768)_u16	$s0, [$d0+2];
	ld_width(65536)_u16	$s0, [$d0+2];
	ld_width(131072)_u16	$s0, [$d0+2];
	ld_width(262144)_u16	$s0, [$d0+2];
	ld_width(524288)_u16	$s0, [$d0+2];
	ld_width(1048576)_u16	$s0, [$d0+2];
	ld_width(2097152)_u16	$s0, [$d0+2];
	ld_width(4194304)_u16	$s0, [$d0+2];
	ld_width(8388608)_u16	$s0, [$d0+2];
	ld_width(16777216)_u16	$s0, [$d0+2];
	ld_width(33554432)_u16	$s0, [$d0+2];
	ld_width(67108864)_u16	$s0, [$d0+2];
	ld_width(134217728)_u16	$s0, [$d0+2];
	ld_width(268435456)_u16	$s0, [$d0+2];
	ld_width(536870912)_u16	$s0, [$d0+2];
	ld_width(1073741824)_u16	$s0, [$d0+2];
	ld_width(2147483648)_u16	$s0, [$d0+2];
	ld_width(WAVESIZE)_u16	$s0, [$d0+2];
	ld_width(all)_u16	$s0, [$d0+2];
	// 
	// Next sample
	// 
	ld_global_u16	$s0, [&GlobalVar];
	// 
	ld_global_const_u16	$s0, [&GlobalVar];
	ld_v2_global_u16	($s0, $s1), [&GlobalVar];
	ld_v3_global_u16	($s0, $s1, $s2), [&GlobalVar];
	ld_v4_global_u16	($s0, $s1, $s2, $s3), [&GlobalVar];
	ld_global_u16	$s0, [$d0+2];
	ld_global_u16	$s0, [$d0+3];
	ld_global_u16	$s0, [$d0+5];
	ld_global_u16	$s0, [$d0+6];
	ld_global_u16	$s0, [0];
	ld_global_align(2)_u16	$s0, [&GlobalVar];
	ld_global_align(4)_u16	$s0, [&GlobalVar];
	ld_global_align(8)_u16	$s0, [&GlobalVar];
	ld_global_align(16)_u16	$s0, [&GlobalVar];
	ld_global_align(32)_u16	$s0, [&GlobalVar];
	ld_global_align(64)_u16	$s0, [&GlobalVar];
	ld_global_align(128)_u16	$s0, [&GlobalVar];
	ld_global_align(256)_u16	$s0, [&GlobalVar];
	ld_global_equiv(1)_u16	$s0, [&GlobalVar];
	ld_global_equiv(2)_u16	$s0, [&GlobalVar];
	ld_global_equiv(255)_u16	$s0, [&GlobalVar];
	ld_global_width(2)_u16	$s0, [&GlobalVar];
	ld_global_width(4)_u16	$s0, [&GlobalVar];
	ld_global_width(8)_u16	$s0, [&GlobalVar];
	ld_global_width(16)_u16	$s0, [&GlobalVar];
	ld_global_width(32)_u16	$s0, [&GlobalVar];
	ld_global_width(64)_u16	$s0, [&GlobalVar];
	ld_global_width(128)_u16	$s0, [&GlobalVar];
	ld_global_width(256)_u16	$s0, [&GlobalVar];
	ld_global_width(512)_u16	$s0, [&GlobalVar];
	ld_global_width(1024)_u16	$s0, [&GlobalVar];
	ld_global_width(2048)_u16	$s0, [&GlobalVar];
	ld_global_width(4096)_u16	$s0, [&GlobalVar];
	ld_global_width(8192)_u16	$s0, [&GlobalVar];
	ld_global_width(16384)_u16	$s0, [&GlobalVar];
	ld_global_width(32768)_u16	$s0, [&GlobalVar];
	ld_global_width(65536)_u16	$s0, [&GlobalVar];
	ld_global_width(131072)_u16	$s0, [&GlobalVar];
	ld_global_width(262144)_u16	$s0, [&GlobalVar];
	ld_global_width(524288)_u16	$s0, [&GlobalVar];
	ld_global_width(1048576)_u16	$s0, [&GlobalVar];
	ld_global_width(2097152)_u16	$s0, [&GlobalVar];
	ld_global_width(4194304)_u16	$s0, [&GlobalVar];
	ld_global_width(8388608)_u16	$s0, [&GlobalVar];
	ld_global_width(16777216)_u16	$s0, [&GlobalVar];
	ld_global_width(33554432)_u16	$s0, [&GlobalVar];
	ld_global_width(67108864)_u16	$s0, [&GlobalVar];
	ld_global_width(134217728)_u16	$s0, [&GlobalVar];
	ld_global_width(268435456)_u16	$s0, [&GlobalVar];
	ld_global_width(536870912)_u16	$s0, [&GlobalVar];
	ld_global_width(1073741824)_u16	$s0, [&GlobalVar];
	ld_global_width(2147483648)_u16	$s0, [&GlobalVar];
	ld_global_width(WAVESIZE)_u16	$s0, [&GlobalVar];
	ld_global_width(all)_u16	$s0, [&GlobalVar];
	// 
	// Next sample
	// 
	ld_readonly_u16	$s0, [&ReadonlyVar];
	// 
	ld_readonly_const_u16	$s0, [&ReadonlyVar];
	ld_v2_readonly_u16	($s0, $s1), [&ReadonlyVar];
	ld_v3_readonly_u16	($s0, $s1, $s2), [&ReadonlyVar];
	ld_v4_readonly_u16	($s0, $s1, $s2, $s3), [&ReadonlyVar];
	ld_readonly_u16	$s0, [$d0+2];
	ld_readonly_u16	$s0, [$d0+3];
	ld_readonly_u16	$s0, [$d0+5];
	ld_readonly_u16	$s0, [$d0+6];
	ld_readonly_u16	$s0, [0];
	ld_readonly_align(2)_u16	$s0, [&ReadonlyVar];
	ld_readonly_align(4)_u16	$s0, [&ReadonlyVar];
	ld_readonly_align(8)_u16	$s0, [&ReadonlyVar];
	ld_readonly_align(16)_u16	$s0, [&ReadonlyVar];
	ld_readonly_align(32)_u16	$s0, [&ReadonlyVar];
	ld_readonly_align(64)_u16	$s0, [&ReadonlyVar];
	ld_readonly_align(128)_u16	$s0, [&ReadonlyVar];
	ld_readonly_align(256)_u16	$s0, [&ReadonlyVar];
	ld_readonly_equiv(1)_u16	$s0, [&ReadonlyVar];
	ld_readonly_equiv(2)_u16	$s0, [&ReadonlyVar];
	ld_readonly_equiv(255)_u16	$s0, [&ReadonlyVar];
	ld_readonly_width(2)_u16	$s0, [&ReadonlyVar];
	ld_readonly_width(4)_u16	$s0, [&ReadonlyVar];
	ld_readonly_width(8)_u16	$s0, [&ReadonlyVar];
	ld_readonly_width(16)_u16	$s0, [&ReadonlyVar];
	ld_readonly_width(32)_u16	$s0, [&ReadonlyVar];
	ld_readonly_width(64)_u16	$s0, [&ReadonlyVar];
	ld_readonly_width(128)_u16	$s0, [&ReadonlyVar];
	ld_readonly_width(256)_u16	$s0, [&ReadonlyVar];
	ld_readonly_width(512)_u16	$s0, [&ReadonlyVar];
	ld_readonly_width(1024)_u16	$s0, [&ReadonlyVar];
	ld_readonly_width(2048)_u16	$s0, [&ReadonlyVar];
	ld_readonly_width(4096)_u16	$s0, [&ReadonlyVar];
	ld_readonly_width(8192)_u16	$s0, [&ReadonlyVar];
	ld_readonly_width(16384)_u16	$s0, [&ReadonlyVar];
	ld_readonly_width(32768)_u16	$s0, [&ReadonlyVar];
	ld_readonly_width(65536)_u16	$s0, [&ReadonlyVar];
	ld_readonly_width(131072)_u16	$s0, [&ReadonlyVar];
	ld_readonly_width(262144)_u16	$s0, [&ReadonlyVar];
	ld_readonly_width(524288)_u16	$s0, [&ReadonlyVar];
	ld_readonly_width(1048576)_u16	$s0, [&ReadonlyVar];
	ld_readonly_width(2097152)_u16	$s0, [&ReadonlyVar];
	ld_readonly_width(4194304)_u16	$s0, [&ReadonlyVar];
	ld_readonly_width(8388608)_u16	$s0, [&ReadonlyVar];
	ld_readonly_width(16777216)_u16	$s0, [&ReadonlyVar];
	ld_readonly_width(33554432)_u16	$s0, [&ReadonlyVar];
	ld_readonly_width(67108864)_u16	$s0, [&ReadonlyVar];
	ld_readonly_width(134217728)_u16	$s0, [&ReadonlyVar];
	ld_readonly_width(268435456)_u16	$s0, [&ReadonlyVar];
	ld_readonly_width(536870912)_u16	$s0, [&ReadonlyVar];
	ld_readonly_width(1073741824)_u16	$s0, [&ReadonlyVar];
	ld_readonly_width(2147483648)_u16	$s0, [&ReadonlyVar];
	ld_readonly_width(WAVESIZE)_u16	$s0, [&ReadonlyVar];
	ld_readonly_width(all)_u16	$s0, [&ReadonlyVar];
	// 
	// Next sample
	// 
	ld_kernarg_u16	$s0, [$d0+2];
	// 
	ld_v2_kernarg_u16	($s0, $s1), [$d0+2];
	ld_v3_kernarg_u16	($s0, $s1, $s2), [$d0+2];
	ld_v4_kernarg_u16	($s0, $s1, $s2, $s3), [$d0+2];
	ld_kernarg_u16	$s0, [$d0+3];
	ld_kernarg_u16	$s0, [$d0+5];
	ld_kernarg_u16	$s0, [$d0+6];
	ld_kernarg_u16	$s0, [0];
	ld_kernarg_align(2)_u16	$s0, [$d0+2];
	ld_kernarg_align(4)_u16	$s0, [$d0+2];
	ld_kernarg_align(8)_u16	$s0, [$d0+2];
	ld_kernarg_align(16)_u16	$s0, [$d0+2];
	ld_kernarg_align(32)_u16	$s0, [$d0+2];
	ld_kernarg_align(64)_u16	$s0, [$d0+2];
	ld_kernarg_align(128)_u16	$s0, [$d0+2];
	ld_kernarg_align(256)_u16	$s0, [$d0+2];
	ld_kernarg_equiv(1)_u16	$s0, [$d0+2];
	ld_kernarg_equiv(2)_u16	$s0, [$d0+2];
	ld_kernarg_equiv(255)_u16	$s0, [$d0+2];
	ld_kernarg_width(2)_u16	$s0, [$d0+2];
	ld_kernarg_width(4)_u16	$s0, [$d0+2];
	ld_kernarg_width(8)_u16	$s0, [$d0+2];
	ld_kernarg_width(16)_u16	$s0, [$d0+2];
	ld_kernarg_width(32)_u16	$s0, [$d0+2];
	ld_kernarg_width(64)_u16	$s0, [$d0+2];
	ld_kernarg_width(128)_u16	$s0, [$d0+2];
	ld_kernarg_width(256)_u16	$s0, [$d0+2];
	ld_kernarg_width(512)_u16	$s0, [$d0+2];
	ld_kernarg_width(1024)_u16	$s0, [$d0+2];
	ld_kernarg_width(2048)_u16	$s0, [$d0+2];
	ld_kernarg_width(4096)_u16	$s0, [$d0+2];
	ld_kernarg_width(8192)_u16	$s0, [$d0+2];
	ld_kernarg_width(16384)_u16	$s0, [$d0+2];
	ld_kernarg_width(32768)_u16	$s0, [$d0+2];
	ld_kernarg_width(65536)_u16	$s0, [$d0+2];
	ld_kernarg_width(131072)_u16	$s0, [$d0+2];
	ld_kernarg_width(262144)_u16	$s0, [$d0+2];
	ld_kernarg_width(524288)_u16	$s0, [$d0+2];
	ld_kernarg_width(1048576)_u16	$s0, [$d0+2];
	ld_kernarg_width(2097152)_u16	$s0, [$d0+2];
	ld_kernarg_width(4194304)_u16	$s0, [$d0+2];
	ld_kernarg_width(8388608)_u16	$s0, [$d0+2];
	ld_kernarg_width(16777216)_u16	$s0, [$d0+2];
	ld_kernarg_width(33554432)_u16	$s0, [$d0+2];
	ld_kernarg_width(67108864)_u16	$s0, [$d0+2];
	ld_kernarg_width(134217728)_u16	$s0, [$d0+2];
	ld_kernarg_width(268435456)_u16	$s0, [$d0+2];
	ld_kernarg_width(536870912)_u16	$s0, [$d0+2];
	ld_kernarg_width(1073741824)_u16	$s0, [$d0+2];
	ld_kernarg_width(2147483648)_u16	$s0, [$d0+2];
	ld_kernarg_width(WAVESIZE)_u16	$s0, [$d0+2];
	ld_kernarg_width(all)_u16	$s0, [$d0+2];
	// 
	// Next sample
	// 
	ld_group_u16	$s0, [&GroupVar];
	// 
	ld_v2_group_u16	($s0, $s1), [&GroupVar];
	ld_v3_group_u16	($s0, $s1, $s2), [&GroupVar];
	ld_v4_group_u16	($s0, $s1, $s2, $s3), [&GroupVar];
	ld_group_u16	$s0, [$s0+2];
	ld_group_u16	$s0, [$s0+3];
	ld_group_u16	$s0, [$s0+5];
	ld_group_u16	$s0, [$s0+6];
	ld_group_u16	$s0, [0];
	ld_group_align(2)_u16	$s0, [&GroupVar];
	ld_group_align(4)_u16	$s0, [&GroupVar];
	ld_group_align(8)_u16	$s0, [&GroupVar];
	ld_group_align(16)_u16	$s0, [&GroupVar];
	ld_group_align(32)_u16	$s0, [&GroupVar];
	ld_group_align(64)_u16	$s0, [&GroupVar];
	ld_group_align(128)_u16	$s0, [&GroupVar];
	ld_group_align(256)_u16	$s0, [&GroupVar];
	ld_group_equiv(1)_u16	$s0, [&GroupVar];
	ld_group_equiv(2)_u16	$s0, [&GroupVar];
	ld_group_equiv(255)_u16	$s0, [&GroupVar];
	ld_group_width(2)_u16	$s0, [&GroupVar];
	ld_group_width(4)_u16	$s0, [&GroupVar];
	ld_group_width(8)_u16	$s0, [&GroupVar];
	ld_group_width(16)_u16	$s0, [&GroupVar];
	ld_group_width(32)_u16	$s0, [&GroupVar];
	ld_group_width(64)_u16	$s0, [&GroupVar];
	ld_group_width(128)_u16	$s0, [&GroupVar];
	ld_group_width(256)_u16	$s0, [&GroupVar];
	ld_group_width(512)_u16	$s0, [&GroupVar];
	ld_group_width(1024)_u16	$s0, [&GroupVar];
	ld_group_width(2048)_u16	$s0, [&GroupVar];
	ld_group_width(4096)_u16	$s0, [&GroupVar];
	ld_group_width(8192)_u16	$s0, [&GroupVar];
	ld_group_width(16384)_u16	$s0, [&GroupVar];
	ld_group_width(32768)_u16	$s0, [&GroupVar];
	ld_group_width(65536)_u16	$s0, [&GroupVar];
	ld_group_width(131072)_u16	$s0, [&GroupVar];
	ld_group_width(262144)_u16	$s0, [&GroupVar];
	ld_group_width(524288)_u16	$s0, [&GroupVar];
	ld_group_width(1048576)_u16	$s0, [&GroupVar];
	ld_group_width(2097152)_u16	$s0, [&GroupVar];
	ld_group_width(4194304)_u16	$s0, [&GroupVar];
	ld_group_width(8388608)_u16	$s0, [&GroupVar];
	ld_group_width(16777216)_u16	$s0, [&GroupVar];
	ld_group_width(33554432)_u16	$s0, [&GroupVar];
	ld_group_width(67108864)_u16	$s0, [&GroupVar];
	ld_group_width(134217728)_u16	$s0, [&GroupVar];
	ld_group_width(268435456)_u16	$s0, [&GroupVar];
	ld_group_width(536870912)_u16	$s0, [&GroupVar];
	ld_group_width(1073741824)_u16	$s0, [&GroupVar];
	ld_group_width(2147483648)_u16	$s0, [&GroupVar];
	ld_group_width(WAVESIZE)_u16	$s0, [&GroupVar];
	ld_group_width(all)_u16	$s0, [&GroupVar];
	// 
	// Next sample
	// 
	ld_private_u16	$s0, [&PrivateVar];
	// 
	ld_v2_private_u16	($s0, $s1), [&PrivateVar];
	ld_v3_private_u16	($s0, $s1, $s2), [&PrivateVar];
	ld_v4_private_u16	($s0, $s1, $s2, $s3), [&PrivateVar];
	ld_private_u16	$s0, [$s0+2];
	ld_private_u16	$s0, [$s0+3];
	ld_private_u16	$s0, [$s0+5];
	ld_private_u16	$s0, [$s0+6];
	ld_private_u16	$s0, [0];
	ld_private_align(2)_u16	$s0, [&PrivateVar];
	ld_private_align(4)_u16	$s0, [&PrivateVar];
	ld_private_align(8)_u16	$s0, [&PrivateVar];
	ld_private_align(16)_u16	$s0, [&PrivateVar];
	ld_private_align(32)_u16	$s0, [&PrivateVar];
	ld_private_align(64)_u16	$s0, [&PrivateVar];
	ld_private_align(128)_u16	$s0, [&PrivateVar];
	ld_private_align(256)_u16	$s0, [&PrivateVar];
	ld_private_equiv(1)_u16	$s0, [&PrivateVar];
	ld_private_equiv(2)_u16	$s0, [&PrivateVar];
	ld_private_equiv(255)_u16	$s0, [&PrivateVar];
	ld_private_width(2)_u16	$s0, [&PrivateVar];
	ld_private_width(4)_u16	$s0, [&PrivateVar];
	ld_private_width(8)_u16	$s0, [&PrivateVar];
	ld_private_width(16)_u16	$s0, [&PrivateVar];
	ld_private_width(32)_u16	$s0, [&PrivateVar];
	ld_private_width(64)_u16	$s0, [&PrivateVar];
	ld_private_width(128)_u16	$s0, [&PrivateVar];
	ld_private_width(256)_u16	$s0, [&PrivateVar];
	ld_private_width(512)_u16	$s0, [&PrivateVar];
	ld_private_width(1024)_u16	$s0, [&PrivateVar];
	ld_private_width(2048)_u16	$s0, [&PrivateVar];
	ld_private_width(4096)_u16	$s0, [&PrivateVar];
	ld_private_width(8192)_u16	$s0, [&PrivateVar];
	ld_private_width(16384)_u16	$s0, [&PrivateVar];
	ld_private_width(32768)_u16	$s0, [&PrivateVar];
	ld_private_width(65536)_u16	$s0, [&PrivateVar];
	ld_private_width(131072)_u16	$s0, [&PrivateVar];
	ld_private_width(262144)_u16	$s0, [&PrivateVar];
	ld_private_width(524288)_u16	$s0, [&PrivateVar];
	ld_private_width(1048576)_u16	$s0, [&PrivateVar];
	ld_private_width(2097152)_u16	$s0, [&PrivateVar];
	ld_private_width(4194304)_u16	$s0, [&PrivateVar];
	ld_private_width(8388608)_u16	$s0, [&PrivateVar];
	ld_private_width(16777216)_u16	$s0, [&PrivateVar];
	ld_private_width(33554432)_u16	$s0, [&PrivateVar];
	ld_private_width(67108864)_u16	$s0, [&PrivateVar];
	ld_private_width(134217728)_u16	$s0, [&PrivateVar];
	ld_private_width(268435456)_u16	$s0, [&PrivateVar];
	ld_private_width(536870912)_u16	$s0, [&PrivateVar];
	ld_private_width(1073741824)_u16	$s0, [&PrivateVar];
	ld_private_width(2147483648)_u16	$s0, [&PrivateVar];
	ld_private_width(WAVESIZE)_u16	$s0, [&PrivateVar];
	ld_private_width(all)_u16	$s0, [&PrivateVar];
	// 
	// Next sample
	// 
	ld_spill_u16	$s0, [%SpillVar];
	// 
	ld_v2_spill_u16	($s0, $s1), [%SpillVar];
	ld_v3_spill_u16	($s0, $s1, $s2), [%SpillVar];
	ld_v4_spill_u16	($s0, $s1, $s2, $s3), [%SpillVar];
	ld_spill_align(2)_u16	$s0, [%SpillVar];
	ld_spill_align(4)_u16	$s0, [%SpillVar];
	ld_spill_align(8)_u16	$s0, [%SpillVar];
	ld_spill_align(16)_u16	$s0, [%SpillVar];
	ld_spill_align(32)_u16	$s0, [%SpillVar];
	ld_spill_align(64)_u16	$s0, [%SpillVar];
	ld_spill_align(128)_u16	$s0, [%SpillVar];
	ld_spill_align(256)_u16	$s0, [%SpillVar];
	ld_spill_equiv(1)_u16	$s0, [%SpillVar];
	ld_spill_equiv(2)_u16	$s0, [%SpillVar];
	ld_spill_equiv(255)_u16	$s0, [%SpillVar];
	ld_spill_width(2)_u16	$s0, [%SpillVar];
	ld_spill_width(4)_u16	$s0, [%SpillVar];
	ld_spill_width(8)_u16	$s0, [%SpillVar];
	ld_spill_width(16)_u16	$s0, [%SpillVar];
	ld_spill_width(32)_u16	$s0, [%SpillVar];
	ld_spill_width(64)_u16	$s0, [%SpillVar];
	ld_spill_width(128)_u16	$s0, [%SpillVar];
	ld_spill_width(256)_u16	$s0, [%SpillVar];
	ld_spill_width(512)_u16	$s0, [%SpillVar];
	ld_spill_width(1024)_u16	$s0, [%SpillVar];
	ld_spill_width(2048)_u16	$s0, [%SpillVar];
	ld_spill_width(4096)_u16	$s0, [%SpillVar];
	ld_spill_width(8192)_u16	$s0, [%SpillVar];
	ld_spill_width(16384)_u16	$s0, [%SpillVar];
	ld_spill_width(32768)_u16	$s0, [%SpillVar];
	ld_spill_width(65536)_u16	$s0, [%SpillVar];
	ld_spill_width(131072)_u16	$s0, [%SpillVar];
	ld_spill_width(262144)_u16	$s0, [%SpillVar];
	ld_spill_width(524288)_u16	$s0, [%SpillVar];
	ld_spill_width(1048576)_u16	$s0, [%SpillVar];
	ld_spill_width(2097152)_u16	$s0, [%SpillVar];
	ld_spill_width(4194304)_u16	$s0, [%SpillVar];
	ld_spill_width(8388608)_u16	$s0, [%SpillVar];
	ld_spill_width(16777216)_u16	$s0, [%SpillVar];
	ld_spill_width(33554432)_u16	$s0, [%SpillVar];
	ld_spill_width(67108864)_u16	$s0, [%SpillVar];
	ld_spill_width(134217728)_u16	$s0, [%SpillVar];
	ld_spill_width(268435456)_u16	$s0, [%SpillVar];
	ld_spill_width(536870912)_u16	$s0, [%SpillVar];
	ld_spill_width(1073741824)_u16	$s0, [%SpillVar];
	ld_spill_width(2147483648)_u16	$s0, [%SpillVar];
	ld_spill_width(WAVESIZE)_u16	$s0, [%SpillVar];
	ld_spill_width(all)_u16	$s0, [%SpillVar];
	// 
	// Next sample
	// 
	ld_u32	$s0, [$d0+2];
	// 
	ld_const_u32	$s0, [$d0+2];
	ld_v2_u32	($s0, $s1), [$d0+2];
	ld_v3_u32	($s0, $s1, $s2), [$d0+2];
	ld_v4_u32	($s0, $s1, $s2, $s3), [$d0+2];
	ld_u32	$s0, [$d0+3];
	ld_u32	$s0, [$d0+5];
	ld_u32	$s0, [$d0+6];
	ld_u32	$s0, [0];
	ld_align(2)_u32	$s0, [$d0+2];
	ld_align(4)_u32	$s0, [$d0+2];
	ld_align(8)_u32	$s0, [$d0+2];
	ld_align(16)_u32	$s0, [$d0+2];
	ld_align(32)_u32	$s0, [$d0+2];
	ld_align(64)_u32	$s0, [$d0+2];
	ld_align(128)_u32	$s0, [$d0+2];
	ld_align(256)_u32	$s0, [$d0+2];
	ld_equiv(1)_u32	$s0, [$d0+2];
	ld_equiv(2)_u32	$s0, [$d0+2];
	ld_equiv(255)_u32	$s0, [$d0+2];
	ld_width(2)_u32	$s0, [$d0+2];
	ld_width(4)_u32	$s0, [$d0+2];
	ld_width(8)_u32	$s0, [$d0+2];
	ld_width(16)_u32	$s0, [$d0+2];
	ld_width(32)_u32	$s0, [$d0+2];
	ld_width(64)_u32	$s0, [$d0+2];
	ld_width(128)_u32	$s0, [$d0+2];
	ld_width(256)_u32	$s0, [$d0+2];
	ld_width(512)_u32	$s0, [$d0+2];
	ld_width(1024)_u32	$s0, [$d0+2];
	ld_width(2048)_u32	$s0, [$d0+2];
	ld_width(4096)_u32	$s0, [$d0+2];
	ld_width(8192)_u32	$s0, [$d0+2];
	ld_width(16384)_u32	$s0, [$d0+2];
	ld_width(32768)_u32	$s0, [$d0+2];
	ld_width(65536)_u32	$s0, [$d0+2];
	ld_width(131072)_u32	$s0, [$d0+2];
	ld_width(262144)_u32	$s0, [$d0+2];
	ld_width(524288)_u32	$s0, [$d0+2];
	ld_width(1048576)_u32	$s0, [$d0+2];
	ld_width(2097152)_u32	$s0, [$d0+2];
	ld_width(4194304)_u32	$s0, [$d0+2];
	ld_width(8388608)_u32	$s0, [$d0+2];
	ld_width(16777216)_u32	$s0, [$d0+2];
	ld_width(33554432)_u32	$s0, [$d0+2];
	ld_width(67108864)_u32	$s0, [$d0+2];
	ld_width(134217728)_u32	$s0, [$d0+2];
	ld_width(268435456)_u32	$s0, [$d0+2];
	ld_width(536870912)_u32	$s0, [$d0+2];
	ld_width(1073741824)_u32	$s0, [$d0+2];
	ld_width(2147483648)_u32	$s0, [$d0+2];
	ld_width(WAVESIZE)_u32	$s0, [$d0+2];
	ld_width(all)_u32	$s0, [$d0+2];
	// 
	// Next sample
	// 
	ld_global_u32	$s0, [&GlobalVar];
	// 
	ld_global_const_u32	$s0, [&GlobalVar];
	ld_v2_global_u32	($s0, $s1), [&GlobalVar];
	ld_v3_global_u32	($s0, $s1, $s2), [&GlobalVar];
	ld_v4_global_u32	($s0, $s1, $s2, $s3), [&GlobalVar];
	ld_global_u32	$s0, [$d0+2];
	ld_global_u32	$s0, [$d0+3];
	ld_global_u32	$s0, [$d0+5];
	ld_global_u32	$s0, [$d0+6];
	ld_global_u32	$s0, [0];
	ld_global_align(2)_u32	$s0, [&GlobalVar];
	ld_global_align(4)_u32	$s0, [&GlobalVar];
	ld_global_align(8)_u32	$s0, [&GlobalVar];
	ld_global_align(16)_u32	$s0, [&GlobalVar];
	ld_global_align(32)_u32	$s0, [&GlobalVar];
	ld_global_align(64)_u32	$s0, [&GlobalVar];
	ld_global_align(128)_u32	$s0, [&GlobalVar];
	ld_global_align(256)_u32	$s0, [&GlobalVar];
	ld_global_equiv(1)_u32	$s0, [&GlobalVar];
	ld_global_equiv(2)_u32	$s0, [&GlobalVar];
	ld_global_equiv(255)_u32	$s0, [&GlobalVar];
	ld_global_width(2)_u32	$s0, [&GlobalVar];
	ld_global_width(4)_u32	$s0, [&GlobalVar];
	ld_global_width(8)_u32	$s0, [&GlobalVar];
	ld_global_width(16)_u32	$s0, [&GlobalVar];
	ld_global_width(32)_u32	$s0, [&GlobalVar];
	ld_global_width(64)_u32	$s0, [&GlobalVar];
	ld_global_width(128)_u32	$s0, [&GlobalVar];
	ld_global_width(256)_u32	$s0, [&GlobalVar];
	ld_global_width(512)_u32	$s0, [&GlobalVar];
	ld_global_width(1024)_u32	$s0, [&GlobalVar];
	ld_global_width(2048)_u32	$s0, [&GlobalVar];
	ld_global_width(4096)_u32	$s0, [&GlobalVar];
	ld_global_width(8192)_u32	$s0, [&GlobalVar];
	ld_global_width(16384)_u32	$s0, [&GlobalVar];
	ld_global_width(32768)_u32	$s0, [&GlobalVar];
	ld_global_width(65536)_u32	$s0, [&GlobalVar];
	ld_global_width(131072)_u32	$s0, [&GlobalVar];
	ld_global_width(262144)_u32	$s0, [&GlobalVar];
	ld_global_width(524288)_u32	$s0, [&GlobalVar];
	ld_global_width(1048576)_u32	$s0, [&GlobalVar];
	ld_global_width(2097152)_u32	$s0, [&GlobalVar];
	ld_global_width(4194304)_u32	$s0, [&GlobalVar];
	ld_global_width(8388608)_u32	$s0, [&GlobalVar];
	ld_global_width(16777216)_u32	$s0, [&GlobalVar];
	ld_global_width(33554432)_u32	$s0, [&GlobalVar];
	ld_global_width(67108864)_u32	$s0, [&GlobalVar];
	ld_global_width(134217728)_u32	$s0, [&GlobalVar];
	ld_global_width(268435456)_u32	$s0, [&GlobalVar];
	ld_global_width(536870912)_u32	$s0, [&GlobalVar];
	ld_global_width(1073741824)_u32	$s0, [&GlobalVar];
	ld_global_width(2147483648)_u32	$s0, [&GlobalVar];
	ld_global_width(WAVESIZE)_u32	$s0, [&GlobalVar];
	ld_global_width(all)_u32	$s0, [&GlobalVar];
	// 
	// Next sample
	// 
	ld_readonly_u32	$s0, [&ReadonlyVar];
	// 
	ld_readonly_const_u32	$s0, [&ReadonlyVar];
	ld_v2_readonly_u32	($s0, $s1), [&ReadonlyVar];
	ld_v3_readonly_u32	($s0, $s1, $s2), [&ReadonlyVar];
	ld_v4_readonly_u32	($s0, $s1, $s2, $s3), [&ReadonlyVar];
	ld_readonly_u32	$s0, [$d0+2];
	ld_readonly_u32	$s0, [$d0+3];
	ld_readonly_u32	$s0, [$d0+5];
	ld_readonly_u32	$s0, [$d0+6];
	ld_readonly_u32	$s0, [0];
	ld_readonly_align(2)_u32	$s0, [&ReadonlyVar];
	ld_readonly_align(4)_u32	$s0, [&ReadonlyVar];
	ld_readonly_align(8)_u32	$s0, [&ReadonlyVar];
	ld_readonly_align(16)_u32	$s0, [&ReadonlyVar];
	ld_readonly_align(32)_u32	$s0, [&ReadonlyVar];
	ld_readonly_align(64)_u32	$s0, [&ReadonlyVar];
	ld_readonly_align(128)_u32	$s0, [&ReadonlyVar];
	ld_readonly_align(256)_u32	$s0, [&ReadonlyVar];
	ld_readonly_equiv(1)_u32	$s0, [&ReadonlyVar];
	ld_readonly_equiv(2)_u32	$s0, [&ReadonlyVar];
	ld_readonly_equiv(255)_u32	$s0, [&ReadonlyVar];
	ld_readonly_width(2)_u32	$s0, [&ReadonlyVar];
	ld_readonly_width(4)_u32	$s0, [&ReadonlyVar];
	ld_readonly_width(8)_u32	$s0, [&ReadonlyVar];
	ld_readonly_width(16)_u32	$s0, [&ReadonlyVar];
	ld_readonly_width(32)_u32	$s0, [&ReadonlyVar];
	ld_readonly_width(64)_u32	$s0, [&ReadonlyVar];
	ld_readonly_width(128)_u32	$s0, [&ReadonlyVar];
	ld_readonly_width(256)_u32	$s0, [&ReadonlyVar];
	ld_readonly_width(512)_u32	$s0, [&ReadonlyVar];
	ld_readonly_width(1024)_u32	$s0, [&ReadonlyVar];
	ld_readonly_width(2048)_u32	$s0, [&ReadonlyVar];
	ld_readonly_width(4096)_u32	$s0, [&ReadonlyVar];
	ld_readonly_width(8192)_u32	$s0, [&ReadonlyVar];
	ld_readonly_width(16384)_u32	$s0, [&ReadonlyVar];
	ld_readonly_width(32768)_u32	$s0, [&ReadonlyVar];
	ld_readonly_width(65536)_u32	$s0, [&ReadonlyVar];
	ld_readonly_width(131072)_u32	$s0, [&ReadonlyVar];
	ld_readonly_width(262144)_u32	$s0, [&ReadonlyVar];
	ld_readonly_width(524288)_u32	$s0, [&ReadonlyVar];
	ld_readonly_width(1048576)_u32	$s0, [&ReadonlyVar];
	ld_readonly_width(2097152)_u32	$s0, [&ReadonlyVar];
	ld_readonly_width(4194304)_u32	$s0, [&ReadonlyVar];
	ld_readonly_width(8388608)_u32	$s0, [&ReadonlyVar];
	ld_readonly_width(16777216)_u32	$s0, [&ReadonlyVar];
	ld_readonly_width(33554432)_u32	$s0, [&ReadonlyVar];
	ld_readonly_width(67108864)_u32	$s0, [&ReadonlyVar];
	ld_readonly_width(134217728)_u32	$s0, [&ReadonlyVar];
	ld_readonly_width(268435456)_u32	$s0, [&ReadonlyVar];
	ld_readonly_width(536870912)_u32	$s0, [&ReadonlyVar];
	ld_readonly_width(1073741824)_u32	$s0, [&ReadonlyVar];
	ld_readonly_width(2147483648)_u32	$s0, [&ReadonlyVar];
	ld_readonly_width(WAVESIZE)_u32	$s0, [&ReadonlyVar];
	ld_readonly_width(all)_u32	$s0, [&ReadonlyVar];
	// 
	// Next sample
	// 
	ld_kernarg_u32	$s0, [$d0+2];
	// 
	ld_v2_kernarg_u32	($s0, $s1), [$d0+2];
	ld_v3_kernarg_u32	($s0, $s1, $s2), [$d0+2];
	ld_v4_kernarg_u32	($s0, $s1, $s2, $s3), [$d0+2];
	ld_kernarg_u32	$s0, [$d0+3];
	ld_kernarg_u32	$s0, [$d0+5];
	ld_kernarg_u32	$s0, [$d0+6];
	ld_kernarg_u32	$s0, [0];
	ld_kernarg_align(2)_u32	$s0, [$d0+2];
	ld_kernarg_align(4)_u32	$s0, [$d0+2];
	ld_kernarg_align(8)_u32	$s0, [$d0+2];
	ld_kernarg_align(16)_u32	$s0, [$d0+2];
	ld_kernarg_align(32)_u32	$s0, [$d0+2];
	ld_kernarg_align(64)_u32	$s0, [$d0+2];
	ld_kernarg_align(128)_u32	$s0, [$d0+2];
	ld_kernarg_align(256)_u32	$s0, [$d0+2];
	ld_kernarg_equiv(1)_u32	$s0, [$d0+2];
	ld_kernarg_equiv(2)_u32	$s0, [$d0+2];
	ld_kernarg_equiv(255)_u32	$s0, [$d0+2];
	ld_kernarg_width(2)_u32	$s0, [$d0+2];
	ld_kernarg_width(4)_u32	$s0, [$d0+2];
	ld_kernarg_width(8)_u32	$s0, [$d0+2];
	ld_kernarg_width(16)_u32	$s0, [$d0+2];
	ld_kernarg_width(32)_u32	$s0, [$d0+2];
	ld_kernarg_width(64)_u32	$s0, [$d0+2];
	ld_kernarg_width(128)_u32	$s0, [$d0+2];
	ld_kernarg_width(256)_u32	$s0, [$d0+2];
	ld_kernarg_width(512)_u32	$s0, [$d0+2];
	ld_kernarg_width(1024)_u32	$s0, [$d0+2];
	ld_kernarg_width(2048)_u32	$s0, [$d0+2];
	ld_kernarg_width(4096)_u32	$s0, [$d0+2];
	ld_kernarg_width(8192)_u32	$s0, [$d0+2];
	ld_kernarg_width(16384)_u32	$s0, [$d0+2];
	ld_kernarg_width(32768)_u32	$s0, [$d0+2];
	ld_kernarg_width(65536)_u32	$s0, [$d0+2];
	ld_kernarg_width(131072)_u32	$s0, [$d0+2];
	ld_kernarg_width(262144)_u32	$s0, [$d0+2];
	ld_kernarg_width(524288)_u32	$s0, [$d0+2];
	ld_kernarg_width(1048576)_u32	$s0, [$d0+2];
	ld_kernarg_width(2097152)_u32	$s0, [$d0+2];
	ld_kernarg_width(4194304)_u32	$s0, [$d0+2];
	ld_kernarg_width(8388608)_u32	$s0, [$d0+2];
	ld_kernarg_width(16777216)_u32	$s0, [$d0+2];
	ld_kernarg_width(33554432)_u32	$s0, [$d0+2];
	ld_kernarg_width(67108864)_u32	$s0, [$d0+2];
	ld_kernarg_width(134217728)_u32	$s0, [$d0+2];
	ld_kernarg_width(268435456)_u32	$s0, [$d0+2];
	ld_kernarg_width(536870912)_u32	$s0, [$d0+2];
	ld_kernarg_width(1073741824)_u32	$s0, [$d0+2];
	ld_kernarg_width(2147483648)_u32	$s0, [$d0+2];
	ld_kernarg_width(WAVESIZE)_u32	$s0, [$d0+2];
	ld_kernarg_width(all)_u32	$s0, [$d0+2];
	// 
	// Next sample
	// 
	ld_group_u32	$s0, [&GroupVar];
	// 
	ld_v2_group_u32	($s0, $s1), [&GroupVar];
	ld_v3_group_u32	($s0, $s1, $s2), [&GroupVar];
	ld_v4_group_u32	($s0, $s1, $s2, $s3), [&GroupVar];
	ld_group_u32	$s0, [$s0+2];
	ld_group_u32	$s0, [$s0+3];
	ld_group_u32	$s0, [$s0+5];
	ld_group_u32	$s0, [$s0+6];
	ld_group_u32	$s0, [0];
	ld_group_align(2)_u32	$s0, [&GroupVar];
	ld_group_align(4)_u32	$s0, [&GroupVar];
	ld_group_align(8)_u32	$s0, [&GroupVar];
	ld_group_align(16)_u32	$s0, [&GroupVar];
	ld_group_align(32)_u32	$s0, [&GroupVar];
	ld_group_align(64)_u32	$s0, [&GroupVar];
	ld_group_align(128)_u32	$s0, [&GroupVar];
	ld_group_align(256)_u32	$s0, [&GroupVar];
	ld_group_equiv(1)_u32	$s0, [&GroupVar];
	ld_group_equiv(2)_u32	$s0, [&GroupVar];
	ld_group_equiv(255)_u32	$s0, [&GroupVar];
	ld_group_width(2)_u32	$s0, [&GroupVar];
	ld_group_width(4)_u32	$s0, [&GroupVar];
	ld_group_width(8)_u32	$s0, [&GroupVar];
	ld_group_width(16)_u32	$s0, [&GroupVar];
	ld_group_width(32)_u32	$s0, [&GroupVar];
	ld_group_width(64)_u32	$s0, [&GroupVar];
	ld_group_width(128)_u32	$s0, [&GroupVar];
	ld_group_width(256)_u32	$s0, [&GroupVar];
	ld_group_width(512)_u32	$s0, [&GroupVar];
	ld_group_width(1024)_u32	$s0, [&GroupVar];
	ld_group_width(2048)_u32	$s0, [&GroupVar];
	ld_group_width(4096)_u32	$s0, [&GroupVar];
	ld_group_width(8192)_u32	$s0, [&GroupVar];
	ld_group_width(16384)_u32	$s0, [&GroupVar];
	ld_group_width(32768)_u32	$s0, [&GroupVar];
	ld_group_width(65536)_u32	$s0, [&GroupVar];
	ld_group_width(131072)_u32	$s0, [&GroupVar];
	ld_group_width(262144)_u32	$s0, [&GroupVar];
	ld_group_width(524288)_u32	$s0, [&GroupVar];
	ld_group_width(1048576)_u32	$s0, [&GroupVar];
	ld_group_width(2097152)_u32	$s0, [&GroupVar];
	ld_group_width(4194304)_u32	$s0, [&GroupVar];
	ld_group_width(8388608)_u32	$s0, [&GroupVar];
	ld_group_width(16777216)_u32	$s0, [&GroupVar];
	ld_group_width(33554432)_u32	$s0, [&GroupVar];
	ld_group_width(67108864)_u32	$s0, [&GroupVar];
	ld_group_width(134217728)_u32	$s0, [&GroupVar];
	ld_group_width(268435456)_u32	$s0, [&GroupVar];
	ld_group_width(536870912)_u32	$s0, [&GroupVar];
	ld_group_width(1073741824)_u32	$s0, [&GroupVar];
	ld_group_width(2147483648)_u32	$s0, [&GroupVar];
	ld_group_width(WAVESIZE)_u32	$s0, [&GroupVar];
	ld_group_width(all)_u32	$s0, [&GroupVar];
	// 
	// Next sample
	// 
	ld_private_u32	$s0, [&PrivateVar];
	// 
	ld_v2_private_u32	($s0, $s1), [&PrivateVar];
	ld_v3_private_u32	($s0, $s1, $s2), [&PrivateVar];
	ld_v4_private_u32	($s0, $s1, $s2, $s3), [&PrivateVar];
	ld_private_u32	$s0, [$s0+2];
	ld_private_u32	$s0, [$s0+3];
	ld_private_u32	$s0, [$s0+5];
	ld_private_u32	$s0, [$s0+6];
	ld_private_u32	$s0, [0];
	ld_private_align(2)_u32	$s0, [&PrivateVar];
	ld_private_align(4)_u32	$s0, [&PrivateVar];
	ld_private_align(8)_u32	$s0, [&PrivateVar];
	ld_private_align(16)_u32	$s0, [&PrivateVar];
	ld_private_align(32)_u32	$s0, [&PrivateVar];
	ld_private_align(64)_u32	$s0, [&PrivateVar];
	ld_private_align(128)_u32	$s0, [&PrivateVar];
	ld_private_align(256)_u32	$s0, [&PrivateVar];
	ld_private_equiv(1)_u32	$s0, [&PrivateVar];
	ld_private_equiv(2)_u32	$s0, [&PrivateVar];
	ld_private_equiv(255)_u32	$s0, [&PrivateVar];
	ld_private_width(2)_u32	$s0, [&PrivateVar];
	ld_private_width(4)_u32	$s0, [&PrivateVar];
	ld_private_width(8)_u32	$s0, [&PrivateVar];
	ld_private_width(16)_u32	$s0, [&PrivateVar];
	ld_private_width(32)_u32	$s0, [&PrivateVar];
	ld_private_width(64)_u32	$s0, [&PrivateVar];
	ld_private_width(128)_u32	$s0, [&PrivateVar];
	ld_private_width(256)_u32	$s0, [&PrivateVar];
	ld_private_width(512)_u32	$s0, [&PrivateVar];
	ld_private_width(1024)_u32	$s0, [&PrivateVar];
	ld_private_width(2048)_u32	$s0, [&PrivateVar];
	ld_private_width(4096)_u32	$s0, [&PrivateVar];
	ld_private_width(8192)_u32	$s0, [&PrivateVar];
	ld_private_width(16384)_u32	$s0, [&PrivateVar];
	ld_private_width(32768)_u32	$s0, [&PrivateVar];
	ld_private_width(65536)_u32	$s0, [&PrivateVar];
	ld_private_width(131072)_u32	$s0, [&PrivateVar];
	ld_private_width(262144)_u32	$s0, [&PrivateVar];
	ld_private_width(524288)_u32	$s0, [&PrivateVar];
	ld_private_width(1048576)_u32	$s0, [&PrivateVar];
	ld_private_width(2097152)_u32	$s0, [&PrivateVar];
	ld_private_width(4194304)_u32	$s0, [&PrivateVar];
	ld_private_width(8388608)_u32	$s0, [&PrivateVar];
	ld_private_width(16777216)_u32	$s0, [&PrivateVar];
	ld_private_width(33554432)_u32	$s0, [&PrivateVar];
	ld_private_width(67108864)_u32	$s0, [&PrivateVar];
	ld_private_width(134217728)_u32	$s0, [&PrivateVar];
	ld_private_width(268435456)_u32	$s0, [&PrivateVar];
	ld_private_width(536870912)_u32	$s0, [&PrivateVar];
	ld_private_width(1073741824)_u32	$s0, [&PrivateVar];
	ld_private_width(2147483648)_u32	$s0, [&PrivateVar];
	ld_private_width(WAVESIZE)_u32	$s0, [&PrivateVar];
	ld_private_width(all)_u32	$s0, [&PrivateVar];
	// 
	// Next sample
	// 
	ld_spill_u32	$s0, [%SpillVar];
	// 
	ld_v2_spill_u32	($s0, $s1), [%SpillVar];
	ld_v3_spill_u32	($s0, $s1, $s2), [%SpillVar];
	ld_v4_spill_u32	($s0, $s1, $s2, $s3), [%SpillVar];
	ld_spill_align(2)_u32	$s0, [%SpillVar];
	ld_spill_align(4)_u32	$s0, [%SpillVar];
	ld_spill_align(8)_u32	$s0, [%SpillVar];
	ld_spill_align(16)_u32	$s0, [%SpillVar];
	ld_spill_align(32)_u32	$s0, [%SpillVar];
	ld_spill_align(64)_u32	$s0, [%SpillVar];
	ld_spill_align(128)_u32	$s0, [%SpillVar];
	ld_spill_align(256)_u32	$s0, [%SpillVar];
	ld_spill_equiv(1)_u32	$s0, [%SpillVar];
	ld_spill_equiv(2)_u32	$s0, [%SpillVar];
	ld_spill_equiv(255)_u32	$s0, [%SpillVar];
	ld_spill_width(2)_u32	$s0, [%SpillVar];
	ld_spill_width(4)_u32	$s0, [%SpillVar];
	ld_spill_width(8)_u32	$s0, [%SpillVar];
	ld_spill_width(16)_u32	$s0, [%SpillVar];
	ld_spill_width(32)_u32	$s0, [%SpillVar];
	ld_spill_width(64)_u32	$s0, [%SpillVar];
	ld_spill_width(128)_u32	$s0, [%SpillVar];
	ld_spill_width(256)_u32	$s0, [%SpillVar];
	ld_spill_width(512)_u32	$s0, [%SpillVar];
	ld_spill_width(1024)_u32	$s0, [%SpillVar];
	ld_spill_width(2048)_u32	$s0, [%SpillVar];
	ld_spill_width(4096)_u32	$s0, [%SpillVar];
	ld_spill_width(8192)_u32	$s0, [%SpillVar];
	ld_spill_width(16384)_u32	$s0, [%SpillVar];
	ld_spill_width(32768)_u32	$s0, [%SpillVar];
	ld_spill_width(65536)_u32	$s0, [%SpillVar];
	ld_spill_width(131072)_u32	$s0, [%SpillVar];
	ld_spill_width(262144)_u32	$s0, [%SpillVar];
	ld_spill_width(524288)_u32	$s0, [%SpillVar];
	ld_spill_width(1048576)_u32	$s0, [%SpillVar];
	ld_spill_width(2097152)_u32	$s0, [%SpillVar];
	ld_spill_width(4194304)_u32	$s0, [%SpillVar];
	ld_spill_width(8388608)_u32	$s0, [%SpillVar];
	ld_spill_width(16777216)_u32	$s0, [%SpillVar];
	ld_spill_width(33554432)_u32	$s0, [%SpillVar];
	ld_spill_width(67108864)_u32	$s0, [%SpillVar];
	ld_spill_width(134217728)_u32	$s0, [%SpillVar];
	ld_spill_width(268435456)_u32	$s0, [%SpillVar];
	ld_spill_width(536870912)_u32	$s0, [%SpillVar];
	ld_spill_width(1073741824)_u32	$s0, [%SpillVar];
	ld_spill_width(2147483648)_u32	$s0, [%SpillVar];
	ld_spill_width(WAVESIZE)_u32	$s0, [%SpillVar];
	ld_spill_width(all)_u32	$s0, [%SpillVar];
	// 
	// Next sample
	// 
	ld_u64	$d0, [$d0+2];
	// 
	ld_const_u64	$d0, [$d0+2];
	ld_v2_u64	($d0, $d1), [$d0+2];
	ld_v3_u64	($d0, $d1, $d2), [$d0+2];
	ld_v4_u64	($d0, $d1, $d2, $d3), [$d0+2];
	ld_u64	$d0, [$d0+3];
	ld_u64	$d0, [$d0+5];
	ld_u64	$d0, [$d0+6];
	ld_u64	$d0, [0];
	ld_align(2)_u64	$d0, [$d0+2];
	ld_align(4)_u64	$d0, [$d0+2];
	ld_align(8)_u64	$d0, [$d0+2];
	ld_align(16)_u64	$d0, [$d0+2];
	ld_align(32)_u64	$d0, [$d0+2];
	ld_align(64)_u64	$d0, [$d0+2];
	ld_align(128)_u64	$d0, [$d0+2];
	ld_align(256)_u64	$d0, [$d0+2];
	ld_equiv(1)_u64	$d0, [$d0+2];
	ld_equiv(2)_u64	$d0, [$d0+2];
	ld_equiv(255)_u64	$d0, [$d0+2];
	ld_width(2)_u64	$d0, [$d0+2];
	ld_width(4)_u64	$d0, [$d0+2];
	ld_width(8)_u64	$d0, [$d0+2];
	ld_width(16)_u64	$d0, [$d0+2];
	ld_width(32)_u64	$d0, [$d0+2];
	ld_width(64)_u64	$d0, [$d0+2];
	ld_width(128)_u64	$d0, [$d0+2];
	ld_width(256)_u64	$d0, [$d0+2];
	ld_width(512)_u64	$d0, [$d0+2];
	ld_width(1024)_u64	$d0, [$d0+2];
	ld_width(2048)_u64	$d0, [$d0+2];
	ld_width(4096)_u64	$d0, [$d0+2];
	ld_width(8192)_u64	$d0, [$d0+2];
	ld_width(16384)_u64	$d0, [$d0+2];
	ld_width(32768)_u64	$d0, [$d0+2];
	ld_width(65536)_u64	$d0, [$d0+2];
	ld_width(131072)_u64	$d0, [$d0+2];
	ld_width(262144)_u64	$d0, [$d0+2];
	ld_width(524288)_u64	$d0, [$d0+2];
	ld_width(1048576)_u64	$d0, [$d0+2];
	ld_width(2097152)_u64	$d0, [$d0+2];
	ld_width(4194304)_u64	$d0, [$d0+2];
	ld_width(8388608)_u64	$d0, [$d0+2];
	ld_width(16777216)_u64	$d0, [$d0+2];
	ld_width(33554432)_u64	$d0, [$d0+2];
	ld_width(67108864)_u64	$d0, [$d0+2];
	ld_width(134217728)_u64	$d0, [$d0+2];
	ld_width(268435456)_u64	$d0, [$d0+2];
	ld_width(536870912)_u64	$d0, [$d0+2];
	ld_width(1073741824)_u64	$d0, [$d0+2];
	ld_width(2147483648)_u64	$d0, [$d0+2];
	ld_width(WAVESIZE)_u64	$d0, [$d0+2];
	ld_width(all)_u64	$d0, [$d0+2];
	// 
	// Next sample
	// 
	ld_global_u64	$d0, [&GlobalVar];
	// 
	ld_global_const_u64	$d0, [&GlobalVar];
	ld_v2_global_u64	($d0, $d1), [&GlobalVar];
	ld_v3_global_u64	($d0, $d1, $d2), [&GlobalVar];
	ld_v4_global_u64	($d0, $d1, $d2, $d3), [&GlobalVar];
	ld_global_u64	$d0, [$d0+2];
	ld_global_u64	$d0, [$d0+3];
	ld_global_u64	$d0, [$d0+5];
	ld_global_u64	$d0, [$d0+6];
	ld_global_u64	$d0, [0];
	ld_global_align(2)_u64	$d0, [&GlobalVar];
	ld_global_align(4)_u64	$d0, [&GlobalVar];
	ld_global_align(8)_u64	$d0, [&GlobalVar];
	ld_global_align(16)_u64	$d0, [&GlobalVar];
	ld_global_align(32)_u64	$d0, [&GlobalVar];
	ld_global_align(64)_u64	$d0, [&GlobalVar];
	ld_global_align(128)_u64	$d0, [&GlobalVar];
	ld_global_align(256)_u64	$d0, [&GlobalVar];
	ld_global_equiv(1)_u64	$d0, [&GlobalVar];
	ld_global_equiv(2)_u64	$d0, [&GlobalVar];
	ld_global_equiv(255)_u64	$d0, [&GlobalVar];
	ld_global_width(2)_u64	$d0, [&GlobalVar];
	ld_global_width(4)_u64	$d0, [&GlobalVar];
	ld_global_width(8)_u64	$d0, [&GlobalVar];
	ld_global_width(16)_u64	$d0, [&GlobalVar];
	ld_global_width(32)_u64	$d0, [&GlobalVar];
	ld_global_width(64)_u64	$d0, [&GlobalVar];
	ld_global_width(128)_u64	$d0, [&GlobalVar];
	ld_global_width(256)_u64	$d0, [&GlobalVar];
	ld_global_width(512)_u64	$d0, [&GlobalVar];
	ld_global_width(1024)_u64	$d0, [&GlobalVar];
	ld_global_width(2048)_u64	$d0, [&GlobalVar];
	ld_global_width(4096)_u64	$d0, [&GlobalVar];
	ld_global_width(8192)_u64	$d0, [&GlobalVar];
	ld_global_width(16384)_u64	$d0, [&GlobalVar];
	ld_global_width(32768)_u64	$d0, [&GlobalVar];
	ld_global_width(65536)_u64	$d0, [&GlobalVar];
	ld_global_width(131072)_u64	$d0, [&GlobalVar];
	ld_global_width(262144)_u64	$d0, [&GlobalVar];
	ld_global_width(524288)_u64	$d0, [&GlobalVar];
	ld_global_width(1048576)_u64	$d0, [&GlobalVar];
	ld_global_width(2097152)_u64	$d0, [&GlobalVar];
	ld_global_width(4194304)_u64	$d0, [&GlobalVar];
	ld_global_width(8388608)_u64	$d0, [&GlobalVar];
	ld_global_width(16777216)_u64	$d0, [&GlobalVar];
	ld_global_width(33554432)_u64	$d0, [&GlobalVar];
	ld_global_width(67108864)_u64	$d0, [&GlobalVar];
	ld_global_width(134217728)_u64	$d0, [&GlobalVar];
	ld_global_width(268435456)_u64	$d0, [&GlobalVar];
	ld_global_width(536870912)_u64	$d0, [&GlobalVar];
	ld_global_width(1073741824)_u64	$d0, [&GlobalVar];
	ld_global_width(2147483648)_u64	$d0, [&GlobalVar];
	ld_global_width(WAVESIZE)_u64	$d0, [&GlobalVar];
	ld_global_width(all)_u64	$d0, [&GlobalVar];
	// 
	// Next sample
	// 
	ld_readonly_u64	$d0, [&ReadonlyVar];
	// 
	ld_readonly_const_u64	$d0, [&ReadonlyVar];
	ld_v2_readonly_u64	($d0, $d1), [&ReadonlyVar];
	ld_v3_readonly_u64	($d0, $d1, $d2), [&ReadonlyVar];
	ld_v4_readonly_u64	($d0, $d1, $d2, $d3), [&ReadonlyVar];
	ld_readonly_u64	$d0, [$d0+2];
	ld_readonly_u64	$d0, [$d0+3];
	ld_readonly_u64	$d0, [$d0+5];
	ld_readonly_u64	$d0, [$d0+6];
	ld_readonly_u64	$d0, [0];
	ld_readonly_align(2)_u64	$d0, [&ReadonlyVar];
	ld_readonly_align(4)_u64	$d0, [&ReadonlyVar];
	ld_readonly_align(8)_u64	$d0, [&ReadonlyVar];
	ld_readonly_align(16)_u64	$d0, [&ReadonlyVar];
	ld_readonly_align(32)_u64	$d0, [&ReadonlyVar];
	ld_readonly_align(64)_u64	$d0, [&ReadonlyVar];
	ld_readonly_align(128)_u64	$d0, [&ReadonlyVar];
	ld_readonly_align(256)_u64	$d0, [&ReadonlyVar];
	ld_readonly_equiv(1)_u64	$d0, [&ReadonlyVar];
	ld_readonly_equiv(2)_u64	$d0, [&ReadonlyVar];
	ld_readonly_equiv(255)_u64	$d0, [&ReadonlyVar];
	ld_readonly_width(2)_u64	$d0, [&ReadonlyVar];
	ld_readonly_width(4)_u64	$d0, [&ReadonlyVar];
	ld_readonly_width(8)_u64	$d0, [&ReadonlyVar];
	ld_readonly_width(16)_u64	$d0, [&ReadonlyVar];
	ld_readonly_width(32)_u64	$d0, [&ReadonlyVar];
	ld_readonly_width(64)_u64	$d0, [&ReadonlyVar];
	ld_readonly_width(128)_u64	$d0, [&ReadonlyVar];
	ld_readonly_width(256)_u64	$d0, [&ReadonlyVar];
	ld_readonly_width(512)_u64	$d0, [&ReadonlyVar];
	ld_readonly_width(1024)_u64	$d0, [&ReadonlyVar];
	ld_readonly_width(2048)_u64	$d0, [&ReadonlyVar];
	ld_readonly_width(4096)_u64	$d0, [&ReadonlyVar];
	ld_readonly_width(8192)_u64	$d0, [&ReadonlyVar];
	ld_readonly_width(16384)_u64	$d0, [&ReadonlyVar];
	ld_readonly_width(32768)_u64	$d0, [&ReadonlyVar];
	ld_readonly_width(65536)_u64	$d0, [&ReadonlyVar];
	ld_readonly_width(131072)_u64	$d0, [&ReadonlyVar];
	ld_readonly_width(262144)_u64	$d0, [&ReadonlyVar];
	ld_readonly_width(524288)_u64	$d0, [&ReadonlyVar];
	ld_readonly_width(1048576)_u64	$d0, [&ReadonlyVar];
	ld_readonly_width(2097152)_u64	$d0, [&ReadonlyVar];
	ld_readonly_width(4194304)_u64	$d0, [&ReadonlyVar];
	ld_readonly_width(8388608)_u64	$d0, [&ReadonlyVar];
	ld_readonly_width(16777216)_u64	$d0, [&ReadonlyVar];
	ld_readonly_width(33554432)_u64	$d0, [&ReadonlyVar];
	ld_readonly_width(67108864)_u64	$d0, [&ReadonlyVar];
	ld_readonly_width(134217728)_u64	$d0, [&ReadonlyVar];
	ld_readonly_width(268435456)_u64	$d0, [&ReadonlyVar];
	ld_readonly_width(536870912)_u64	$d0, [&ReadonlyVar];
	ld_readonly_width(1073741824)_u64	$d0, [&ReadonlyVar];
	ld_readonly_width(2147483648)_u64	$d0, [&ReadonlyVar];
	ld_readonly_width(WAVESIZE)_u64	$d0, [&ReadonlyVar];
	ld_readonly_width(all)_u64	$d0, [&ReadonlyVar];
	// 
	// Next sample
	// 
	ld_kernarg_u64	$d0, [$d0+2];
	// 
	ld_v2_kernarg_u64	($d0, $d1), [$d0+2];
	ld_v3_kernarg_u64	($d0, $d1, $d2), [$d0+2];
	ld_v4_kernarg_u64	($d0, $d1, $d2, $d3), [$d0+2];
	ld_kernarg_u64	$d0, [$d0+3];
	ld_kernarg_u64	$d0, [$d0+5];
	ld_kernarg_u64	$d0, [$d0+6];
	ld_kernarg_u64	$d0, [0];
	ld_kernarg_align(2)_u64	$d0, [$d0+2];
	ld_kernarg_align(4)_u64	$d0, [$d0+2];
	ld_kernarg_align(8)_u64	$d0, [$d0+2];
	ld_kernarg_align(16)_u64	$d0, [$d0+2];
	ld_kernarg_align(32)_u64	$d0, [$d0+2];
	ld_kernarg_align(64)_u64	$d0, [$d0+2];
	ld_kernarg_align(128)_u64	$d0, [$d0+2];
	ld_kernarg_align(256)_u64	$d0, [$d0+2];
	ld_kernarg_equiv(1)_u64	$d0, [$d0+2];
	ld_kernarg_equiv(2)_u64	$d0, [$d0+2];
	ld_kernarg_equiv(255)_u64	$d0, [$d0+2];
	ld_kernarg_width(2)_u64	$d0, [$d0+2];
	ld_kernarg_width(4)_u64	$d0, [$d0+2];
	ld_kernarg_width(8)_u64	$d0, [$d0+2];
	ld_kernarg_width(16)_u64	$d0, [$d0+2];
	ld_kernarg_width(32)_u64	$d0, [$d0+2];
	ld_kernarg_width(64)_u64	$d0, [$d0+2];
	ld_kernarg_width(128)_u64	$d0, [$d0+2];
	ld_kernarg_width(256)_u64	$d0, [$d0+2];
	ld_kernarg_width(512)_u64	$d0, [$d0+2];
	ld_kernarg_width(1024)_u64	$d0, [$d0+2];
	ld_kernarg_width(2048)_u64	$d0, [$d0+2];
	ld_kernarg_width(4096)_u64	$d0, [$d0+2];
	ld_kernarg_width(8192)_u64	$d0, [$d0+2];
	ld_kernarg_width(16384)_u64	$d0, [$d0+2];
	ld_kernarg_width(32768)_u64	$d0, [$d0+2];
	ld_kernarg_width(65536)_u64	$d0, [$d0+2];
	ld_kernarg_width(131072)_u64	$d0, [$d0+2];
	ld_kernarg_width(262144)_u64	$d0, [$d0+2];
	ld_kernarg_width(524288)_u64	$d0, [$d0+2];
	ld_kernarg_width(1048576)_u64	$d0, [$d0+2];
	ld_kernarg_width(2097152)_u64	$d0, [$d0+2];
	ld_kernarg_width(4194304)_u64	$d0, [$d0+2];
	ld_kernarg_width(8388608)_u64	$d0, [$d0+2];
	ld_kernarg_width(16777216)_u64	$d0, [$d0+2];
	ld_kernarg_width(33554432)_u64	$d0, [$d0+2];
	ld_kernarg_width(67108864)_u64	$d0, [$d0+2];
	ld_kernarg_width(134217728)_u64	$d0, [$d0+2];
	ld_kernarg_width(268435456)_u64	$d0, [$d0+2];
	ld_kernarg_width(536870912)_u64	$d0, [$d0+2];
	ld_kernarg_width(1073741824)_u64	$d0, [$d0+2];
	ld_kernarg_width(2147483648)_u64	$d0, [$d0+2];
	ld_kernarg_width(WAVESIZE)_u64	$d0, [$d0+2];
	ld_kernarg_width(all)_u64	$d0, [$d0+2];
	// 
	// Next sample
	// 
	ld_group_u64	$d0, [&GroupVar];
	// 
	ld_v2_group_u64	($d0, $d1), [&GroupVar];
	ld_v3_group_u64	($d0, $d1, $d2), [&GroupVar];
	ld_v4_group_u64	($d0, $d1, $d2, $d3), [&GroupVar];
	ld_group_u64	$d0, [$s0+2];
	ld_group_u64	$d0, [$s0+3];
	ld_group_u64	$d0, [$s0+5];
	ld_group_u64	$d0, [$s0+6];
	ld_group_u64	$d0, [0];
	ld_group_align(2)_u64	$d0, [&GroupVar];
	ld_group_align(4)_u64	$d0, [&GroupVar];
	ld_group_align(8)_u64	$d0, [&GroupVar];
	ld_group_align(16)_u64	$d0, [&GroupVar];
	ld_group_align(32)_u64	$d0, [&GroupVar];
	ld_group_align(64)_u64	$d0, [&GroupVar];
	ld_group_align(128)_u64	$d0, [&GroupVar];
	ld_group_align(256)_u64	$d0, [&GroupVar];
	ld_group_equiv(1)_u64	$d0, [&GroupVar];
	ld_group_equiv(2)_u64	$d0, [&GroupVar];
	ld_group_equiv(255)_u64	$d0, [&GroupVar];
	ld_group_width(2)_u64	$d0, [&GroupVar];
	ld_group_width(4)_u64	$d0, [&GroupVar];
	ld_group_width(8)_u64	$d0, [&GroupVar];
	ld_group_width(16)_u64	$d0, [&GroupVar];
	ld_group_width(32)_u64	$d0, [&GroupVar];
	ld_group_width(64)_u64	$d0, [&GroupVar];
	ld_group_width(128)_u64	$d0, [&GroupVar];
	ld_group_width(256)_u64	$d0, [&GroupVar];
	ld_group_width(512)_u64	$d0, [&GroupVar];
	ld_group_width(1024)_u64	$d0, [&GroupVar];
	ld_group_width(2048)_u64	$d0, [&GroupVar];
	ld_group_width(4096)_u64	$d0, [&GroupVar];
	ld_group_width(8192)_u64	$d0, [&GroupVar];
	ld_group_width(16384)_u64	$d0, [&GroupVar];
	ld_group_width(32768)_u64	$d0, [&GroupVar];
	ld_group_width(65536)_u64	$d0, [&GroupVar];
	ld_group_width(131072)_u64	$d0, [&GroupVar];
	ld_group_width(262144)_u64	$d0, [&GroupVar];
	ld_group_width(524288)_u64	$d0, [&GroupVar];
	ld_group_width(1048576)_u64	$d0, [&GroupVar];
	ld_group_width(2097152)_u64	$d0, [&GroupVar];
	ld_group_width(4194304)_u64	$d0, [&GroupVar];
	ld_group_width(8388608)_u64	$d0, [&GroupVar];
	ld_group_width(16777216)_u64	$d0, [&GroupVar];
	ld_group_width(33554432)_u64	$d0, [&GroupVar];
	ld_group_width(67108864)_u64	$d0, [&GroupVar];
	ld_group_width(134217728)_u64	$d0, [&GroupVar];
	ld_group_width(268435456)_u64	$d0, [&GroupVar];
	ld_group_width(536870912)_u64	$d0, [&GroupVar];
	ld_group_width(1073741824)_u64	$d0, [&GroupVar];
	ld_group_width(2147483648)_u64	$d0, [&GroupVar];
	ld_group_width(WAVESIZE)_u64	$d0, [&GroupVar];
	ld_group_width(all)_u64	$d0, [&GroupVar];
	// 
	// Next sample
	// 
	ld_private_u64	$d0, [&PrivateVar];
	// 
	ld_v2_private_u64	($d0, $d1), [&PrivateVar];
	ld_v3_private_u64	($d0, $d1, $d2), [&PrivateVar];
	ld_v4_private_u64	($d0, $d1, $d2, $d3), [&PrivateVar];
	ld_private_u64	$d0, [$s0+2];
	ld_private_u64	$d0, [$s0+3];
	ld_private_u64	$d0, [$s0+5];
	ld_private_u64	$d0, [$s0+6];
	ld_private_u64	$d0, [0];
	ld_private_align(2)_u64	$d0, [&PrivateVar];
	ld_private_align(4)_u64	$d0, [&PrivateVar];
	ld_private_align(8)_u64	$d0, [&PrivateVar];
	ld_private_align(16)_u64	$d0, [&PrivateVar];
	ld_private_align(32)_u64	$d0, [&PrivateVar];
	ld_private_align(64)_u64	$d0, [&PrivateVar];
	ld_private_align(128)_u64	$d0, [&PrivateVar];
	ld_private_align(256)_u64	$d0, [&PrivateVar];
	ld_private_equiv(1)_u64	$d0, [&PrivateVar];
	ld_private_equiv(2)_u64	$d0, [&PrivateVar];
	ld_private_equiv(255)_u64	$d0, [&PrivateVar];
	ld_private_width(2)_u64	$d0, [&PrivateVar];
	ld_private_width(4)_u64	$d0, [&PrivateVar];
	ld_private_width(8)_u64	$d0, [&PrivateVar];
	ld_private_width(16)_u64	$d0, [&PrivateVar];
	ld_private_width(32)_u64	$d0, [&PrivateVar];
	ld_private_width(64)_u64	$d0, [&PrivateVar];
	ld_private_width(128)_u64	$d0, [&PrivateVar];
	ld_private_width(256)_u64	$d0, [&PrivateVar];
	ld_private_width(512)_u64	$d0, [&PrivateVar];
	ld_private_width(1024)_u64	$d0, [&PrivateVar];
	ld_private_width(2048)_u64	$d0, [&PrivateVar];
	ld_private_width(4096)_u64	$d0, [&PrivateVar];
	ld_private_width(8192)_u64	$d0, [&PrivateVar];
	ld_private_width(16384)_u64	$d0, [&PrivateVar];
	ld_private_width(32768)_u64	$d0, [&PrivateVar];
	ld_private_width(65536)_u64	$d0, [&PrivateVar];
	ld_private_width(131072)_u64	$d0, [&PrivateVar];
	ld_private_width(262144)_u64	$d0, [&PrivateVar];
	ld_private_width(524288)_u64	$d0, [&PrivateVar];
	ld_private_width(1048576)_u64	$d0, [&PrivateVar];
	ld_private_width(2097152)_u64	$d0, [&PrivateVar];
	ld_private_width(4194304)_u64	$d0, [&PrivateVar];
	ld_private_width(8388608)_u64	$d0, [&PrivateVar];
	ld_private_width(16777216)_u64	$d0, [&PrivateVar];
	ld_private_width(33554432)_u64	$d0, [&PrivateVar];
	ld_private_width(67108864)_u64	$d0, [&PrivateVar];
	ld_private_width(134217728)_u64	$d0, [&PrivateVar];
	ld_private_width(268435456)_u64	$d0, [&PrivateVar];
	ld_private_width(536870912)_u64	$d0, [&PrivateVar];
	ld_private_width(1073741824)_u64	$d0, [&PrivateVar];
	ld_private_width(2147483648)_u64	$d0, [&PrivateVar];
	ld_private_width(WAVESIZE)_u64	$d0, [&PrivateVar];
	ld_private_width(all)_u64	$d0, [&PrivateVar];
	// 
	// Next sample
	// 
	ld_spill_u64	$d0, [%SpillVar];
	// 
	ld_v2_spill_u64	($d0, $d1), [%SpillVar];
	ld_v3_spill_u64	($d0, $d1, $d2), [%SpillVar];
	ld_v4_spill_u64	($d0, $d1, $d2, $d3), [%SpillVar];
	ld_spill_align(2)_u64	$d0, [%SpillVar];
	ld_spill_align(4)_u64	$d0, [%SpillVar];
	ld_spill_align(8)_u64	$d0, [%SpillVar];
	ld_spill_align(16)_u64	$d0, [%SpillVar];
	ld_spill_align(32)_u64	$d0, [%SpillVar];
	ld_spill_align(64)_u64	$d0, [%SpillVar];
	ld_spill_align(128)_u64	$d0, [%SpillVar];
	ld_spill_align(256)_u64	$d0, [%SpillVar];
	ld_spill_equiv(1)_u64	$d0, [%SpillVar];
	ld_spill_equiv(2)_u64	$d0, [%SpillVar];
	ld_spill_equiv(255)_u64	$d0, [%SpillVar];
	ld_spill_width(2)_u64	$d0, [%SpillVar];
	ld_spill_width(4)_u64	$d0, [%SpillVar];
	ld_spill_width(8)_u64	$d0, [%SpillVar];
	ld_spill_width(16)_u64	$d0, [%SpillVar];
	ld_spill_width(32)_u64	$d0, [%SpillVar];
	ld_spill_width(64)_u64	$d0, [%SpillVar];
	ld_spill_width(128)_u64	$d0, [%SpillVar];
	ld_spill_width(256)_u64	$d0, [%SpillVar];
	ld_spill_width(512)_u64	$d0, [%SpillVar];
	ld_spill_width(1024)_u64	$d0, [%SpillVar];
	ld_spill_width(2048)_u64	$d0, [%SpillVar];
	ld_spill_width(4096)_u64	$d0, [%SpillVar];
	ld_spill_width(8192)_u64	$d0, [%SpillVar];
	ld_spill_width(16384)_u64	$d0, [%SpillVar];
	ld_spill_width(32768)_u64	$d0, [%SpillVar];
	ld_spill_width(65536)_u64	$d0, [%SpillVar];
	ld_spill_width(131072)_u64	$d0, [%SpillVar];
	ld_spill_width(262144)_u64	$d0, [%SpillVar];
	ld_spill_width(524288)_u64	$d0, [%SpillVar];
	ld_spill_width(1048576)_u64	$d0, [%SpillVar];
	ld_spill_width(2097152)_u64	$d0, [%SpillVar];
	ld_spill_width(4194304)_u64	$d0, [%SpillVar];
	ld_spill_width(8388608)_u64	$d0, [%SpillVar];
	ld_spill_width(16777216)_u64	$d0, [%SpillVar];
	ld_spill_width(33554432)_u64	$d0, [%SpillVar];
	ld_spill_width(67108864)_u64	$d0, [%SpillVar];
	ld_spill_width(134217728)_u64	$d0, [%SpillVar];
	ld_spill_width(268435456)_u64	$d0, [%SpillVar];
	ld_spill_width(536870912)_u64	$d0, [%SpillVar];
	ld_spill_width(1073741824)_u64	$d0, [%SpillVar];
	ld_spill_width(2147483648)_u64	$d0, [%SpillVar];
	ld_spill_width(WAVESIZE)_u64	$d0, [%SpillVar];
	ld_spill_width(all)_u64	$d0, [%SpillVar];
	// 
	// Next sample
	// 
	ld_s8	$s0, [$d0+2];
	// 
	ld_const_s8	$s0, [$d0+2];
	ld_v2_s8	($s0, $s1), [$d0+2];
	ld_v3_s8	($s0, $s1, $s2), [$d0+2];
	ld_v4_s8	($s0, $s1, $s2, $s3), [$d0+2];
	ld_s8	$s0, [$d0+3];
	ld_s8	$s0, [$d0+5];
	ld_s8	$s0, [$d0+6];
	ld_s8	$s0, [0];
	ld_align(2)_s8	$s0, [$d0+2];
	ld_align(4)_s8	$s0, [$d0+2];
	ld_align(8)_s8	$s0, [$d0+2];
	ld_align(16)_s8	$s0, [$d0+2];
	ld_align(32)_s8	$s0, [$d0+2];
	ld_align(64)_s8	$s0, [$d0+2];
	ld_align(128)_s8	$s0, [$d0+2];
	ld_align(256)_s8	$s0, [$d0+2];
	ld_equiv(1)_s8	$s0, [$d0+2];
	ld_equiv(2)_s8	$s0, [$d0+2];
	ld_equiv(255)_s8	$s0, [$d0+2];
	ld_width(2)_s8	$s0, [$d0+2];
	ld_width(4)_s8	$s0, [$d0+2];
	ld_width(8)_s8	$s0, [$d0+2];
	ld_width(16)_s8	$s0, [$d0+2];
	ld_width(32)_s8	$s0, [$d0+2];
	ld_width(64)_s8	$s0, [$d0+2];
	ld_width(128)_s8	$s0, [$d0+2];
	ld_width(256)_s8	$s0, [$d0+2];
	ld_width(512)_s8	$s0, [$d0+2];
	ld_width(1024)_s8	$s0, [$d0+2];
	ld_width(2048)_s8	$s0, [$d0+2];
	ld_width(4096)_s8	$s0, [$d0+2];
	ld_width(8192)_s8	$s0, [$d0+2];
	ld_width(16384)_s8	$s0, [$d0+2];
	ld_width(32768)_s8	$s0, [$d0+2];
	ld_width(65536)_s8	$s0, [$d0+2];
	ld_width(131072)_s8	$s0, [$d0+2];
	ld_width(262144)_s8	$s0, [$d0+2];
	ld_width(524288)_s8	$s0, [$d0+2];
	ld_width(1048576)_s8	$s0, [$d0+2];
	ld_width(2097152)_s8	$s0, [$d0+2];
	ld_width(4194304)_s8	$s0, [$d0+2];
	ld_width(8388608)_s8	$s0, [$d0+2];
	ld_width(16777216)_s8	$s0, [$d0+2];
	ld_width(33554432)_s8	$s0, [$d0+2];
	ld_width(67108864)_s8	$s0, [$d0+2];
	ld_width(134217728)_s8	$s0, [$d0+2];
	ld_width(268435456)_s8	$s0, [$d0+2];
	ld_width(536870912)_s8	$s0, [$d0+2];
	ld_width(1073741824)_s8	$s0, [$d0+2];
	ld_width(2147483648)_s8	$s0, [$d0+2];
	ld_width(WAVESIZE)_s8	$s0, [$d0+2];
	ld_width(all)_s8	$s0, [$d0+2];
	// 
	// Next sample
	// 
	ld_global_s8	$s0, [&GlobalVar];
	// 
	ld_global_const_s8	$s0, [&GlobalVar];
	ld_v2_global_s8	($s0, $s1), [&GlobalVar];
	ld_v3_global_s8	($s0, $s1, $s2), [&GlobalVar];
	ld_v4_global_s8	($s0, $s1, $s2, $s3), [&GlobalVar];
	ld_global_s8	$s0, [$d0+2];
	ld_global_s8	$s0, [$d0+3];
	ld_global_s8	$s0, [$d0+5];
	ld_global_s8	$s0, [$d0+6];
	ld_global_s8	$s0, [0];
	ld_global_align(2)_s8	$s0, [&GlobalVar];
	ld_global_align(4)_s8	$s0, [&GlobalVar];
	ld_global_align(8)_s8	$s0, [&GlobalVar];
	ld_global_align(16)_s8	$s0, [&GlobalVar];
	ld_global_align(32)_s8	$s0, [&GlobalVar];
	ld_global_align(64)_s8	$s0, [&GlobalVar];
	ld_global_align(128)_s8	$s0, [&GlobalVar];
	ld_global_align(256)_s8	$s0, [&GlobalVar];
	ld_global_equiv(1)_s8	$s0, [&GlobalVar];
	ld_global_equiv(2)_s8	$s0, [&GlobalVar];
	ld_global_equiv(255)_s8	$s0, [&GlobalVar];
	ld_global_width(2)_s8	$s0, [&GlobalVar];
	ld_global_width(4)_s8	$s0, [&GlobalVar];
	ld_global_width(8)_s8	$s0, [&GlobalVar];
	ld_global_width(16)_s8	$s0, [&GlobalVar];
	ld_global_width(32)_s8	$s0, [&GlobalVar];
	ld_global_width(64)_s8	$s0, [&GlobalVar];
	ld_global_width(128)_s8	$s0, [&GlobalVar];
	ld_global_width(256)_s8	$s0, [&GlobalVar];
	ld_global_width(512)_s8	$s0, [&GlobalVar];
	ld_global_width(1024)_s8	$s0, [&GlobalVar];
	ld_global_width(2048)_s8	$s0, [&GlobalVar];
	ld_global_width(4096)_s8	$s0, [&GlobalVar];
	ld_global_width(8192)_s8	$s0, [&GlobalVar];
	ld_global_width(16384)_s8	$s0, [&GlobalVar];
	ld_global_width(32768)_s8	$s0, [&GlobalVar];
	ld_global_width(65536)_s8	$s0, [&GlobalVar];
	ld_global_width(131072)_s8	$s0, [&GlobalVar];
	ld_global_width(262144)_s8	$s0, [&GlobalVar];
	ld_global_width(524288)_s8	$s0, [&GlobalVar];
	ld_global_width(1048576)_s8	$s0, [&GlobalVar];
	ld_global_width(2097152)_s8	$s0, [&GlobalVar];
	ld_global_width(4194304)_s8	$s0, [&GlobalVar];
	ld_global_width(8388608)_s8	$s0, [&GlobalVar];
	ld_global_width(16777216)_s8	$s0, [&GlobalVar];
	ld_global_width(33554432)_s8	$s0, [&GlobalVar];
	ld_global_width(67108864)_s8	$s0, [&GlobalVar];
	ld_global_width(134217728)_s8	$s0, [&GlobalVar];
	ld_global_width(268435456)_s8	$s0, [&GlobalVar];
	ld_global_width(536870912)_s8	$s0, [&GlobalVar];
	ld_global_width(1073741824)_s8	$s0, [&GlobalVar];
	ld_global_width(2147483648)_s8	$s0, [&GlobalVar];
	ld_global_width(WAVESIZE)_s8	$s0, [&GlobalVar];
	ld_global_width(all)_s8	$s0, [&GlobalVar];
	// 
	// Next sample
	// 
	ld_readonly_s8	$s0, [&ReadonlyVar];
	// 
	ld_readonly_const_s8	$s0, [&ReadonlyVar];
	ld_v2_readonly_s8	($s0, $s1), [&ReadonlyVar];
	ld_v3_readonly_s8	($s0, $s1, $s2), [&ReadonlyVar];
	ld_v4_readonly_s8	($s0, $s1, $s2, $s3), [&ReadonlyVar];
	ld_readonly_s8	$s0, [$d0+2];
	ld_readonly_s8	$s0, [$d0+3];
	ld_readonly_s8	$s0, [$d0+5];
	ld_readonly_s8	$s0, [$d0+6];
	ld_readonly_s8	$s0, [0];
	ld_readonly_align(2)_s8	$s0, [&ReadonlyVar];
	ld_readonly_align(4)_s8	$s0, [&ReadonlyVar];
	ld_readonly_align(8)_s8	$s0, [&ReadonlyVar];
	ld_readonly_align(16)_s8	$s0, [&ReadonlyVar];
	ld_readonly_align(32)_s8	$s0, [&ReadonlyVar];
	ld_readonly_align(64)_s8	$s0, [&ReadonlyVar];
	ld_readonly_align(128)_s8	$s0, [&ReadonlyVar];
	ld_readonly_align(256)_s8	$s0, [&ReadonlyVar];
	ld_readonly_equiv(1)_s8	$s0, [&ReadonlyVar];
	ld_readonly_equiv(2)_s8	$s0, [&ReadonlyVar];
	ld_readonly_equiv(255)_s8	$s0, [&ReadonlyVar];
	ld_readonly_width(2)_s8	$s0, [&ReadonlyVar];
	ld_readonly_width(4)_s8	$s0, [&ReadonlyVar];
	ld_readonly_width(8)_s8	$s0, [&ReadonlyVar];
	ld_readonly_width(16)_s8	$s0, [&ReadonlyVar];
	ld_readonly_width(32)_s8	$s0, [&ReadonlyVar];
	ld_readonly_width(64)_s8	$s0, [&ReadonlyVar];
	ld_readonly_width(128)_s8	$s0, [&ReadonlyVar];
	ld_readonly_width(256)_s8	$s0, [&ReadonlyVar];
	ld_readonly_width(512)_s8	$s0, [&ReadonlyVar];
	ld_readonly_width(1024)_s8	$s0, [&ReadonlyVar];
	ld_readonly_width(2048)_s8	$s0, [&ReadonlyVar];
	ld_readonly_width(4096)_s8	$s0, [&ReadonlyVar];
	ld_readonly_width(8192)_s8	$s0, [&ReadonlyVar];
	ld_readonly_width(16384)_s8	$s0, [&ReadonlyVar];
	ld_readonly_width(32768)_s8	$s0, [&ReadonlyVar];
	ld_readonly_width(65536)_s8	$s0, [&ReadonlyVar];
	ld_readonly_width(131072)_s8	$s0, [&ReadonlyVar];
	ld_readonly_width(262144)_s8	$s0, [&ReadonlyVar];
	ld_readonly_width(524288)_s8	$s0, [&ReadonlyVar];
	ld_readonly_width(1048576)_s8	$s0, [&ReadonlyVar];
	ld_readonly_width(2097152)_s8	$s0, [&ReadonlyVar];
	ld_readonly_width(4194304)_s8	$s0, [&ReadonlyVar];
	ld_readonly_width(8388608)_s8	$s0, [&ReadonlyVar];
	ld_readonly_width(16777216)_s8	$s0, [&ReadonlyVar];
	ld_readonly_width(33554432)_s8	$s0, [&ReadonlyVar];
	ld_readonly_width(67108864)_s8	$s0, [&ReadonlyVar];
	ld_readonly_width(134217728)_s8	$s0, [&ReadonlyVar];
	ld_readonly_width(268435456)_s8	$s0, [&ReadonlyVar];
	ld_readonly_width(536870912)_s8	$s0, [&ReadonlyVar];
	ld_readonly_width(1073741824)_s8	$s0, [&ReadonlyVar];
	ld_readonly_width(2147483648)_s8	$s0, [&ReadonlyVar];
	ld_readonly_width(WAVESIZE)_s8	$s0, [&ReadonlyVar];
	ld_readonly_width(all)_s8	$s0, [&ReadonlyVar];
	// 
	// Next sample
	// 
	ld_kernarg_s8	$s0, [$d0+2];
	// 
	ld_v2_kernarg_s8	($s0, $s1), [$d0+2];
	ld_v3_kernarg_s8	($s0, $s1, $s2), [$d0+2];
	ld_v4_kernarg_s8	($s0, $s1, $s2, $s3), [$d0+2];
	ld_kernarg_s8	$s0, [$d0+3];
	ld_kernarg_s8	$s0, [$d0+5];
	ld_kernarg_s8	$s0, [$d0+6];
	ld_kernarg_s8	$s0, [0];
	ld_kernarg_align(2)_s8	$s0, [$d0+2];
	ld_kernarg_align(4)_s8	$s0, [$d0+2];
	ld_kernarg_align(8)_s8	$s0, [$d0+2];
	ld_kernarg_align(16)_s8	$s0, [$d0+2];
	ld_kernarg_align(32)_s8	$s0, [$d0+2];
	ld_kernarg_align(64)_s8	$s0, [$d0+2];
	ld_kernarg_align(128)_s8	$s0, [$d0+2];
	ld_kernarg_align(256)_s8	$s0, [$d0+2];
	ld_kernarg_equiv(1)_s8	$s0, [$d0+2];
	ld_kernarg_equiv(2)_s8	$s0, [$d0+2];
	ld_kernarg_equiv(255)_s8	$s0, [$d0+2];
	ld_kernarg_width(2)_s8	$s0, [$d0+2];
	ld_kernarg_width(4)_s8	$s0, [$d0+2];
	ld_kernarg_width(8)_s8	$s0, [$d0+2];
	ld_kernarg_width(16)_s8	$s0, [$d0+2];
	ld_kernarg_width(32)_s8	$s0, [$d0+2];
	ld_kernarg_width(64)_s8	$s0, [$d0+2];
	ld_kernarg_width(128)_s8	$s0, [$d0+2];
	ld_kernarg_width(256)_s8	$s0, [$d0+2];
	ld_kernarg_width(512)_s8	$s0, [$d0+2];
	ld_kernarg_width(1024)_s8	$s0, [$d0+2];
	ld_kernarg_width(2048)_s8	$s0, [$d0+2];
	ld_kernarg_width(4096)_s8	$s0, [$d0+2];
	ld_kernarg_width(8192)_s8	$s0, [$d0+2];
	ld_kernarg_width(16384)_s8	$s0, [$d0+2];
	ld_kernarg_width(32768)_s8	$s0, [$d0+2];
	ld_kernarg_width(65536)_s8	$s0, [$d0+2];
	ld_kernarg_width(131072)_s8	$s0, [$d0+2];
	ld_kernarg_width(262144)_s8	$s0, [$d0+2];
	ld_kernarg_width(524288)_s8	$s0, [$d0+2];
	ld_kernarg_width(1048576)_s8	$s0, [$d0+2];
	ld_kernarg_width(2097152)_s8	$s0, [$d0+2];
	ld_kernarg_width(4194304)_s8	$s0, [$d0+2];
	ld_kernarg_width(8388608)_s8	$s0, [$d0+2];
	ld_kernarg_width(16777216)_s8	$s0, [$d0+2];
	ld_kernarg_width(33554432)_s8	$s0, [$d0+2];
	ld_kernarg_width(67108864)_s8	$s0, [$d0+2];
	ld_kernarg_width(134217728)_s8	$s0, [$d0+2];
	ld_kernarg_width(268435456)_s8	$s0, [$d0+2];
	ld_kernarg_width(536870912)_s8	$s0, [$d0+2];
	ld_kernarg_width(1073741824)_s8	$s0, [$d0+2];
	ld_kernarg_width(2147483648)_s8	$s0, [$d0+2];
	ld_kernarg_width(WAVESIZE)_s8	$s0, [$d0+2];
	ld_kernarg_width(all)_s8	$s0, [$d0+2];
	// 
	// Next sample
	// 
	ld_group_s8	$s0, [&GroupVar];
	// 
	ld_v2_group_s8	($s0, $s1), [&GroupVar];
	ld_v3_group_s8	($s0, $s1, $s2), [&GroupVar];
	ld_v4_group_s8	($s0, $s1, $s2, $s3), [&GroupVar];
	ld_group_s8	$s0, [$s0+2];
	ld_group_s8	$s0, [$s0+3];
	ld_group_s8	$s0, [$s0+5];
	ld_group_s8	$s0, [$s0+6];
	ld_group_s8	$s0, [0];
	ld_group_align(2)_s8	$s0, [&GroupVar];
	ld_group_align(4)_s8	$s0, [&GroupVar];
	ld_group_align(8)_s8	$s0, [&GroupVar];
	ld_group_align(16)_s8	$s0, [&GroupVar];
	ld_group_align(32)_s8	$s0, [&GroupVar];
	ld_group_align(64)_s8	$s0, [&GroupVar];
	ld_group_align(128)_s8	$s0, [&GroupVar];
	ld_group_align(256)_s8	$s0, [&GroupVar];
	ld_group_equiv(1)_s8	$s0, [&GroupVar];
	ld_group_equiv(2)_s8	$s0, [&GroupVar];
	ld_group_equiv(255)_s8	$s0, [&GroupVar];
	ld_group_width(2)_s8	$s0, [&GroupVar];
	ld_group_width(4)_s8	$s0, [&GroupVar];
	ld_group_width(8)_s8	$s0, [&GroupVar];
	ld_group_width(16)_s8	$s0, [&GroupVar];
	ld_group_width(32)_s8	$s0, [&GroupVar];
	ld_group_width(64)_s8	$s0, [&GroupVar];
	ld_group_width(128)_s8	$s0, [&GroupVar];
	ld_group_width(256)_s8	$s0, [&GroupVar];
	ld_group_width(512)_s8	$s0, [&GroupVar];
	ld_group_width(1024)_s8	$s0, [&GroupVar];
	ld_group_width(2048)_s8	$s0, [&GroupVar];
	ld_group_width(4096)_s8	$s0, [&GroupVar];
	ld_group_width(8192)_s8	$s0, [&GroupVar];
	ld_group_width(16384)_s8	$s0, [&GroupVar];
	ld_group_width(32768)_s8	$s0, [&GroupVar];
	ld_group_width(65536)_s8	$s0, [&GroupVar];
	ld_group_width(131072)_s8	$s0, [&GroupVar];
	ld_group_width(262144)_s8	$s0, [&GroupVar];
	ld_group_width(524288)_s8	$s0, [&GroupVar];
	ld_group_width(1048576)_s8	$s0, [&GroupVar];
	ld_group_width(2097152)_s8	$s0, [&GroupVar];
	ld_group_width(4194304)_s8	$s0, [&GroupVar];
	ld_group_width(8388608)_s8	$s0, [&GroupVar];
	ld_group_width(16777216)_s8	$s0, [&GroupVar];
	ld_group_width(33554432)_s8	$s0, [&GroupVar];
	ld_group_width(67108864)_s8	$s0, [&GroupVar];
	ld_group_width(134217728)_s8	$s0, [&GroupVar];
	ld_group_width(268435456)_s8	$s0, [&GroupVar];
	ld_group_width(536870912)_s8	$s0, [&GroupVar];
	ld_group_width(1073741824)_s8	$s0, [&GroupVar];
	ld_group_width(2147483648)_s8	$s0, [&GroupVar];
	ld_group_width(WAVESIZE)_s8	$s0, [&GroupVar];
	ld_group_width(all)_s8	$s0, [&GroupVar];
	// 
	// Next sample
	// 
	ld_private_s8	$s0, [&PrivateVar];
	// 
	ld_v2_private_s8	($s0, $s1), [&PrivateVar];
	ld_v3_private_s8	($s0, $s1, $s2), [&PrivateVar];
	ld_v4_private_s8	($s0, $s1, $s2, $s3), [&PrivateVar];
	ld_private_s8	$s0, [$s0+2];
	ld_private_s8	$s0, [$s0+3];
	ld_private_s8	$s0, [$s0+5];
	ld_private_s8	$s0, [$s0+6];
	ld_private_s8	$s0, [0];
	ld_private_align(2)_s8	$s0, [&PrivateVar];
	ld_private_align(4)_s8	$s0, [&PrivateVar];
	ld_private_align(8)_s8	$s0, [&PrivateVar];
	ld_private_align(16)_s8	$s0, [&PrivateVar];
	ld_private_align(32)_s8	$s0, [&PrivateVar];
	ld_private_align(64)_s8	$s0, [&PrivateVar];
	ld_private_align(128)_s8	$s0, [&PrivateVar];
	ld_private_align(256)_s8	$s0, [&PrivateVar];
	ld_private_equiv(1)_s8	$s0, [&PrivateVar];
	ld_private_equiv(2)_s8	$s0, [&PrivateVar];
	ld_private_equiv(255)_s8	$s0, [&PrivateVar];
	ld_private_width(2)_s8	$s0, [&PrivateVar];
	ld_private_width(4)_s8	$s0, [&PrivateVar];
	ld_private_width(8)_s8	$s0, [&PrivateVar];
	ld_private_width(16)_s8	$s0, [&PrivateVar];
	ld_private_width(32)_s8	$s0, [&PrivateVar];
	ld_private_width(64)_s8	$s0, [&PrivateVar];
	ld_private_width(128)_s8	$s0, [&PrivateVar];
	ld_private_width(256)_s8	$s0, [&PrivateVar];
	ld_private_width(512)_s8	$s0, [&PrivateVar];
	ld_private_width(1024)_s8	$s0, [&PrivateVar];
	ld_private_width(2048)_s8	$s0, [&PrivateVar];
	ld_private_width(4096)_s8	$s0, [&PrivateVar];
	ld_private_width(8192)_s8	$s0, [&PrivateVar];
	ld_private_width(16384)_s8	$s0, [&PrivateVar];
	ld_private_width(32768)_s8	$s0, [&PrivateVar];
	ld_private_width(65536)_s8	$s0, [&PrivateVar];
	ld_private_width(131072)_s8	$s0, [&PrivateVar];
	ld_private_width(262144)_s8	$s0, [&PrivateVar];
	ld_private_width(524288)_s8	$s0, [&PrivateVar];
	ld_private_width(1048576)_s8	$s0, [&PrivateVar];
	ld_private_width(2097152)_s8	$s0, [&PrivateVar];
	ld_private_width(4194304)_s8	$s0, [&PrivateVar];
	ld_private_width(8388608)_s8	$s0, [&PrivateVar];
	ld_private_width(16777216)_s8	$s0, [&PrivateVar];
	ld_private_width(33554432)_s8	$s0, [&PrivateVar];
	ld_private_width(67108864)_s8	$s0, [&PrivateVar];
	ld_private_width(134217728)_s8	$s0, [&PrivateVar];
	ld_private_width(268435456)_s8	$s0, [&PrivateVar];
	ld_private_width(536870912)_s8	$s0, [&PrivateVar];
	ld_private_width(1073741824)_s8	$s0, [&PrivateVar];
	ld_private_width(2147483648)_s8	$s0, [&PrivateVar];
	ld_private_width(WAVESIZE)_s8	$s0, [&PrivateVar];
	ld_private_width(all)_s8	$s0, [&PrivateVar];
	// 
	// Next sample
	// 
	ld_spill_s8	$s0, [%SpillVar];
	// 
	ld_v2_spill_s8	($s0, $s1), [%SpillVar];
	ld_v3_spill_s8	($s0, $s1, $s2), [%SpillVar];
	ld_v4_spill_s8	($s0, $s1, $s2, $s3), [%SpillVar];
	ld_spill_align(2)_s8	$s0, [%SpillVar];
	ld_spill_align(4)_s8	$s0, [%SpillVar];
	ld_spill_align(8)_s8	$s0, [%SpillVar];
	ld_spill_align(16)_s8	$s0, [%SpillVar];
	ld_spill_align(32)_s8	$s0, [%SpillVar];
	ld_spill_align(64)_s8	$s0, [%SpillVar];
	ld_spill_align(128)_s8	$s0, [%SpillVar];
	ld_spill_align(256)_s8	$s0, [%SpillVar];
	ld_spill_equiv(1)_s8	$s0, [%SpillVar];
	ld_spill_equiv(2)_s8	$s0, [%SpillVar];
	ld_spill_equiv(255)_s8	$s0, [%SpillVar];
	ld_spill_width(2)_s8	$s0, [%SpillVar];
	ld_spill_width(4)_s8	$s0, [%SpillVar];
	ld_spill_width(8)_s8	$s0, [%SpillVar];
	ld_spill_width(16)_s8	$s0, [%SpillVar];
	ld_spill_width(32)_s8	$s0, [%SpillVar];
	ld_spill_width(64)_s8	$s0, [%SpillVar];
	ld_spill_width(128)_s8	$s0, [%SpillVar];
	ld_spill_width(256)_s8	$s0, [%SpillVar];
	ld_spill_width(512)_s8	$s0, [%SpillVar];
	ld_spill_width(1024)_s8	$s0, [%SpillVar];
	ld_spill_width(2048)_s8	$s0, [%SpillVar];
	ld_spill_width(4096)_s8	$s0, [%SpillVar];
	ld_spill_width(8192)_s8	$s0, [%SpillVar];
	ld_spill_width(16384)_s8	$s0, [%SpillVar];
	ld_spill_width(32768)_s8	$s0, [%SpillVar];
	ld_spill_width(65536)_s8	$s0, [%SpillVar];
	ld_spill_width(131072)_s8	$s0, [%SpillVar];
	ld_spill_width(262144)_s8	$s0, [%SpillVar];
	ld_spill_width(524288)_s8	$s0, [%SpillVar];
	ld_spill_width(1048576)_s8	$s0, [%SpillVar];
	ld_spill_width(2097152)_s8	$s0, [%SpillVar];
	ld_spill_width(4194304)_s8	$s0, [%SpillVar];
	ld_spill_width(8388608)_s8	$s0, [%SpillVar];
	ld_spill_width(16777216)_s8	$s0, [%SpillVar];
	ld_spill_width(33554432)_s8	$s0, [%SpillVar];
	ld_spill_width(67108864)_s8	$s0, [%SpillVar];
	ld_spill_width(134217728)_s8	$s0, [%SpillVar];
	ld_spill_width(268435456)_s8	$s0, [%SpillVar];
	ld_spill_width(536870912)_s8	$s0, [%SpillVar];
	ld_spill_width(1073741824)_s8	$s0, [%SpillVar];
	ld_spill_width(2147483648)_s8	$s0, [%SpillVar];
	ld_spill_width(WAVESIZE)_s8	$s0, [%SpillVar];
	ld_spill_width(all)_s8	$s0, [%SpillVar];
	// 
	// Next sample
	// 
	ld_s16	$s0, [$d0+2];
	// 
	ld_const_s16	$s0, [$d0+2];
	ld_v2_s16	($s0, $s1), [$d0+2];
	ld_v3_s16	($s0, $s1, $s2), [$d0+2];
	ld_v4_s16	($s0, $s1, $s2, $s3), [$d0+2];
	ld_s16	$s0, [$d0+3];
	ld_s16	$s0, [$d0+5];
	ld_s16	$s0, [$d0+6];
	ld_s16	$s0, [0];
	ld_align(2)_s16	$s0, [$d0+2];
	ld_align(4)_s16	$s0, [$d0+2];
	ld_align(8)_s16	$s0, [$d0+2];
	ld_align(16)_s16	$s0, [$d0+2];
	ld_align(32)_s16	$s0, [$d0+2];
	ld_align(64)_s16	$s0, [$d0+2];
	ld_align(128)_s16	$s0, [$d0+2];
	ld_align(256)_s16	$s0, [$d0+2];
	ld_equiv(1)_s16	$s0, [$d0+2];
	ld_equiv(2)_s16	$s0, [$d0+2];
	ld_equiv(255)_s16	$s0, [$d0+2];
	ld_width(2)_s16	$s0, [$d0+2];
	ld_width(4)_s16	$s0, [$d0+2];
	ld_width(8)_s16	$s0, [$d0+2];
	ld_width(16)_s16	$s0, [$d0+2];
	ld_width(32)_s16	$s0, [$d0+2];
	ld_width(64)_s16	$s0, [$d0+2];
	ld_width(128)_s16	$s0, [$d0+2];
	ld_width(256)_s16	$s0, [$d0+2];
	ld_width(512)_s16	$s0, [$d0+2];
	ld_width(1024)_s16	$s0, [$d0+2];
	ld_width(2048)_s16	$s0, [$d0+2];
	ld_width(4096)_s16	$s0, [$d0+2];
	ld_width(8192)_s16	$s0, [$d0+2];
	ld_width(16384)_s16	$s0, [$d0+2];
	ld_width(32768)_s16	$s0, [$d0+2];
	ld_width(65536)_s16	$s0, [$d0+2];
	ld_width(131072)_s16	$s0, [$d0+2];
	ld_width(262144)_s16	$s0, [$d0+2];
	ld_width(524288)_s16	$s0, [$d0+2];
	ld_width(1048576)_s16	$s0, [$d0+2];
	ld_width(2097152)_s16	$s0, [$d0+2];
	ld_width(4194304)_s16	$s0, [$d0+2];
	ld_width(8388608)_s16	$s0, [$d0+2];
	ld_width(16777216)_s16	$s0, [$d0+2];
	ld_width(33554432)_s16	$s0, [$d0+2];
	ld_width(67108864)_s16	$s0, [$d0+2];
	ld_width(134217728)_s16	$s0, [$d0+2];
	ld_width(268435456)_s16	$s0, [$d0+2];
	ld_width(536870912)_s16	$s0, [$d0+2];
	ld_width(1073741824)_s16	$s0, [$d0+2];
	ld_width(2147483648)_s16	$s0, [$d0+2];
	ld_width(WAVESIZE)_s16	$s0, [$d0+2];
	ld_width(all)_s16	$s0, [$d0+2];
	// 
	// Next sample
	// 
	ld_global_s16	$s0, [&GlobalVar];
	// 
	ld_global_const_s16	$s0, [&GlobalVar];
	ld_v2_global_s16	($s0, $s1), [&GlobalVar];
	ld_v3_global_s16	($s0, $s1, $s2), [&GlobalVar];
	ld_v4_global_s16	($s0, $s1, $s2, $s3), [&GlobalVar];
	ld_global_s16	$s0, [$d0+2];
	ld_global_s16	$s0, [$d0+3];
	ld_global_s16	$s0, [$d0+5];
	ld_global_s16	$s0, [$d0+6];
	ld_global_s16	$s0, [0];
	ld_global_align(2)_s16	$s0, [&GlobalVar];
	ld_global_align(4)_s16	$s0, [&GlobalVar];
	ld_global_align(8)_s16	$s0, [&GlobalVar];
	ld_global_align(16)_s16	$s0, [&GlobalVar];
	ld_global_align(32)_s16	$s0, [&GlobalVar];
	ld_global_align(64)_s16	$s0, [&GlobalVar];
	ld_global_align(128)_s16	$s0, [&GlobalVar];
	ld_global_align(256)_s16	$s0, [&GlobalVar];
	ld_global_equiv(1)_s16	$s0, [&GlobalVar];
	ld_global_equiv(2)_s16	$s0, [&GlobalVar];
	ld_global_equiv(255)_s16	$s0, [&GlobalVar];
	ld_global_width(2)_s16	$s0, [&GlobalVar];
	ld_global_width(4)_s16	$s0, [&GlobalVar];
	ld_global_width(8)_s16	$s0, [&GlobalVar];
	ld_global_width(16)_s16	$s0, [&GlobalVar];
	ld_global_width(32)_s16	$s0, [&GlobalVar];
	ld_global_width(64)_s16	$s0, [&GlobalVar];
	ld_global_width(128)_s16	$s0, [&GlobalVar];
	ld_global_width(256)_s16	$s0, [&GlobalVar];
	ld_global_width(512)_s16	$s0, [&GlobalVar];
	ld_global_width(1024)_s16	$s0, [&GlobalVar];
	ld_global_width(2048)_s16	$s0, [&GlobalVar];
	ld_global_width(4096)_s16	$s0, [&GlobalVar];
	ld_global_width(8192)_s16	$s0, [&GlobalVar];
	ld_global_width(16384)_s16	$s0, [&GlobalVar];
	ld_global_width(32768)_s16	$s0, [&GlobalVar];
	ld_global_width(65536)_s16	$s0, [&GlobalVar];
	ld_global_width(131072)_s16	$s0, [&GlobalVar];
	ld_global_width(262144)_s16	$s0, [&GlobalVar];
	ld_global_width(524288)_s16	$s0, [&GlobalVar];
	ld_global_width(1048576)_s16	$s0, [&GlobalVar];
	ld_global_width(2097152)_s16	$s0, [&GlobalVar];
	ld_global_width(4194304)_s16	$s0, [&GlobalVar];
	ld_global_width(8388608)_s16	$s0, [&GlobalVar];
	ld_global_width(16777216)_s16	$s0, [&GlobalVar];
	ld_global_width(33554432)_s16	$s0, [&GlobalVar];
	ld_global_width(67108864)_s16	$s0, [&GlobalVar];
	ld_global_width(134217728)_s16	$s0, [&GlobalVar];
	ld_global_width(268435456)_s16	$s0, [&GlobalVar];
	ld_global_width(536870912)_s16	$s0, [&GlobalVar];
	ld_global_width(1073741824)_s16	$s0, [&GlobalVar];
	ld_global_width(2147483648)_s16	$s0, [&GlobalVar];
	ld_global_width(WAVESIZE)_s16	$s0, [&GlobalVar];
	ld_global_width(all)_s16	$s0, [&GlobalVar];
	// 
	// Next sample
	// 
	ld_readonly_s16	$s0, [&ReadonlyVar];
	// 
	ld_readonly_const_s16	$s0, [&ReadonlyVar];
	ld_v2_readonly_s16	($s0, $s1), [&ReadonlyVar];
	ld_v3_readonly_s16	($s0, $s1, $s2), [&ReadonlyVar];
	ld_v4_readonly_s16	($s0, $s1, $s2, $s3), [&ReadonlyVar];
	ld_readonly_s16	$s0, [$d0+2];
	ld_readonly_s16	$s0, [$d0+3];
	ld_readonly_s16	$s0, [$d0+5];
	ld_readonly_s16	$s0, [$d0+6];
	ld_readonly_s16	$s0, [0];
	ld_readonly_align(2)_s16	$s0, [&ReadonlyVar];
	ld_readonly_align(4)_s16	$s0, [&ReadonlyVar];
	ld_readonly_align(8)_s16	$s0, [&ReadonlyVar];
	ld_readonly_align(16)_s16	$s0, [&ReadonlyVar];
	ld_readonly_align(32)_s16	$s0, [&ReadonlyVar];
	ld_readonly_align(64)_s16	$s0, [&ReadonlyVar];
	ld_readonly_align(128)_s16	$s0, [&ReadonlyVar];
	ld_readonly_align(256)_s16	$s0, [&ReadonlyVar];
	ld_readonly_equiv(1)_s16	$s0, [&ReadonlyVar];
	ld_readonly_equiv(2)_s16	$s0, [&ReadonlyVar];
	ld_readonly_equiv(255)_s16	$s0, [&ReadonlyVar];
	ld_readonly_width(2)_s16	$s0, [&ReadonlyVar];
	ld_readonly_width(4)_s16	$s0, [&ReadonlyVar];
	ld_readonly_width(8)_s16	$s0, [&ReadonlyVar];
	ld_readonly_width(16)_s16	$s0, [&ReadonlyVar];
	ld_readonly_width(32)_s16	$s0, [&ReadonlyVar];
	ld_readonly_width(64)_s16	$s0, [&ReadonlyVar];
	ld_readonly_width(128)_s16	$s0, [&ReadonlyVar];
	ld_readonly_width(256)_s16	$s0, [&ReadonlyVar];
	ld_readonly_width(512)_s16	$s0, [&ReadonlyVar];
	ld_readonly_width(1024)_s16	$s0, [&ReadonlyVar];
	ld_readonly_width(2048)_s16	$s0, [&ReadonlyVar];
	ld_readonly_width(4096)_s16	$s0, [&ReadonlyVar];
	ld_readonly_width(8192)_s16	$s0, [&ReadonlyVar];
	ld_readonly_width(16384)_s16	$s0, [&ReadonlyVar];
	ld_readonly_width(32768)_s16	$s0, [&ReadonlyVar];
	ld_readonly_width(65536)_s16	$s0, [&ReadonlyVar];
	ld_readonly_width(131072)_s16	$s0, [&ReadonlyVar];
	ld_readonly_width(262144)_s16	$s0, [&ReadonlyVar];
	ld_readonly_width(524288)_s16	$s0, [&ReadonlyVar];
	ld_readonly_width(1048576)_s16	$s0, [&ReadonlyVar];
	ld_readonly_width(2097152)_s16	$s0, [&ReadonlyVar];
	ld_readonly_width(4194304)_s16	$s0, [&ReadonlyVar];
	ld_readonly_width(8388608)_s16	$s0, [&ReadonlyVar];
	ld_readonly_width(16777216)_s16	$s0, [&ReadonlyVar];
	ld_readonly_width(33554432)_s16	$s0, [&ReadonlyVar];
	ld_readonly_width(67108864)_s16	$s0, [&ReadonlyVar];
	ld_readonly_width(134217728)_s16	$s0, [&ReadonlyVar];
	ld_readonly_width(268435456)_s16	$s0, [&ReadonlyVar];
	ld_readonly_width(536870912)_s16	$s0, [&ReadonlyVar];
	ld_readonly_width(1073741824)_s16	$s0, [&ReadonlyVar];
	ld_readonly_width(2147483648)_s16	$s0, [&ReadonlyVar];
	ld_readonly_width(WAVESIZE)_s16	$s0, [&ReadonlyVar];
	ld_readonly_width(all)_s16	$s0, [&ReadonlyVar];
	// 
	// Next sample
	// 
	ld_kernarg_s16	$s0, [$d0+2];
	// 
	ld_v2_kernarg_s16	($s0, $s1), [$d0+2];
	ld_v3_kernarg_s16	($s0, $s1, $s2), [$d0+2];
	ld_v4_kernarg_s16	($s0, $s1, $s2, $s3), [$d0+2];
	ld_kernarg_s16	$s0, [$d0+3];
	ld_kernarg_s16	$s0, [$d0+5];
	ld_kernarg_s16	$s0, [$d0+6];
	ld_kernarg_s16	$s0, [0];
	ld_kernarg_align(2)_s16	$s0, [$d0+2];
	ld_kernarg_align(4)_s16	$s0, [$d0+2];
	ld_kernarg_align(8)_s16	$s0, [$d0+2];
	ld_kernarg_align(16)_s16	$s0, [$d0+2];
	ld_kernarg_align(32)_s16	$s0, [$d0+2];
	ld_kernarg_align(64)_s16	$s0, [$d0+2];
	ld_kernarg_align(128)_s16	$s0, [$d0+2];
	ld_kernarg_align(256)_s16	$s0, [$d0+2];
	ld_kernarg_equiv(1)_s16	$s0, [$d0+2];
	ld_kernarg_equiv(2)_s16	$s0, [$d0+2];
	ld_kernarg_equiv(255)_s16	$s0, [$d0+2];
	ld_kernarg_width(2)_s16	$s0, [$d0+2];
	ld_kernarg_width(4)_s16	$s0, [$d0+2];
	ld_kernarg_width(8)_s16	$s0, [$d0+2];
	ld_kernarg_width(16)_s16	$s0, [$d0+2];
	ld_kernarg_width(32)_s16	$s0, [$d0+2];
	ld_kernarg_width(64)_s16	$s0, [$d0+2];
	ld_kernarg_width(128)_s16	$s0, [$d0+2];
	ld_kernarg_width(256)_s16	$s0, [$d0+2];
	ld_kernarg_width(512)_s16	$s0, [$d0+2];
	ld_kernarg_width(1024)_s16	$s0, [$d0+2];
	ld_kernarg_width(2048)_s16	$s0, [$d0+2];
	ld_kernarg_width(4096)_s16	$s0, [$d0+2];
	ld_kernarg_width(8192)_s16	$s0, [$d0+2];
	ld_kernarg_width(16384)_s16	$s0, [$d0+2];
	ld_kernarg_width(32768)_s16	$s0, [$d0+2];
	ld_kernarg_width(65536)_s16	$s0, [$d0+2];
	ld_kernarg_width(131072)_s16	$s0, [$d0+2];
	ld_kernarg_width(262144)_s16	$s0, [$d0+2];
	ld_kernarg_width(524288)_s16	$s0, [$d0+2];
	ld_kernarg_width(1048576)_s16	$s0, [$d0+2];
	ld_kernarg_width(2097152)_s16	$s0, [$d0+2];
	ld_kernarg_width(4194304)_s16	$s0, [$d0+2];
	ld_kernarg_width(8388608)_s16	$s0, [$d0+2];
	ld_kernarg_width(16777216)_s16	$s0, [$d0+2];
	ld_kernarg_width(33554432)_s16	$s0, [$d0+2];
	ld_kernarg_width(67108864)_s16	$s0, [$d0+2];
	ld_kernarg_width(134217728)_s16	$s0, [$d0+2];
	ld_kernarg_width(268435456)_s16	$s0, [$d0+2];
	ld_kernarg_width(536870912)_s16	$s0, [$d0+2];
	ld_kernarg_width(1073741824)_s16	$s0, [$d0+2];
	ld_kernarg_width(2147483648)_s16	$s0, [$d0+2];
	ld_kernarg_width(WAVESIZE)_s16	$s0, [$d0+2];
	ld_kernarg_width(all)_s16	$s0, [$d0+2];
	// 
	// Next sample
	// 
	ld_group_s16	$s0, [&GroupVar];
	// 
	ld_v2_group_s16	($s0, $s1), [&GroupVar];
	ld_v3_group_s16	($s0, $s1, $s2), [&GroupVar];
	ld_v4_group_s16	($s0, $s1, $s2, $s3), [&GroupVar];
	ld_group_s16	$s0, [$s0+2];
	ld_group_s16	$s0, [$s0+3];
	ld_group_s16	$s0, [$s0+5];
	ld_group_s16	$s0, [$s0+6];
	ld_group_s16	$s0, [0];
	ld_group_align(2)_s16	$s0, [&GroupVar];
	ld_group_align(4)_s16	$s0, [&GroupVar];
	ld_group_align(8)_s16	$s0, [&GroupVar];
	ld_group_align(16)_s16	$s0, [&GroupVar];
	ld_group_align(32)_s16	$s0, [&GroupVar];
	ld_group_align(64)_s16	$s0, [&GroupVar];
	ld_group_align(128)_s16	$s0, [&GroupVar];
	ld_group_align(256)_s16	$s0, [&GroupVar];
	ld_group_equiv(1)_s16	$s0, [&GroupVar];
	ld_group_equiv(2)_s16	$s0, [&GroupVar];
	ld_group_equiv(255)_s16	$s0, [&GroupVar];
	ld_group_width(2)_s16	$s0, [&GroupVar];
	ld_group_width(4)_s16	$s0, [&GroupVar];
	ld_group_width(8)_s16	$s0, [&GroupVar];
	ld_group_width(16)_s16	$s0, [&GroupVar];
	ld_group_width(32)_s16	$s0, [&GroupVar];
	ld_group_width(64)_s16	$s0, [&GroupVar];
	ld_group_width(128)_s16	$s0, [&GroupVar];
	ld_group_width(256)_s16	$s0, [&GroupVar];
	ld_group_width(512)_s16	$s0, [&GroupVar];
	ld_group_width(1024)_s16	$s0, [&GroupVar];
	ld_group_width(2048)_s16	$s0, [&GroupVar];
	ld_group_width(4096)_s16	$s0, [&GroupVar];
	ld_group_width(8192)_s16	$s0, [&GroupVar];
	ld_group_width(16384)_s16	$s0, [&GroupVar];
	ld_group_width(32768)_s16	$s0, [&GroupVar];
	ld_group_width(65536)_s16	$s0, [&GroupVar];
	ld_group_width(131072)_s16	$s0, [&GroupVar];
	ld_group_width(262144)_s16	$s0, [&GroupVar];
	ld_group_width(524288)_s16	$s0, [&GroupVar];
	ld_group_width(1048576)_s16	$s0, [&GroupVar];
	ld_group_width(2097152)_s16	$s0, [&GroupVar];
	ld_group_width(4194304)_s16	$s0, [&GroupVar];
	ld_group_width(8388608)_s16	$s0, [&GroupVar];
	ld_group_width(16777216)_s16	$s0, [&GroupVar];
	ld_group_width(33554432)_s16	$s0, [&GroupVar];
	ld_group_width(67108864)_s16	$s0, [&GroupVar];
	ld_group_width(134217728)_s16	$s0, [&GroupVar];
	ld_group_width(268435456)_s16	$s0, [&GroupVar];
	ld_group_width(536870912)_s16	$s0, [&GroupVar];
	ld_group_width(1073741824)_s16	$s0, [&GroupVar];
	ld_group_width(2147483648)_s16	$s0, [&GroupVar];
	ld_group_width(WAVESIZE)_s16	$s0, [&GroupVar];
	ld_group_width(all)_s16	$s0, [&GroupVar];
	// 
	// Next sample
	// 
	ld_private_s16	$s0, [&PrivateVar];
	// 
	ld_v2_private_s16	($s0, $s1), [&PrivateVar];
	ld_v3_private_s16	($s0, $s1, $s2), [&PrivateVar];
	ld_v4_private_s16	($s0, $s1, $s2, $s3), [&PrivateVar];
	ld_private_s16	$s0, [$s0+2];
	ld_private_s16	$s0, [$s0+3];
	ld_private_s16	$s0, [$s0+5];
	ld_private_s16	$s0, [$s0+6];
	ld_private_s16	$s0, [0];
	ld_private_align(2)_s16	$s0, [&PrivateVar];
	ld_private_align(4)_s16	$s0, [&PrivateVar];
	ld_private_align(8)_s16	$s0, [&PrivateVar];
	ld_private_align(16)_s16	$s0, [&PrivateVar];
	ld_private_align(32)_s16	$s0, [&PrivateVar];
	ld_private_align(64)_s16	$s0, [&PrivateVar];
	ld_private_align(128)_s16	$s0, [&PrivateVar];
	ld_private_align(256)_s16	$s0, [&PrivateVar];
	ld_private_equiv(1)_s16	$s0, [&PrivateVar];
	ld_private_equiv(2)_s16	$s0, [&PrivateVar];
	ld_private_equiv(255)_s16	$s0, [&PrivateVar];
	ld_private_width(2)_s16	$s0, [&PrivateVar];
	ld_private_width(4)_s16	$s0, [&PrivateVar];
	ld_private_width(8)_s16	$s0, [&PrivateVar];
	ld_private_width(16)_s16	$s0, [&PrivateVar];
	ld_private_width(32)_s16	$s0, [&PrivateVar];
	ld_private_width(64)_s16	$s0, [&PrivateVar];
	ld_private_width(128)_s16	$s0, [&PrivateVar];
	ld_private_width(256)_s16	$s0, [&PrivateVar];
	ld_private_width(512)_s16	$s0, [&PrivateVar];
	ld_private_width(1024)_s16	$s0, [&PrivateVar];
	ld_private_width(2048)_s16	$s0, [&PrivateVar];
	ld_private_width(4096)_s16	$s0, [&PrivateVar];
	ld_private_width(8192)_s16	$s0, [&PrivateVar];
	ld_private_width(16384)_s16	$s0, [&PrivateVar];
	ld_private_width(32768)_s16	$s0, [&PrivateVar];
	ld_private_width(65536)_s16	$s0, [&PrivateVar];
	ld_private_width(131072)_s16	$s0, [&PrivateVar];
	ld_private_width(262144)_s16	$s0, [&PrivateVar];
	ld_private_width(524288)_s16	$s0, [&PrivateVar];
	ld_private_width(1048576)_s16	$s0, [&PrivateVar];
	ld_private_width(2097152)_s16	$s0, [&PrivateVar];
	ld_private_width(4194304)_s16	$s0, [&PrivateVar];
	ld_private_width(8388608)_s16	$s0, [&PrivateVar];
	ld_private_width(16777216)_s16	$s0, [&PrivateVar];
	ld_private_width(33554432)_s16	$s0, [&PrivateVar];
	ld_private_width(67108864)_s16	$s0, [&PrivateVar];
	ld_private_width(134217728)_s16	$s0, [&PrivateVar];
	ld_private_width(268435456)_s16	$s0, [&PrivateVar];
	ld_private_width(536870912)_s16	$s0, [&PrivateVar];
	ld_private_width(1073741824)_s16	$s0, [&PrivateVar];
	ld_private_width(2147483648)_s16	$s0, [&PrivateVar];
	ld_private_width(WAVESIZE)_s16	$s0, [&PrivateVar];
	ld_private_width(all)_s16	$s0, [&PrivateVar];
	// 
	// Next sample
	// 
	ld_spill_s16	$s0, [%SpillVar];
	// 
	ld_v2_spill_s16	($s0, $s1), [%SpillVar];
	ld_v3_spill_s16	($s0, $s1, $s2), [%SpillVar];
	ld_v4_spill_s16	($s0, $s1, $s2, $s3), [%SpillVar];
	ld_spill_align(2)_s16	$s0, [%SpillVar];
	ld_spill_align(4)_s16	$s0, [%SpillVar];
	ld_spill_align(8)_s16	$s0, [%SpillVar];
	ld_spill_align(16)_s16	$s0, [%SpillVar];
	ld_spill_align(32)_s16	$s0, [%SpillVar];
	ld_spill_align(64)_s16	$s0, [%SpillVar];
	ld_spill_align(128)_s16	$s0, [%SpillVar];
	ld_spill_align(256)_s16	$s0, [%SpillVar];
	ld_spill_equiv(1)_s16	$s0, [%SpillVar];
	ld_spill_equiv(2)_s16	$s0, [%SpillVar];
	ld_spill_equiv(255)_s16	$s0, [%SpillVar];
	ld_spill_width(2)_s16	$s0, [%SpillVar];
	ld_spill_width(4)_s16	$s0, [%SpillVar];
	ld_spill_width(8)_s16	$s0, [%SpillVar];
	ld_spill_width(16)_s16	$s0, [%SpillVar];
	ld_spill_width(32)_s16	$s0, [%SpillVar];
	ld_spill_width(64)_s16	$s0, [%SpillVar];
	ld_spill_width(128)_s16	$s0, [%SpillVar];
	ld_spill_width(256)_s16	$s0, [%SpillVar];
	ld_spill_width(512)_s16	$s0, [%SpillVar];
	ld_spill_width(1024)_s16	$s0, [%SpillVar];
	ld_spill_width(2048)_s16	$s0, [%SpillVar];
	ld_spill_width(4096)_s16	$s0, [%SpillVar];
	ld_spill_width(8192)_s16	$s0, [%SpillVar];
	ld_spill_width(16384)_s16	$s0, [%SpillVar];
	ld_spill_width(32768)_s16	$s0, [%SpillVar];
	ld_spill_width(65536)_s16	$s0, [%SpillVar];
	ld_spill_width(131072)_s16	$s0, [%SpillVar];
	ld_spill_width(262144)_s16	$s0, [%SpillVar];
	ld_spill_width(524288)_s16	$s0, [%SpillVar];
	ld_spill_width(1048576)_s16	$s0, [%SpillVar];
	ld_spill_width(2097152)_s16	$s0, [%SpillVar];
	ld_spill_width(4194304)_s16	$s0, [%SpillVar];
	ld_spill_width(8388608)_s16	$s0, [%SpillVar];
	ld_spill_width(16777216)_s16	$s0, [%SpillVar];
	ld_spill_width(33554432)_s16	$s0, [%SpillVar];
	ld_spill_width(67108864)_s16	$s0, [%SpillVar];
	ld_spill_width(134217728)_s16	$s0, [%SpillVar];
	ld_spill_width(268435456)_s16	$s0, [%SpillVar];
	ld_spill_width(536870912)_s16	$s0, [%SpillVar];
	ld_spill_width(1073741824)_s16	$s0, [%SpillVar];
	ld_spill_width(2147483648)_s16	$s0, [%SpillVar];
	ld_spill_width(WAVESIZE)_s16	$s0, [%SpillVar];
	ld_spill_width(all)_s16	$s0, [%SpillVar];
	// 
	// Next sample
	// 
	ld_s32	$s0, [$d0+2];
	// 
	ld_const_s32	$s0, [$d0+2];
	ld_v2_s32	($s0, $s1), [$d0+2];
	ld_v3_s32	($s0, $s1, $s2), [$d0+2];
	ld_v4_s32	($s0, $s1, $s2, $s3), [$d0+2];
	ld_s32	$s0, [$d0+3];
	ld_s32	$s0, [$d0+5];
	ld_s32	$s0, [$d0+6];
	ld_s32	$s0, [0];
	ld_align(2)_s32	$s0, [$d0+2];
	ld_align(4)_s32	$s0, [$d0+2];
	ld_align(8)_s32	$s0, [$d0+2];
	ld_align(16)_s32	$s0, [$d0+2];
	ld_align(32)_s32	$s0, [$d0+2];
	ld_align(64)_s32	$s0, [$d0+2];
	ld_align(128)_s32	$s0, [$d0+2];
	ld_align(256)_s32	$s0, [$d0+2];
	ld_equiv(1)_s32	$s0, [$d0+2];
	ld_equiv(2)_s32	$s0, [$d0+2];
	ld_equiv(255)_s32	$s0, [$d0+2];
	ld_width(2)_s32	$s0, [$d0+2];
	ld_width(4)_s32	$s0, [$d0+2];
	ld_width(8)_s32	$s0, [$d0+2];
	ld_width(16)_s32	$s0, [$d0+2];
	ld_width(32)_s32	$s0, [$d0+2];
	ld_width(64)_s32	$s0, [$d0+2];
	ld_width(128)_s32	$s0, [$d0+2];
	ld_width(256)_s32	$s0, [$d0+2];
	ld_width(512)_s32	$s0, [$d0+2];
	ld_width(1024)_s32	$s0, [$d0+2];
	ld_width(2048)_s32	$s0, [$d0+2];
	ld_width(4096)_s32	$s0, [$d0+2];
	ld_width(8192)_s32	$s0, [$d0+2];
	ld_width(16384)_s32	$s0, [$d0+2];
	ld_width(32768)_s32	$s0, [$d0+2];
	ld_width(65536)_s32	$s0, [$d0+2];
	ld_width(131072)_s32	$s0, [$d0+2];
	ld_width(262144)_s32	$s0, [$d0+2];
	ld_width(524288)_s32	$s0, [$d0+2];
	ld_width(1048576)_s32	$s0, [$d0+2];
	ld_width(2097152)_s32	$s0, [$d0+2];
	ld_width(4194304)_s32	$s0, [$d0+2];
	ld_width(8388608)_s32	$s0, [$d0+2];
	ld_width(16777216)_s32	$s0, [$d0+2];
	ld_width(33554432)_s32	$s0, [$d0+2];
	ld_width(67108864)_s32	$s0, [$d0+2];
	ld_width(134217728)_s32	$s0, [$d0+2];
	ld_width(268435456)_s32	$s0, [$d0+2];
	ld_width(536870912)_s32	$s0, [$d0+2];
	ld_width(1073741824)_s32	$s0, [$d0+2];
	ld_width(2147483648)_s32	$s0, [$d0+2];
	ld_width(WAVESIZE)_s32	$s0, [$d0+2];
	ld_width(all)_s32	$s0, [$d0+2];
	// 
	// Next sample
	// 
	ld_global_s32	$s0, [&GlobalVar];
	// 
	ld_global_const_s32	$s0, [&GlobalVar];
	ld_v2_global_s32	($s0, $s1), [&GlobalVar];
	ld_v3_global_s32	($s0, $s1, $s2), [&GlobalVar];
	ld_v4_global_s32	($s0, $s1, $s2, $s3), [&GlobalVar];
	ld_global_s32	$s0, [$d0+2];
	ld_global_s32	$s0, [$d0+3];
	ld_global_s32	$s0, [$d0+5];
	ld_global_s32	$s0, [$d0+6];
	ld_global_s32	$s0, [0];
	ld_global_align(2)_s32	$s0, [&GlobalVar];
	ld_global_align(4)_s32	$s0, [&GlobalVar];
	ld_global_align(8)_s32	$s0, [&GlobalVar];
	ld_global_align(16)_s32	$s0, [&GlobalVar];
	ld_global_align(32)_s32	$s0, [&GlobalVar];
	ld_global_align(64)_s32	$s0, [&GlobalVar];
	ld_global_align(128)_s32	$s0, [&GlobalVar];
	ld_global_align(256)_s32	$s0, [&GlobalVar];
	ld_global_equiv(1)_s32	$s0, [&GlobalVar];
	ld_global_equiv(2)_s32	$s0, [&GlobalVar];
	ld_global_equiv(255)_s32	$s0, [&GlobalVar];
	ld_global_width(2)_s32	$s0, [&GlobalVar];
	ld_global_width(4)_s32	$s0, [&GlobalVar];
	ld_global_width(8)_s32	$s0, [&GlobalVar];
	ld_global_width(16)_s32	$s0, [&GlobalVar];
	ld_global_width(32)_s32	$s0, [&GlobalVar];
	ld_global_width(64)_s32	$s0, [&GlobalVar];
	ld_global_width(128)_s32	$s0, [&GlobalVar];
	ld_global_width(256)_s32	$s0, [&GlobalVar];
	ld_global_width(512)_s32	$s0, [&GlobalVar];
	ld_global_width(1024)_s32	$s0, [&GlobalVar];
	ld_global_width(2048)_s32	$s0, [&GlobalVar];
	ld_global_width(4096)_s32	$s0, [&GlobalVar];
	ld_global_width(8192)_s32	$s0, [&GlobalVar];
	ld_global_width(16384)_s32	$s0, [&GlobalVar];
	ld_global_width(32768)_s32	$s0, [&GlobalVar];
	ld_global_width(65536)_s32	$s0, [&GlobalVar];
	ld_global_width(131072)_s32	$s0, [&GlobalVar];
	ld_global_width(262144)_s32	$s0, [&GlobalVar];
	ld_global_width(524288)_s32	$s0, [&GlobalVar];
	ld_global_width(1048576)_s32	$s0, [&GlobalVar];
	ld_global_width(2097152)_s32	$s0, [&GlobalVar];
	ld_global_width(4194304)_s32	$s0, [&GlobalVar];
	ld_global_width(8388608)_s32	$s0, [&GlobalVar];
	ld_global_width(16777216)_s32	$s0, [&GlobalVar];
	ld_global_width(33554432)_s32	$s0, [&GlobalVar];
	ld_global_width(67108864)_s32	$s0, [&GlobalVar];
	ld_global_width(134217728)_s32	$s0, [&GlobalVar];
	ld_global_width(268435456)_s32	$s0, [&GlobalVar];
	ld_global_width(536870912)_s32	$s0, [&GlobalVar];
	ld_global_width(1073741824)_s32	$s0, [&GlobalVar];
	ld_global_width(2147483648)_s32	$s0, [&GlobalVar];
	ld_global_width(WAVESIZE)_s32	$s0, [&GlobalVar];
	ld_global_width(all)_s32	$s0, [&GlobalVar];
	// 
	// Next sample
	// 
	ld_readonly_s32	$s0, [&ReadonlyVar];
	// 
	ld_readonly_const_s32	$s0, [&ReadonlyVar];
	ld_v2_readonly_s32	($s0, $s1), [&ReadonlyVar];
	ld_v3_readonly_s32	($s0, $s1, $s2), [&ReadonlyVar];
	ld_v4_readonly_s32	($s0, $s1, $s2, $s3), [&ReadonlyVar];
	ld_readonly_s32	$s0, [$d0+2];
	ld_readonly_s32	$s0, [$d0+3];
	ld_readonly_s32	$s0, [$d0+5];
	ld_readonly_s32	$s0, [$d0+6];
	ld_readonly_s32	$s0, [0];
	ld_readonly_align(2)_s32	$s0, [&ReadonlyVar];
	ld_readonly_align(4)_s32	$s0, [&ReadonlyVar];
	ld_readonly_align(8)_s32	$s0, [&ReadonlyVar];
	ld_readonly_align(16)_s32	$s0, [&ReadonlyVar];
	ld_readonly_align(32)_s32	$s0, [&ReadonlyVar];
	ld_readonly_align(64)_s32	$s0, [&ReadonlyVar];
	ld_readonly_align(128)_s32	$s0, [&ReadonlyVar];
	ld_readonly_align(256)_s32	$s0, [&ReadonlyVar];
	ld_readonly_equiv(1)_s32	$s0, [&ReadonlyVar];
	ld_readonly_equiv(2)_s32	$s0, [&ReadonlyVar];
	ld_readonly_equiv(255)_s32	$s0, [&ReadonlyVar];
	ld_readonly_width(2)_s32	$s0, [&ReadonlyVar];
	ld_readonly_width(4)_s32	$s0, [&ReadonlyVar];
	ld_readonly_width(8)_s32	$s0, [&ReadonlyVar];
	ld_readonly_width(16)_s32	$s0, [&ReadonlyVar];
	ld_readonly_width(32)_s32	$s0, [&ReadonlyVar];
	ld_readonly_width(64)_s32	$s0, [&ReadonlyVar];
	ld_readonly_width(128)_s32	$s0, [&ReadonlyVar];
	ld_readonly_width(256)_s32	$s0, [&ReadonlyVar];
	ld_readonly_width(512)_s32	$s0, [&ReadonlyVar];
	ld_readonly_width(1024)_s32	$s0, [&ReadonlyVar];
	ld_readonly_width(2048)_s32	$s0, [&ReadonlyVar];
	ld_readonly_width(4096)_s32	$s0, [&ReadonlyVar];
	ld_readonly_width(8192)_s32	$s0, [&ReadonlyVar];
	ld_readonly_width(16384)_s32	$s0, [&ReadonlyVar];
	ld_readonly_width(32768)_s32	$s0, [&ReadonlyVar];
	ld_readonly_width(65536)_s32	$s0, [&ReadonlyVar];
	ld_readonly_width(131072)_s32	$s0, [&ReadonlyVar];
	ld_readonly_width(262144)_s32	$s0, [&ReadonlyVar];
	ld_readonly_width(524288)_s32	$s0, [&ReadonlyVar];
	ld_readonly_width(1048576)_s32	$s0, [&ReadonlyVar];
	ld_readonly_width(2097152)_s32	$s0, [&ReadonlyVar];
	ld_readonly_width(4194304)_s32	$s0, [&ReadonlyVar];
	ld_readonly_width(8388608)_s32	$s0, [&ReadonlyVar];
	ld_readonly_width(16777216)_s32	$s0, [&ReadonlyVar];
	ld_readonly_width(33554432)_s32	$s0, [&ReadonlyVar];
	ld_readonly_width(67108864)_s32	$s0, [&ReadonlyVar];
	ld_readonly_width(134217728)_s32	$s0, [&ReadonlyVar];
	ld_readonly_width(268435456)_s32	$s0, [&ReadonlyVar];
	ld_readonly_width(536870912)_s32	$s0, [&ReadonlyVar];
	ld_readonly_width(1073741824)_s32	$s0, [&ReadonlyVar];
	ld_readonly_width(2147483648)_s32	$s0, [&ReadonlyVar];
	ld_readonly_width(WAVESIZE)_s32	$s0, [&ReadonlyVar];
	ld_readonly_width(all)_s32	$s0, [&ReadonlyVar];
	// 
	// Next sample
	// 
	ld_kernarg_s32	$s0, [$d0+2];
	// 
	ld_v2_kernarg_s32	($s0, $s1), [$d0+2];
	ld_v3_kernarg_s32	($s0, $s1, $s2), [$d0+2];
	ld_v4_kernarg_s32	($s0, $s1, $s2, $s3), [$d0+2];
	ld_kernarg_s32	$s0, [$d0+3];
	ld_kernarg_s32	$s0, [$d0+5];
	ld_kernarg_s32	$s0, [$d0+6];
	ld_kernarg_s32	$s0, [0];
	ld_kernarg_align(2)_s32	$s0, [$d0+2];
	ld_kernarg_align(4)_s32	$s0, [$d0+2];
	ld_kernarg_align(8)_s32	$s0, [$d0+2];
	ld_kernarg_align(16)_s32	$s0, [$d0+2];
	ld_kernarg_align(32)_s32	$s0, [$d0+2];
	ld_kernarg_align(64)_s32	$s0, [$d0+2];
	ld_kernarg_align(128)_s32	$s0, [$d0+2];
	ld_kernarg_align(256)_s32	$s0, [$d0+2];
	ld_kernarg_equiv(1)_s32	$s0, [$d0+2];
	ld_kernarg_equiv(2)_s32	$s0, [$d0+2];
	ld_kernarg_equiv(255)_s32	$s0, [$d0+2];
	ld_kernarg_width(2)_s32	$s0, [$d0+2];
	ld_kernarg_width(4)_s32	$s0, [$d0+2];
	ld_kernarg_width(8)_s32	$s0, [$d0+2];
	ld_kernarg_width(16)_s32	$s0, [$d0+2];
	ld_kernarg_width(32)_s32	$s0, [$d0+2];
	ld_kernarg_width(64)_s32	$s0, [$d0+2];
	ld_kernarg_width(128)_s32	$s0, [$d0+2];
	ld_kernarg_width(256)_s32	$s0, [$d0+2];
	ld_kernarg_width(512)_s32	$s0, [$d0+2];
	ld_kernarg_width(1024)_s32	$s0, [$d0+2];
	ld_kernarg_width(2048)_s32	$s0, [$d0+2];
	ld_kernarg_width(4096)_s32	$s0, [$d0+2];
	ld_kernarg_width(8192)_s32	$s0, [$d0+2];
	ld_kernarg_width(16384)_s32	$s0, [$d0+2];
	ld_kernarg_width(32768)_s32	$s0, [$d0+2];
	ld_kernarg_width(65536)_s32	$s0, [$d0+2];
	ld_kernarg_width(131072)_s32	$s0, [$d0+2];
	ld_kernarg_width(262144)_s32	$s0, [$d0+2];
	ld_kernarg_width(524288)_s32	$s0, [$d0+2];
	ld_kernarg_width(1048576)_s32	$s0, [$d0+2];
	ld_kernarg_width(2097152)_s32	$s0, [$d0+2];
	ld_kernarg_width(4194304)_s32	$s0, [$d0+2];
	ld_kernarg_width(8388608)_s32	$s0, [$d0+2];
	ld_kernarg_width(16777216)_s32	$s0, [$d0+2];
	ld_kernarg_width(33554432)_s32	$s0, [$d0+2];
	ld_kernarg_width(67108864)_s32	$s0, [$d0+2];
	ld_kernarg_width(134217728)_s32	$s0, [$d0+2];
	ld_kernarg_width(268435456)_s32	$s0, [$d0+2];
	ld_kernarg_width(536870912)_s32	$s0, [$d0+2];
	ld_kernarg_width(1073741824)_s32	$s0, [$d0+2];
	ld_kernarg_width(2147483648)_s32	$s0, [$d0+2];
	ld_kernarg_width(WAVESIZE)_s32	$s0, [$d0+2];
	ld_kernarg_width(all)_s32	$s0, [$d0+2];
	// 
	// Next sample
	// 
	ld_group_s32	$s0, [&GroupVar];
	// 
	ld_v2_group_s32	($s0, $s1), [&GroupVar];
	ld_v3_group_s32	($s0, $s1, $s2), [&GroupVar];
	ld_v4_group_s32	($s0, $s1, $s2, $s3), [&GroupVar];
	ld_group_s32	$s0, [$s0+2];
	ld_group_s32	$s0, [$s0+3];
	ld_group_s32	$s0, [$s0+5];
	ld_group_s32	$s0, [$s0+6];
	ld_group_s32	$s0, [0];
	ld_group_align(2)_s32	$s0, [&GroupVar];
	ld_group_align(4)_s32	$s0, [&GroupVar];
	ld_group_align(8)_s32	$s0, [&GroupVar];
	ld_group_align(16)_s32	$s0, [&GroupVar];
	ld_group_align(32)_s32	$s0, [&GroupVar];
	ld_group_align(64)_s32	$s0, [&GroupVar];
	ld_group_align(128)_s32	$s0, [&GroupVar];
	ld_group_align(256)_s32	$s0, [&GroupVar];
	ld_group_equiv(1)_s32	$s0, [&GroupVar];
	ld_group_equiv(2)_s32	$s0, [&GroupVar];
	ld_group_equiv(255)_s32	$s0, [&GroupVar];
	ld_group_width(2)_s32	$s0, [&GroupVar];
	ld_group_width(4)_s32	$s0, [&GroupVar];
	ld_group_width(8)_s32	$s0, [&GroupVar];
	ld_group_width(16)_s32	$s0, [&GroupVar];
	ld_group_width(32)_s32	$s0, [&GroupVar];
	ld_group_width(64)_s32	$s0, [&GroupVar];
	ld_group_width(128)_s32	$s0, [&GroupVar];
	ld_group_width(256)_s32	$s0, [&GroupVar];
	ld_group_width(512)_s32	$s0, [&GroupVar];
	ld_group_width(1024)_s32	$s0, [&GroupVar];
	ld_group_width(2048)_s32	$s0, [&GroupVar];
	ld_group_width(4096)_s32	$s0, [&GroupVar];
	ld_group_width(8192)_s32	$s0, [&GroupVar];
	ld_group_width(16384)_s32	$s0, [&GroupVar];
	ld_group_width(32768)_s32	$s0, [&GroupVar];
	ld_group_width(65536)_s32	$s0, [&GroupVar];
	ld_group_width(131072)_s32	$s0, [&GroupVar];
	ld_group_width(262144)_s32	$s0, [&GroupVar];
	ld_group_width(524288)_s32	$s0, [&GroupVar];
	ld_group_width(1048576)_s32	$s0, [&GroupVar];
	ld_group_width(2097152)_s32	$s0, [&GroupVar];
	ld_group_width(4194304)_s32	$s0, [&GroupVar];
	ld_group_width(8388608)_s32	$s0, [&GroupVar];
	ld_group_width(16777216)_s32	$s0, [&GroupVar];
	ld_group_width(33554432)_s32	$s0, [&GroupVar];
	ld_group_width(67108864)_s32	$s0, [&GroupVar];
	ld_group_width(134217728)_s32	$s0, [&GroupVar];
	ld_group_width(268435456)_s32	$s0, [&GroupVar];
	ld_group_width(536870912)_s32	$s0, [&GroupVar];
	ld_group_width(1073741824)_s32	$s0, [&GroupVar];
	ld_group_width(2147483648)_s32	$s0, [&GroupVar];
	ld_group_width(WAVESIZE)_s32	$s0, [&GroupVar];
	ld_group_width(all)_s32	$s0, [&GroupVar];
	// 
	// Next sample
	// 
	ld_private_s32	$s0, [&PrivateVar];
	// 
	ld_v2_private_s32	($s0, $s1), [&PrivateVar];
	ld_v3_private_s32	($s0, $s1, $s2), [&PrivateVar];
	ld_v4_private_s32	($s0, $s1, $s2, $s3), [&PrivateVar];
	ld_private_s32	$s0, [$s0+2];
	ld_private_s32	$s0, [$s0+3];
	ld_private_s32	$s0, [$s0+5];
	ld_private_s32	$s0, [$s0+6];
	ld_private_s32	$s0, [0];
	ld_private_align(2)_s32	$s0, [&PrivateVar];
	ld_private_align(4)_s32	$s0, [&PrivateVar];
	ld_private_align(8)_s32	$s0, [&PrivateVar];
	ld_private_align(16)_s32	$s0, [&PrivateVar];
	ld_private_align(32)_s32	$s0, [&PrivateVar];
	ld_private_align(64)_s32	$s0, [&PrivateVar];
	ld_private_align(128)_s32	$s0, [&PrivateVar];
	ld_private_align(256)_s32	$s0, [&PrivateVar];
	ld_private_equiv(1)_s32	$s0, [&PrivateVar];
	ld_private_equiv(2)_s32	$s0, [&PrivateVar];
	ld_private_equiv(255)_s32	$s0, [&PrivateVar];
	ld_private_width(2)_s32	$s0, [&PrivateVar];
	ld_private_width(4)_s32	$s0, [&PrivateVar];
	ld_private_width(8)_s32	$s0, [&PrivateVar];
	ld_private_width(16)_s32	$s0, [&PrivateVar];
	ld_private_width(32)_s32	$s0, [&PrivateVar];
	ld_private_width(64)_s32	$s0, [&PrivateVar];
	ld_private_width(128)_s32	$s0, [&PrivateVar];
	ld_private_width(256)_s32	$s0, [&PrivateVar];
	ld_private_width(512)_s32	$s0, [&PrivateVar];
	ld_private_width(1024)_s32	$s0, [&PrivateVar];
	ld_private_width(2048)_s32	$s0, [&PrivateVar];
	ld_private_width(4096)_s32	$s0, [&PrivateVar];
	ld_private_width(8192)_s32	$s0, [&PrivateVar];
	ld_private_width(16384)_s32	$s0, [&PrivateVar];
	ld_private_width(32768)_s32	$s0, [&PrivateVar];
	ld_private_width(65536)_s32	$s0, [&PrivateVar];
	ld_private_width(131072)_s32	$s0, [&PrivateVar];
	ld_private_width(262144)_s32	$s0, [&PrivateVar];
	ld_private_width(524288)_s32	$s0, [&PrivateVar];
	ld_private_width(1048576)_s32	$s0, [&PrivateVar];
	ld_private_width(2097152)_s32	$s0, [&PrivateVar];
	ld_private_width(4194304)_s32	$s0, [&PrivateVar];
	ld_private_width(8388608)_s32	$s0, [&PrivateVar];
	ld_private_width(16777216)_s32	$s0, [&PrivateVar];
	ld_private_width(33554432)_s32	$s0, [&PrivateVar];
	ld_private_width(67108864)_s32	$s0, [&PrivateVar];
	ld_private_width(134217728)_s32	$s0, [&PrivateVar];
	ld_private_width(268435456)_s32	$s0, [&PrivateVar];
	ld_private_width(536870912)_s32	$s0, [&PrivateVar];
	ld_private_width(1073741824)_s32	$s0, [&PrivateVar];
	ld_private_width(2147483648)_s32	$s0, [&PrivateVar];
	ld_private_width(WAVESIZE)_s32	$s0, [&PrivateVar];
	ld_private_width(all)_s32	$s0, [&PrivateVar];
	// 
	// Next sample
	// 
	ld_spill_s32	$s0, [%SpillVar];
	// 
	ld_v2_spill_s32	($s0, $s1), [%SpillVar];
	ld_v3_spill_s32	($s0, $s1, $s2), [%SpillVar];
	ld_v4_spill_s32	($s0, $s1, $s2, $s3), [%SpillVar];
	ld_spill_align(2)_s32	$s0, [%SpillVar];
	ld_spill_align(4)_s32	$s0, [%SpillVar];
	ld_spill_align(8)_s32	$s0, [%SpillVar];
	ld_spill_align(16)_s32	$s0, [%SpillVar];
	ld_spill_align(32)_s32	$s0, [%SpillVar];
	ld_spill_align(64)_s32	$s0, [%SpillVar];
	ld_spill_align(128)_s32	$s0, [%SpillVar];
	ld_spill_align(256)_s32	$s0, [%SpillVar];
	ld_spill_equiv(1)_s32	$s0, [%SpillVar];
	ld_spill_equiv(2)_s32	$s0, [%SpillVar];
	ld_spill_equiv(255)_s32	$s0, [%SpillVar];
	ld_spill_width(2)_s32	$s0, [%SpillVar];
	ld_spill_width(4)_s32	$s0, [%SpillVar];
	ld_spill_width(8)_s32	$s0, [%SpillVar];
	ld_spill_width(16)_s32	$s0, [%SpillVar];
	ld_spill_width(32)_s32	$s0, [%SpillVar];
	ld_spill_width(64)_s32	$s0, [%SpillVar];
	ld_spill_width(128)_s32	$s0, [%SpillVar];
	ld_spill_width(256)_s32	$s0, [%SpillVar];
	ld_spill_width(512)_s32	$s0, [%SpillVar];
	ld_spill_width(1024)_s32	$s0, [%SpillVar];
	ld_spill_width(2048)_s32	$s0, [%SpillVar];
	ld_spill_width(4096)_s32	$s0, [%SpillVar];
	ld_spill_width(8192)_s32	$s0, [%SpillVar];
	ld_spill_width(16384)_s32	$s0, [%SpillVar];
	ld_spill_width(32768)_s32	$s0, [%SpillVar];
	ld_spill_width(65536)_s32	$s0, [%SpillVar];
	ld_spill_width(131072)_s32	$s0, [%SpillVar];
	ld_spill_width(262144)_s32	$s0, [%SpillVar];
	ld_spill_width(524288)_s32	$s0, [%SpillVar];
	ld_spill_width(1048576)_s32	$s0, [%SpillVar];
	ld_spill_width(2097152)_s32	$s0, [%SpillVar];
	ld_spill_width(4194304)_s32	$s0, [%SpillVar];
	ld_spill_width(8388608)_s32	$s0, [%SpillVar];
	ld_spill_width(16777216)_s32	$s0, [%SpillVar];
	ld_spill_width(33554432)_s32	$s0, [%SpillVar];
	ld_spill_width(67108864)_s32	$s0, [%SpillVar];
	ld_spill_width(134217728)_s32	$s0, [%SpillVar];
	ld_spill_width(268435456)_s32	$s0, [%SpillVar];
	ld_spill_width(536870912)_s32	$s0, [%SpillVar];
	ld_spill_width(1073741824)_s32	$s0, [%SpillVar];
	ld_spill_width(2147483648)_s32	$s0, [%SpillVar];
	ld_spill_width(WAVESIZE)_s32	$s0, [%SpillVar];
	ld_spill_width(all)_s32	$s0, [%SpillVar];
	// 
	// Next sample
	// 
	ld_s64	$d0, [$d0+2];
	// 
	ld_const_s64	$d0, [$d0+2];
	ld_v2_s64	($d0, $d1), [$d0+2];
	ld_v3_s64	($d0, $d1, $d2), [$d0+2];
	ld_v4_s64	($d0, $d1, $d2, $d3), [$d0+2];
	ld_s64	$d0, [$d0+3];
	ld_s64	$d0, [$d0+5];
	ld_s64	$d0, [$d0+6];
	ld_s64	$d0, [0];
	ld_align(2)_s64	$d0, [$d0+2];
	ld_align(4)_s64	$d0, [$d0+2];
	ld_align(8)_s64	$d0, [$d0+2];
	ld_align(16)_s64	$d0, [$d0+2];
	ld_align(32)_s64	$d0, [$d0+2];
	ld_align(64)_s64	$d0, [$d0+2];
	ld_align(128)_s64	$d0, [$d0+2];
	ld_align(256)_s64	$d0, [$d0+2];
	ld_equiv(1)_s64	$d0, [$d0+2];
	ld_equiv(2)_s64	$d0, [$d0+2];
	ld_equiv(255)_s64	$d0, [$d0+2];
	ld_width(2)_s64	$d0, [$d0+2];
	ld_width(4)_s64	$d0, [$d0+2];
	ld_width(8)_s64	$d0, [$d0+2];
	ld_width(16)_s64	$d0, [$d0+2];
	ld_width(32)_s64	$d0, [$d0+2];
	ld_width(64)_s64	$d0, [$d0+2];
	ld_width(128)_s64	$d0, [$d0+2];
	ld_width(256)_s64	$d0, [$d0+2];
	ld_width(512)_s64	$d0, [$d0+2];
	ld_width(1024)_s64	$d0, [$d0+2];
	ld_width(2048)_s64	$d0, [$d0+2];
	ld_width(4096)_s64	$d0, [$d0+2];
	ld_width(8192)_s64	$d0, [$d0+2];
	ld_width(16384)_s64	$d0, [$d0+2];
	ld_width(32768)_s64	$d0, [$d0+2];
	ld_width(65536)_s64	$d0, [$d0+2];
	ld_width(131072)_s64	$d0, [$d0+2];
	ld_width(262144)_s64	$d0, [$d0+2];
	ld_width(524288)_s64	$d0, [$d0+2];
	ld_width(1048576)_s64	$d0, [$d0+2];
	ld_width(2097152)_s64	$d0, [$d0+2];
	ld_width(4194304)_s64	$d0, [$d0+2];
	ld_width(8388608)_s64	$d0, [$d0+2];
	ld_width(16777216)_s64	$d0, [$d0+2];
	ld_width(33554432)_s64	$d0, [$d0+2];
	ld_width(67108864)_s64	$d0, [$d0+2];
	ld_width(134217728)_s64	$d0, [$d0+2];
	ld_width(268435456)_s64	$d0, [$d0+2];
	ld_width(536870912)_s64	$d0, [$d0+2];
	ld_width(1073741824)_s64	$d0, [$d0+2];
	ld_width(2147483648)_s64	$d0, [$d0+2];
	ld_width(WAVESIZE)_s64	$d0, [$d0+2];
	ld_width(all)_s64	$d0, [$d0+2];
	// 
	// Next sample
	// 
	ld_global_s64	$d0, [&GlobalVar];
	// 
	ld_global_const_s64	$d0, [&GlobalVar];
	ld_v2_global_s64	($d0, $d1), [&GlobalVar];
	ld_v3_global_s64	($d0, $d1, $d2), [&GlobalVar];
	ld_v4_global_s64	($d0, $d1, $d2, $d3), [&GlobalVar];
	ld_global_s64	$d0, [$d0+2];
	ld_global_s64	$d0, [$d0+3];
	ld_global_s64	$d0, [$d0+5];
	ld_global_s64	$d0, [$d0+6];
	ld_global_s64	$d0, [0];
	ld_global_align(2)_s64	$d0, [&GlobalVar];
	ld_global_align(4)_s64	$d0, [&GlobalVar];
	ld_global_align(8)_s64	$d0, [&GlobalVar];
	ld_global_align(16)_s64	$d0, [&GlobalVar];
	ld_global_align(32)_s64	$d0, [&GlobalVar];
	ld_global_align(64)_s64	$d0, [&GlobalVar];
	ld_global_align(128)_s64	$d0, [&GlobalVar];
	ld_global_align(256)_s64	$d0, [&GlobalVar];
	ld_global_equiv(1)_s64	$d0, [&GlobalVar];
	ld_global_equiv(2)_s64	$d0, [&GlobalVar];
	ld_global_equiv(255)_s64	$d0, [&GlobalVar];
	ld_global_width(2)_s64	$d0, [&GlobalVar];
	ld_global_width(4)_s64	$d0, [&GlobalVar];
	ld_global_width(8)_s64	$d0, [&GlobalVar];
	ld_global_width(16)_s64	$d0, [&GlobalVar];
	ld_global_width(32)_s64	$d0, [&GlobalVar];
	ld_global_width(64)_s64	$d0, [&GlobalVar];
	ld_global_width(128)_s64	$d0, [&GlobalVar];
	ld_global_width(256)_s64	$d0, [&GlobalVar];
	ld_global_width(512)_s64	$d0, [&GlobalVar];
	ld_global_width(1024)_s64	$d0, [&GlobalVar];
	ld_global_width(2048)_s64	$d0, [&GlobalVar];
	ld_global_width(4096)_s64	$d0, [&GlobalVar];
	ld_global_width(8192)_s64	$d0, [&GlobalVar];
	ld_global_width(16384)_s64	$d0, [&GlobalVar];
	ld_global_width(32768)_s64	$d0, [&GlobalVar];
	ld_global_width(65536)_s64	$d0, [&GlobalVar];
	ld_global_width(131072)_s64	$d0, [&GlobalVar];
	ld_global_width(262144)_s64	$d0, [&GlobalVar];
	ld_global_width(524288)_s64	$d0, [&GlobalVar];
	ld_global_width(1048576)_s64	$d0, [&GlobalVar];
	ld_global_width(2097152)_s64	$d0, [&GlobalVar];
	ld_global_width(4194304)_s64	$d0, [&GlobalVar];
	ld_global_width(8388608)_s64	$d0, [&GlobalVar];
	ld_global_width(16777216)_s64	$d0, [&GlobalVar];
	ld_global_width(33554432)_s64	$d0, [&GlobalVar];
	ld_global_width(67108864)_s64	$d0, [&GlobalVar];
	ld_global_width(134217728)_s64	$d0, [&GlobalVar];
	ld_global_width(268435456)_s64	$d0, [&GlobalVar];
	ld_global_width(536870912)_s64	$d0, [&GlobalVar];
	ld_global_width(1073741824)_s64	$d0, [&GlobalVar];
	ld_global_width(2147483648)_s64	$d0, [&GlobalVar];
	ld_global_width(WAVESIZE)_s64	$d0, [&GlobalVar];
	ld_global_width(all)_s64	$d0, [&GlobalVar];
	// 
	// Next sample
	// 
	ld_readonly_s64	$d0, [&ReadonlyVar];
	// 
	ld_readonly_const_s64	$d0, [&ReadonlyVar];
	ld_v2_readonly_s64	($d0, $d1), [&ReadonlyVar];
	ld_v3_readonly_s64	($d0, $d1, $d2), [&ReadonlyVar];
	ld_v4_readonly_s64	($d0, $d1, $d2, $d3), [&ReadonlyVar];
	ld_readonly_s64	$d0, [$d0+2];
	ld_readonly_s64	$d0, [$d0+3];
	ld_readonly_s64	$d0, [$d0+5];
	ld_readonly_s64	$d0, [$d0+6];
	ld_readonly_s64	$d0, [0];
	ld_readonly_align(2)_s64	$d0, [&ReadonlyVar];
	ld_readonly_align(4)_s64	$d0, [&ReadonlyVar];
	ld_readonly_align(8)_s64	$d0, [&ReadonlyVar];
	ld_readonly_align(16)_s64	$d0, [&ReadonlyVar];
	ld_readonly_align(32)_s64	$d0, [&ReadonlyVar];
	ld_readonly_align(64)_s64	$d0, [&ReadonlyVar];
	ld_readonly_align(128)_s64	$d0, [&ReadonlyVar];
	ld_readonly_align(256)_s64	$d0, [&ReadonlyVar];
	ld_readonly_equiv(1)_s64	$d0, [&ReadonlyVar];
	ld_readonly_equiv(2)_s64	$d0, [&ReadonlyVar];
	ld_readonly_equiv(255)_s64	$d0, [&ReadonlyVar];
	ld_readonly_width(2)_s64	$d0, [&ReadonlyVar];
	ld_readonly_width(4)_s64	$d0, [&ReadonlyVar];
	ld_readonly_width(8)_s64	$d0, [&ReadonlyVar];
	ld_readonly_width(16)_s64	$d0, [&ReadonlyVar];
	ld_readonly_width(32)_s64	$d0, [&ReadonlyVar];
	ld_readonly_width(64)_s64	$d0, [&ReadonlyVar];
	ld_readonly_width(128)_s64	$d0, [&ReadonlyVar];
	ld_readonly_width(256)_s64	$d0, [&ReadonlyVar];
	ld_readonly_width(512)_s64	$d0, [&ReadonlyVar];
	ld_readonly_width(1024)_s64	$d0, [&ReadonlyVar];
	ld_readonly_width(2048)_s64	$d0, [&ReadonlyVar];
	ld_readonly_width(4096)_s64	$d0, [&ReadonlyVar];
	ld_readonly_width(8192)_s64	$d0, [&ReadonlyVar];
	ld_readonly_width(16384)_s64	$d0, [&ReadonlyVar];
	ld_readonly_width(32768)_s64	$d0, [&ReadonlyVar];
	ld_readonly_width(65536)_s64	$d0, [&ReadonlyVar];
	ld_readonly_width(131072)_s64	$d0, [&ReadonlyVar];
	ld_readonly_width(262144)_s64	$d0, [&ReadonlyVar];
	ld_readonly_width(524288)_s64	$d0, [&ReadonlyVar];
	ld_readonly_width(1048576)_s64	$d0, [&ReadonlyVar];
	ld_readonly_width(2097152)_s64	$d0, [&ReadonlyVar];
	ld_readonly_width(4194304)_s64	$d0, [&ReadonlyVar];
	ld_readonly_width(8388608)_s64	$d0, [&ReadonlyVar];
	ld_readonly_width(16777216)_s64	$d0, [&ReadonlyVar];
	ld_readonly_width(33554432)_s64	$d0, [&ReadonlyVar];
	ld_readonly_width(67108864)_s64	$d0, [&ReadonlyVar];
	ld_readonly_width(134217728)_s64	$d0, [&ReadonlyVar];
	ld_readonly_width(268435456)_s64	$d0, [&ReadonlyVar];
	ld_readonly_width(536870912)_s64	$d0, [&ReadonlyVar];
	ld_readonly_width(1073741824)_s64	$d0, [&ReadonlyVar];
	ld_readonly_width(2147483648)_s64	$d0, [&ReadonlyVar];
	ld_readonly_width(WAVESIZE)_s64	$d0, [&ReadonlyVar];
	ld_readonly_width(all)_s64	$d0, [&ReadonlyVar];
	// 
	// Next sample
	// 
	ld_kernarg_s64	$d0, [$d0+2];
	// 
	ld_v2_kernarg_s64	($d0, $d1), [$d0+2];
	ld_v3_kernarg_s64	($d0, $d1, $d2), [$d0+2];
	ld_v4_kernarg_s64	($d0, $d1, $d2, $d3), [$d0+2];
	ld_kernarg_s64	$d0, [$d0+3];
	ld_kernarg_s64	$d0, [$d0+5];
	ld_kernarg_s64	$d0, [$d0+6];
	ld_kernarg_s64	$d0, [0];
	ld_kernarg_align(2)_s64	$d0, [$d0+2];
	ld_kernarg_align(4)_s64	$d0, [$d0+2];
	ld_kernarg_align(8)_s64	$d0, [$d0+2];
	ld_kernarg_align(16)_s64	$d0, [$d0+2];
	ld_kernarg_align(32)_s64	$d0, [$d0+2];
	ld_kernarg_align(64)_s64	$d0, [$d0+2];
	ld_kernarg_align(128)_s64	$d0, [$d0+2];
	ld_kernarg_align(256)_s64	$d0, [$d0+2];
	ld_kernarg_equiv(1)_s64	$d0, [$d0+2];
	ld_kernarg_equiv(2)_s64	$d0, [$d0+2];
	ld_kernarg_equiv(255)_s64	$d0, [$d0+2];
	ld_kernarg_width(2)_s64	$d0, [$d0+2];
	ld_kernarg_width(4)_s64	$d0, [$d0+2];
	ld_kernarg_width(8)_s64	$d0, [$d0+2];
	ld_kernarg_width(16)_s64	$d0, [$d0+2];
	ld_kernarg_width(32)_s64	$d0, [$d0+2];
	ld_kernarg_width(64)_s64	$d0, [$d0+2];
	ld_kernarg_width(128)_s64	$d0, [$d0+2];
	ld_kernarg_width(256)_s64	$d0, [$d0+2];
	ld_kernarg_width(512)_s64	$d0, [$d0+2];
	ld_kernarg_width(1024)_s64	$d0, [$d0+2];
	ld_kernarg_width(2048)_s64	$d0, [$d0+2];
	ld_kernarg_width(4096)_s64	$d0, [$d0+2];
	ld_kernarg_width(8192)_s64	$d0, [$d0+2];
	ld_kernarg_width(16384)_s64	$d0, [$d0+2];
	ld_kernarg_width(32768)_s64	$d0, [$d0+2];
	ld_kernarg_width(65536)_s64	$d0, [$d0+2];
	ld_kernarg_width(131072)_s64	$d0, [$d0+2];
	ld_kernarg_width(262144)_s64	$d0, [$d0+2];
	ld_kernarg_width(524288)_s64	$d0, [$d0+2];
	ld_kernarg_width(1048576)_s64	$d0, [$d0+2];
	ld_kernarg_width(2097152)_s64	$d0, [$d0+2];
	ld_kernarg_width(4194304)_s64	$d0, [$d0+2];
	ld_kernarg_width(8388608)_s64	$d0, [$d0+2];
	ld_kernarg_width(16777216)_s64	$d0, [$d0+2];
	ld_kernarg_width(33554432)_s64	$d0, [$d0+2];
	ld_kernarg_width(67108864)_s64	$d0, [$d0+2];
	ld_kernarg_width(134217728)_s64	$d0, [$d0+2];
	ld_kernarg_width(268435456)_s64	$d0, [$d0+2];
	ld_kernarg_width(536870912)_s64	$d0, [$d0+2];
	ld_kernarg_width(1073741824)_s64	$d0, [$d0+2];
	ld_kernarg_width(2147483648)_s64	$d0, [$d0+2];
	ld_kernarg_width(WAVESIZE)_s64	$d0, [$d0+2];
	ld_kernarg_width(all)_s64	$d0, [$d0+2];
	// 
	// Next sample
	// 
	ld_group_s64	$d0, [&GroupVar];
	// 
	ld_v2_group_s64	($d0, $d1), [&GroupVar];
	ld_v3_group_s64	($d0, $d1, $d2), [&GroupVar];
	ld_v4_group_s64	($d0, $d1, $d2, $d3), [&GroupVar];
	ld_group_s64	$d0, [$s0+2];
	ld_group_s64	$d0, [$s0+3];
	ld_group_s64	$d0, [$s0+5];
	ld_group_s64	$d0, [$s0+6];
	ld_group_s64	$d0, [0];
	ld_group_align(2)_s64	$d0, [&GroupVar];
	ld_group_align(4)_s64	$d0, [&GroupVar];
	ld_group_align(8)_s64	$d0, [&GroupVar];
	ld_group_align(16)_s64	$d0, [&GroupVar];
	ld_group_align(32)_s64	$d0, [&GroupVar];
	ld_group_align(64)_s64	$d0, [&GroupVar];
	ld_group_align(128)_s64	$d0, [&GroupVar];
	ld_group_align(256)_s64	$d0, [&GroupVar];
	ld_group_equiv(1)_s64	$d0, [&GroupVar];
	ld_group_equiv(2)_s64	$d0, [&GroupVar];
	ld_group_equiv(255)_s64	$d0, [&GroupVar];
	ld_group_width(2)_s64	$d0, [&GroupVar];
	ld_group_width(4)_s64	$d0, [&GroupVar];
	ld_group_width(8)_s64	$d0, [&GroupVar];
	ld_group_width(16)_s64	$d0, [&GroupVar];
	ld_group_width(32)_s64	$d0, [&GroupVar];
	ld_group_width(64)_s64	$d0, [&GroupVar];
	ld_group_width(128)_s64	$d0, [&GroupVar];
	ld_group_width(256)_s64	$d0, [&GroupVar];
	ld_group_width(512)_s64	$d0, [&GroupVar];
	ld_group_width(1024)_s64	$d0, [&GroupVar];
	ld_group_width(2048)_s64	$d0, [&GroupVar];
	ld_group_width(4096)_s64	$d0, [&GroupVar];
	ld_group_width(8192)_s64	$d0, [&GroupVar];
	ld_group_width(16384)_s64	$d0, [&GroupVar];
	ld_group_width(32768)_s64	$d0, [&GroupVar];
	ld_group_width(65536)_s64	$d0, [&GroupVar];
	ld_group_width(131072)_s64	$d0, [&GroupVar];
	ld_group_width(262144)_s64	$d0, [&GroupVar];
	ld_group_width(524288)_s64	$d0, [&GroupVar];
	ld_group_width(1048576)_s64	$d0, [&GroupVar];
	ld_group_width(2097152)_s64	$d0, [&GroupVar];
	ld_group_width(4194304)_s64	$d0, [&GroupVar];
	ld_group_width(8388608)_s64	$d0, [&GroupVar];
	ld_group_width(16777216)_s64	$d0, [&GroupVar];
	ld_group_width(33554432)_s64	$d0, [&GroupVar];
	ld_group_width(67108864)_s64	$d0, [&GroupVar];
	ld_group_width(134217728)_s64	$d0, [&GroupVar];
	ld_group_width(268435456)_s64	$d0, [&GroupVar];
	ld_group_width(536870912)_s64	$d0, [&GroupVar];
	ld_group_width(1073741824)_s64	$d0, [&GroupVar];
	ld_group_width(2147483648)_s64	$d0, [&GroupVar];
	ld_group_width(WAVESIZE)_s64	$d0, [&GroupVar];
	ld_group_width(all)_s64	$d0, [&GroupVar];
	// 
	// Next sample
	// 
	ld_private_s64	$d0, [&PrivateVar];
	// 
	ld_v2_private_s64	($d0, $d1), [&PrivateVar];
	ld_v3_private_s64	($d0, $d1, $d2), [&PrivateVar];
	ld_v4_private_s64	($d0, $d1, $d2, $d3), [&PrivateVar];
	ld_private_s64	$d0, [$s0+2];
	ld_private_s64	$d0, [$s0+3];
	ld_private_s64	$d0, [$s0+5];
	ld_private_s64	$d0, [$s0+6];
	ld_private_s64	$d0, [0];
	ld_private_align(2)_s64	$d0, [&PrivateVar];
	ld_private_align(4)_s64	$d0, [&PrivateVar];
	ld_private_align(8)_s64	$d0, [&PrivateVar];
	ld_private_align(16)_s64	$d0, [&PrivateVar];
	ld_private_align(32)_s64	$d0, [&PrivateVar];
	ld_private_align(64)_s64	$d0, [&PrivateVar];
	ld_private_align(128)_s64	$d0, [&PrivateVar];
	ld_private_align(256)_s64	$d0, [&PrivateVar];
	ld_private_equiv(1)_s64	$d0, [&PrivateVar];
	ld_private_equiv(2)_s64	$d0, [&PrivateVar];
	ld_private_equiv(255)_s64	$d0, [&PrivateVar];
	ld_private_width(2)_s64	$d0, [&PrivateVar];
	ld_private_width(4)_s64	$d0, [&PrivateVar];
	ld_private_width(8)_s64	$d0, [&PrivateVar];
	ld_private_width(16)_s64	$d0, [&PrivateVar];
	ld_private_width(32)_s64	$d0, [&PrivateVar];
	ld_private_width(64)_s64	$d0, [&PrivateVar];
	ld_private_width(128)_s64	$d0, [&PrivateVar];
	ld_private_width(256)_s64	$d0, [&PrivateVar];
	ld_private_width(512)_s64	$d0, [&PrivateVar];
	ld_private_width(1024)_s64	$d0, [&PrivateVar];
	ld_private_width(2048)_s64	$d0, [&PrivateVar];
	ld_private_width(4096)_s64	$d0, [&PrivateVar];
	ld_private_width(8192)_s64	$d0, [&PrivateVar];
	ld_private_width(16384)_s64	$d0, [&PrivateVar];
	ld_private_width(32768)_s64	$d0, [&PrivateVar];
	ld_private_width(65536)_s64	$d0, [&PrivateVar];
	ld_private_width(131072)_s64	$d0, [&PrivateVar];
	ld_private_width(262144)_s64	$d0, [&PrivateVar];
	ld_private_width(524288)_s64	$d0, [&PrivateVar];
	ld_private_width(1048576)_s64	$d0, [&PrivateVar];
	ld_private_width(2097152)_s64	$d0, [&PrivateVar];
	ld_private_width(4194304)_s64	$d0, [&PrivateVar];
	ld_private_width(8388608)_s64	$d0, [&PrivateVar];
	ld_private_width(16777216)_s64	$d0, [&PrivateVar];
	ld_private_width(33554432)_s64	$d0, [&PrivateVar];
	ld_private_width(67108864)_s64	$d0, [&PrivateVar];
	ld_private_width(134217728)_s64	$d0, [&PrivateVar];
	ld_private_width(268435456)_s64	$d0, [&PrivateVar];
	ld_private_width(536870912)_s64	$d0, [&PrivateVar];
	ld_private_width(1073741824)_s64	$d0, [&PrivateVar];
	ld_private_width(2147483648)_s64	$d0, [&PrivateVar];
	ld_private_width(WAVESIZE)_s64	$d0, [&PrivateVar];
	ld_private_width(all)_s64	$d0, [&PrivateVar];
	// 
	// Next sample
	// 
	ld_spill_s64	$d0, [%SpillVar];
	// 
	ld_v2_spill_s64	($d0, $d1), [%SpillVar];
	ld_v3_spill_s64	($d0, $d1, $d2), [%SpillVar];
	ld_v4_spill_s64	($d0, $d1, $d2, $d3), [%SpillVar];
	ld_spill_align(2)_s64	$d0, [%SpillVar];
	ld_spill_align(4)_s64	$d0, [%SpillVar];
	ld_spill_align(8)_s64	$d0, [%SpillVar];
	ld_spill_align(16)_s64	$d0, [%SpillVar];
	ld_spill_align(32)_s64	$d0, [%SpillVar];
	ld_spill_align(64)_s64	$d0, [%SpillVar];
	ld_spill_align(128)_s64	$d0, [%SpillVar];
	ld_spill_align(256)_s64	$d0, [%SpillVar];
	ld_spill_equiv(1)_s64	$d0, [%SpillVar];
	ld_spill_equiv(2)_s64	$d0, [%SpillVar];
	ld_spill_equiv(255)_s64	$d0, [%SpillVar];
	ld_spill_width(2)_s64	$d0, [%SpillVar];
	ld_spill_width(4)_s64	$d0, [%SpillVar];
	ld_spill_width(8)_s64	$d0, [%SpillVar];
	ld_spill_width(16)_s64	$d0, [%SpillVar];
	ld_spill_width(32)_s64	$d0, [%SpillVar];
	ld_spill_width(64)_s64	$d0, [%SpillVar];
	ld_spill_width(128)_s64	$d0, [%SpillVar];
	ld_spill_width(256)_s64	$d0, [%SpillVar];
	ld_spill_width(512)_s64	$d0, [%SpillVar];
	ld_spill_width(1024)_s64	$d0, [%SpillVar];
	ld_spill_width(2048)_s64	$d0, [%SpillVar];
	ld_spill_width(4096)_s64	$d0, [%SpillVar];
	ld_spill_width(8192)_s64	$d0, [%SpillVar];
	ld_spill_width(16384)_s64	$d0, [%SpillVar];
	ld_spill_width(32768)_s64	$d0, [%SpillVar];
	ld_spill_width(65536)_s64	$d0, [%SpillVar];
	ld_spill_width(131072)_s64	$d0, [%SpillVar];
	ld_spill_width(262144)_s64	$d0, [%SpillVar];
	ld_spill_width(524288)_s64	$d0, [%SpillVar];
	ld_spill_width(1048576)_s64	$d0, [%SpillVar];
	ld_spill_width(2097152)_s64	$d0, [%SpillVar];
	ld_spill_width(4194304)_s64	$d0, [%SpillVar];
	ld_spill_width(8388608)_s64	$d0, [%SpillVar];
	ld_spill_width(16777216)_s64	$d0, [%SpillVar];
	ld_spill_width(33554432)_s64	$d0, [%SpillVar];
	ld_spill_width(67108864)_s64	$d0, [%SpillVar];
	ld_spill_width(134217728)_s64	$d0, [%SpillVar];
	ld_spill_width(268435456)_s64	$d0, [%SpillVar];
	ld_spill_width(536870912)_s64	$d0, [%SpillVar];
	ld_spill_width(1073741824)_s64	$d0, [%SpillVar];
	ld_spill_width(2147483648)_s64	$d0, [%SpillVar];
	ld_spill_width(WAVESIZE)_s64	$d0, [%SpillVar];
	ld_spill_width(all)_s64	$d0, [%SpillVar];
	// 
	// Next sample
	// 
	ld_f16	$s0, [$d0+2];
	// 
	ld_const_f16	$s0, [$d0+2];
	ld_v2_f16	($s0, $s1), [$d0+2];
	ld_v3_f16	($s0, $s1, $s2), [$d0+2];
	ld_v4_f16	($s0, $s1, $s2, $s3), [$d0+2];
	ld_f16	$s0, [$d0+3];
	ld_f16	$s0, [$d0+5];
	ld_f16	$s0, [$d0+6];
	ld_f16	$s0, [0];
	ld_align(2)_f16	$s0, [$d0+2];
	ld_align(4)_f16	$s0, [$d0+2];
	ld_align(8)_f16	$s0, [$d0+2];
	ld_align(16)_f16	$s0, [$d0+2];
	ld_align(32)_f16	$s0, [$d0+2];
	ld_align(64)_f16	$s0, [$d0+2];
	ld_align(128)_f16	$s0, [$d0+2];
	ld_align(256)_f16	$s0, [$d0+2];
	ld_equiv(1)_f16	$s0, [$d0+2];
	ld_equiv(2)_f16	$s0, [$d0+2];
	ld_equiv(255)_f16	$s0, [$d0+2];
	ld_width(2)_f16	$s0, [$d0+2];
	ld_width(4)_f16	$s0, [$d0+2];
	ld_width(8)_f16	$s0, [$d0+2];
	ld_width(16)_f16	$s0, [$d0+2];
	ld_width(32)_f16	$s0, [$d0+2];
	ld_width(64)_f16	$s0, [$d0+2];
	ld_width(128)_f16	$s0, [$d0+2];
	ld_width(256)_f16	$s0, [$d0+2];
	ld_width(512)_f16	$s0, [$d0+2];
	ld_width(1024)_f16	$s0, [$d0+2];
	ld_width(2048)_f16	$s0, [$d0+2];
	ld_width(4096)_f16	$s0, [$d0+2];
	ld_width(8192)_f16	$s0, [$d0+2];
	ld_width(16384)_f16	$s0, [$d0+2];
	ld_width(32768)_f16	$s0, [$d0+2];
	ld_width(65536)_f16	$s0, [$d0+2];
	ld_width(131072)_f16	$s0, [$d0+2];
	ld_width(262144)_f16	$s0, [$d0+2];
	ld_width(524288)_f16	$s0, [$d0+2];
	ld_width(1048576)_f16	$s0, [$d0+2];
	ld_width(2097152)_f16	$s0, [$d0+2];
	ld_width(4194304)_f16	$s0, [$d0+2];
	ld_width(8388608)_f16	$s0, [$d0+2];
	ld_width(16777216)_f16	$s0, [$d0+2];
	ld_width(33554432)_f16	$s0, [$d0+2];
	ld_width(67108864)_f16	$s0, [$d0+2];
	ld_width(134217728)_f16	$s0, [$d0+2];
	ld_width(268435456)_f16	$s0, [$d0+2];
	ld_width(536870912)_f16	$s0, [$d0+2];
	ld_width(1073741824)_f16	$s0, [$d0+2];
	ld_width(2147483648)_f16	$s0, [$d0+2];
	ld_width(WAVESIZE)_f16	$s0, [$d0+2];
	ld_width(all)_f16	$s0, [$d0+2];
	// 
	// Next sample
	// 
	ld_global_f16	$s0, [&GlobalVar];
	// 
	ld_global_const_f16	$s0, [&GlobalVar];
	ld_v2_global_f16	($s0, $s1), [&GlobalVar];
	ld_v3_global_f16	($s0, $s1, $s2), [&GlobalVar];
	ld_v4_global_f16	($s0, $s1, $s2, $s3), [&GlobalVar];
	ld_global_f16	$s0, [$d0+2];
	ld_global_f16	$s0, [$d0+3];
	ld_global_f16	$s0, [$d0+5];
	ld_global_f16	$s0, [$d0+6];
	ld_global_f16	$s0, [0];
	ld_global_align(2)_f16	$s0, [&GlobalVar];
	ld_global_align(4)_f16	$s0, [&GlobalVar];
	ld_global_align(8)_f16	$s0, [&GlobalVar];
	ld_global_align(16)_f16	$s0, [&GlobalVar];
	ld_global_align(32)_f16	$s0, [&GlobalVar];
	ld_global_align(64)_f16	$s0, [&GlobalVar];
	ld_global_align(128)_f16	$s0, [&GlobalVar];
	ld_global_align(256)_f16	$s0, [&GlobalVar];
	ld_global_equiv(1)_f16	$s0, [&GlobalVar];
	ld_global_equiv(2)_f16	$s0, [&GlobalVar];
	ld_global_equiv(255)_f16	$s0, [&GlobalVar];
	ld_global_width(2)_f16	$s0, [&GlobalVar];
	ld_global_width(4)_f16	$s0, [&GlobalVar];
	ld_global_width(8)_f16	$s0, [&GlobalVar];
	ld_global_width(16)_f16	$s0, [&GlobalVar];
	ld_global_width(32)_f16	$s0, [&GlobalVar];
	ld_global_width(64)_f16	$s0, [&GlobalVar];
	ld_global_width(128)_f16	$s0, [&GlobalVar];
	ld_global_width(256)_f16	$s0, [&GlobalVar];
	ld_global_width(512)_f16	$s0, [&GlobalVar];
	ld_global_width(1024)_f16	$s0, [&GlobalVar];
	ld_global_width(2048)_f16	$s0, [&GlobalVar];
	ld_global_width(4096)_f16	$s0, [&GlobalVar];
	ld_global_width(8192)_f16	$s0, [&GlobalVar];
	ld_global_width(16384)_f16	$s0, [&GlobalVar];
	ld_global_width(32768)_f16	$s0, [&GlobalVar];
	ld_global_width(65536)_f16	$s0, [&GlobalVar];
	ld_global_width(131072)_f16	$s0, [&GlobalVar];
	ld_global_width(262144)_f16	$s0, [&GlobalVar];
	ld_global_width(524288)_f16	$s0, [&GlobalVar];
	ld_global_width(1048576)_f16	$s0, [&GlobalVar];
	ld_global_width(2097152)_f16	$s0, [&GlobalVar];
	ld_global_width(4194304)_f16	$s0, [&GlobalVar];
	ld_global_width(8388608)_f16	$s0, [&GlobalVar];
	ld_global_width(16777216)_f16	$s0, [&GlobalVar];
	ld_global_width(33554432)_f16	$s0, [&GlobalVar];
	ld_global_width(67108864)_f16	$s0, [&GlobalVar];
	ld_global_width(134217728)_f16	$s0, [&GlobalVar];
	ld_global_width(268435456)_f16	$s0, [&GlobalVar];
	ld_global_width(536870912)_f16	$s0, [&GlobalVar];
	ld_global_width(1073741824)_f16	$s0, [&GlobalVar];
	ld_global_width(2147483648)_f16	$s0, [&GlobalVar];
	ld_global_width(WAVESIZE)_f16	$s0, [&GlobalVar];
	ld_global_width(all)_f16	$s0, [&GlobalVar];
	// 
	// Next sample
	// 
	ld_readonly_f16	$s0, [&ReadonlyVar];
	// 
	ld_readonly_const_f16	$s0, [&ReadonlyVar];
	ld_v2_readonly_f16	($s0, $s1), [&ReadonlyVar];
	ld_v3_readonly_f16	($s0, $s1, $s2), [&ReadonlyVar];
	ld_v4_readonly_f16	($s0, $s1, $s2, $s3), [&ReadonlyVar];
	ld_readonly_f16	$s0, [$d0+2];
	ld_readonly_f16	$s0, [$d0+3];
	ld_readonly_f16	$s0, [$d0+5];
	ld_readonly_f16	$s0, [$d0+6];
	ld_readonly_f16	$s0, [0];
	ld_readonly_align(2)_f16	$s0, [&ReadonlyVar];
	ld_readonly_align(4)_f16	$s0, [&ReadonlyVar];
	ld_readonly_align(8)_f16	$s0, [&ReadonlyVar];
	ld_readonly_align(16)_f16	$s0, [&ReadonlyVar];
	ld_readonly_align(32)_f16	$s0, [&ReadonlyVar];
	ld_readonly_align(64)_f16	$s0, [&ReadonlyVar];
	ld_readonly_align(128)_f16	$s0, [&ReadonlyVar];
	ld_readonly_align(256)_f16	$s0, [&ReadonlyVar];
	ld_readonly_equiv(1)_f16	$s0, [&ReadonlyVar];
	ld_readonly_equiv(2)_f16	$s0, [&ReadonlyVar];
	ld_readonly_equiv(255)_f16	$s0, [&ReadonlyVar];
	ld_readonly_width(2)_f16	$s0, [&ReadonlyVar];
	ld_readonly_width(4)_f16	$s0, [&ReadonlyVar];
	ld_readonly_width(8)_f16	$s0, [&ReadonlyVar];
	ld_readonly_width(16)_f16	$s0, [&ReadonlyVar];
	ld_readonly_width(32)_f16	$s0, [&ReadonlyVar];
	ld_readonly_width(64)_f16	$s0, [&ReadonlyVar];
	ld_readonly_width(128)_f16	$s0, [&ReadonlyVar];
	ld_readonly_width(256)_f16	$s0, [&ReadonlyVar];
	ld_readonly_width(512)_f16	$s0, [&ReadonlyVar];
	ld_readonly_width(1024)_f16	$s0, [&ReadonlyVar];
	ld_readonly_width(2048)_f16	$s0, [&ReadonlyVar];
	ld_readonly_width(4096)_f16	$s0, [&ReadonlyVar];
	ld_readonly_width(8192)_f16	$s0, [&ReadonlyVar];
	ld_readonly_width(16384)_f16	$s0, [&ReadonlyVar];
	ld_readonly_width(32768)_f16	$s0, [&ReadonlyVar];
	ld_readonly_width(65536)_f16	$s0, [&ReadonlyVar];
	ld_readonly_width(131072)_f16	$s0, [&ReadonlyVar];
	ld_readonly_width(262144)_f16	$s0, [&ReadonlyVar];
	ld_readonly_width(524288)_f16	$s0, [&ReadonlyVar];
	ld_readonly_width(1048576)_f16	$s0, [&ReadonlyVar];
	ld_readonly_width(2097152)_f16	$s0, [&ReadonlyVar];
	ld_readonly_width(4194304)_f16	$s0, [&ReadonlyVar];
	ld_readonly_width(8388608)_f16	$s0, [&ReadonlyVar];
	ld_readonly_width(16777216)_f16	$s0, [&ReadonlyVar];
	ld_readonly_width(33554432)_f16	$s0, [&ReadonlyVar];
	ld_readonly_width(67108864)_f16	$s0, [&ReadonlyVar];
	ld_readonly_width(134217728)_f16	$s0, [&ReadonlyVar];
	ld_readonly_width(268435456)_f16	$s0, [&ReadonlyVar];
	ld_readonly_width(536870912)_f16	$s0, [&ReadonlyVar];
	ld_readonly_width(1073741824)_f16	$s0, [&ReadonlyVar];
	ld_readonly_width(2147483648)_f16	$s0, [&ReadonlyVar];
	ld_readonly_width(WAVESIZE)_f16	$s0, [&ReadonlyVar];
	ld_readonly_width(all)_f16	$s0, [&ReadonlyVar];
	// 
	// Next sample
	// 
	ld_kernarg_f16	$s0, [$d0+2];
	// 
	ld_v2_kernarg_f16	($s0, $s1), [$d0+2];
	ld_v3_kernarg_f16	($s0, $s1, $s2), [$d0+2];
	ld_v4_kernarg_f16	($s0, $s1, $s2, $s3), [$d0+2];
	ld_kernarg_f16	$s0, [$d0+3];
	ld_kernarg_f16	$s0, [$d0+5];
	ld_kernarg_f16	$s0, [$d0+6];
	ld_kernarg_f16	$s0, [0];
	ld_kernarg_align(2)_f16	$s0, [$d0+2];
	ld_kernarg_align(4)_f16	$s0, [$d0+2];
	ld_kernarg_align(8)_f16	$s0, [$d0+2];
	ld_kernarg_align(16)_f16	$s0, [$d0+2];
	ld_kernarg_align(32)_f16	$s0, [$d0+2];
	ld_kernarg_align(64)_f16	$s0, [$d0+2];
	ld_kernarg_align(128)_f16	$s0, [$d0+2];
	ld_kernarg_align(256)_f16	$s0, [$d0+2];
	ld_kernarg_equiv(1)_f16	$s0, [$d0+2];
	ld_kernarg_equiv(2)_f16	$s0, [$d0+2];
	ld_kernarg_equiv(255)_f16	$s0, [$d0+2];
	ld_kernarg_width(2)_f16	$s0, [$d0+2];
	ld_kernarg_width(4)_f16	$s0, [$d0+2];
	ld_kernarg_width(8)_f16	$s0, [$d0+2];
	ld_kernarg_width(16)_f16	$s0, [$d0+2];
	ld_kernarg_width(32)_f16	$s0, [$d0+2];
	ld_kernarg_width(64)_f16	$s0, [$d0+2];
	ld_kernarg_width(128)_f16	$s0, [$d0+2];
	ld_kernarg_width(256)_f16	$s0, [$d0+2];
	ld_kernarg_width(512)_f16	$s0, [$d0+2];
	ld_kernarg_width(1024)_f16	$s0, [$d0+2];
	ld_kernarg_width(2048)_f16	$s0, [$d0+2];
	ld_kernarg_width(4096)_f16	$s0, [$d0+2];
	ld_kernarg_width(8192)_f16	$s0, [$d0+2];
	ld_kernarg_width(16384)_f16	$s0, [$d0+2];
	ld_kernarg_width(32768)_f16	$s0, [$d0+2];
	ld_kernarg_width(65536)_f16	$s0, [$d0+2];
	ld_kernarg_width(131072)_f16	$s0, [$d0+2];
	ld_kernarg_width(262144)_f16	$s0, [$d0+2];
	ld_kernarg_width(524288)_f16	$s0, [$d0+2];
	ld_kernarg_width(1048576)_f16	$s0, [$d0+2];
	ld_kernarg_width(2097152)_f16	$s0, [$d0+2];
	ld_kernarg_width(4194304)_f16	$s0, [$d0+2];
	ld_kernarg_width(8388608)_f16	$s0, [$d0+2];
	ld_kernarg_width(16777216)_f16	$s0, [$d0+2];
	ld_kernarg_width(33554432)_f16	$s0, [$d0+2];
	ld_kernarg_width(67108864)_f16	$s0, [$d0+2];
	ld_kernarg_width(134217728)_f16	$s0, [$d0+2];
	ld_kernarg_width(268435456)_f16	$s0, [$d0+2];
	ld_kernarg_width(536870912)_f16	$s0, [$d0+2];
	ld_kernarg_width(1073741824)_f16	$s0, [$d0+2];
	ld_kernarg_width(2147483648)_f16	$s0, [$d0+2];
	ld_kernarg_width(WAVESIZE)_f16	$s0, [$d0+2];
	ld_kernarg_width(all)_f16	$s0, [$d0+2];
	// 
	// Next sample
	// 
	ld_group_f16	$s0, [&GroupVar];
	// 
	ld_v2_group_f16	($s0, $s1), [&GroupVar];
	ld_v3_group_f16	($s0, $s1, $s2), [&GroupVar];
	ld_v4_group_f16	($s0, $s1, $s2, $s3), [&GroupVar];
	ld_group_f16	$s0, [$s0+2];
	ld_group_f16	$s0, [$s0+3];
	ld_group_f16	$s0, [$s0+5];
	ld_group_f16	$s0, [$s0+6];
	ld_group_f16	$s0, [0];
	ld_group_align(2)_f16	$s0, [&GroupVar];
	ld_group_align(4)_f16	$s0, [&GroupVar];
	ld_group_align(8)_f16	$s0, [&GroupVar];
	ld_group_align(16)_f16	$s0, [&GroupVar];
	ld_group_align(32)_f16	$s0, [&GroupVar];
	ld_group_align(64)_f16	$s0, [&GroupVar];
	ld_group_align(128)_f16	$s0, [&GroupVar];
	ld_group_align(256)_f16	$s0, [&GroupVar];
	ld_group_equiv(1)_f16	$s0, [&GroupVar];
	ld_group_equiv(2)_f16	$s0, [&GroupVar];
	ld_group_equiv(255)_f16	$s0, [&GroupVar];
	ld_group_width(2)_f16	$s0, [&GroupVar];
	ld_group_width(4)_f16	$s0, [&GroupVar];
	ld_group_width(8)_f16	$s0, [&GroupVar];
	ld_group_width(16)_f16	$s0, [&GroupVar];
	ld_group_width(32)_f16	$s0, [&GroupVar];
	ld_group_width(64)_f16	$s0, [&GroupVar];
	ld_group_width(128)_f16	$s0, [&GroupVar];
	ld_group_width(256)_f16	$s0, [&GroupVar];
	ld_group_width(512)_f16	$s0, [&GroupVar];
	ld_group_width(1024)_f16	$s0, [&GroupVar];
	ld_group_width(2048)_f16	$s0, [&GroupVar];
	ld_group_width(4096)_f16	$s0, [&GroupVar];
	ld_group_width(8192)_f16	$s0, [&GroupVar];
	ld_group_width(16384)_f16	$s0, [&GroupVar];
	ld_group_width(32768)_f16	$s0, [&GroupVar];
	ld_group_width(65536)_f16	$s0, [&GroupVar];
	ld_group_width(131072)_f16	$s0, [&GroupVar];
	ld_group_width(262144)_f16	$s0, [&GroupVar];
	ld_group_width(524288)_f16	$s0, [&GroupVar];
	ld_group_width(1048576)_f16	$s0, [&GroupVar];
	ld_group_width(2097152)_f16	$s0, [&GroupVar];
	ld_group_width(4194304)_f16	$s0, [&GroupVar];
	ld_group_width(8388608)_f16	$s0, [&GroupVar];
	ld_group_width(16777216)_f16	$s0, [&GroupVar];
	ld_group_width(33554432)_f16	$s0, [&GroupVar];
	ld_group_width(67108864)_f16	$s0, [&GroupVar];
	ld_group_width(134217728)_f16	$s0, [&GroupVar];
	ld_group_width(268435456)_f16	$s0, [&GroupVar];
	ld_group_width(536870912)_f16	$s0, [&GroupVar];
	ld_group_width(1073741824)_f16	$s0, [&GroupVar];
	ld_group_width(2147483648)_f16	$s0, [&GroupVar];
	ld_group_width(WAVESIZE)_f16	$s0, [&GroupVar];
	ld_group_width(all)_f16	$s0, [&GroupVar];
	// 
	// Next sample
	// 
	ld_private_f16	$s0, [&PrivateVar];
	// 
	ld_v2_private_f16	($s0, $s1), [&PrivateVar];
	ld_v3_private_f16	($s0, $s1, $s2), [&PrivateVar];
	ld_v4_private_f16	($s0, $s1, $s2, $s3), [&PrivateVar];
	ld_private_f16	$s0, [$s0+2];
	ld_private_f16	$s0, [$s0+3];
	ld_private_f16	$s0, [$s0+5];
	ld_private_f16	$s0, [$s0+6];
	ld_private_f16	$s0, [0];
	ld_private_align(2)_f16	$s0, [&PrivateVar];
	ld_private_align(4)_f16	$s0, [&PrivateVar];
	ld_private_align(8)_f16	$s0, [&PrivateVar];
	ld_private_align(16)_f16	$s0, [&PrivateVar];
	ld_private_align(32)_f16	$s0, [&PrivateVar];
	ld_private_align(64)_f16	$s0, [&PrivateVar];
	ld_private_align(128)_f16	$s0, [&PrivateVar];
	ld_private_align(256)_f16	$s0, [&PrivateVar];
	ld_private_equiv(1)_f16	$s0, [&PrivateVar];
	ld_private_equiv(2)_f16	$s0, [&PrivateVar];
	ld_private_equiv(255)_f16	$s0, [&PrivateVar];
	ld_private_width(2)_f16	$s0, [&PrivateVar];
	ld_private_width(4)_f16	$s0, [&PrivateVar];
	ld_private_width(8)_f16	$s0, [&PrivateVar];
	ld_private_width(16)_f16	$s0, [&PrivateVar];
	ld_private_width(32)_f16	$s0, [&PrivateVar];
	ld_private_width(64)_f16	$s0, [&PrivateVar];
	ld_private_width(128)_f16	$s0, [&PrivateVar];
	ld_private_width(256)_f16	$s0, [&PrivateVar];
	ld_private_width(512)_f16	$s0, [&PrivateVar];
	ld_private_width(1024)_f16	$s0, [&PrivateVar];
	ld_private_width(2048)_f16	$s0, [&PrivateVar];
	ld_private_width(4096)_f16	$s0, [&PrivateVar];
	ld_private_width(8192)_f16	$s0, [&PrivateVar];
	ld_private_width(16384)_f16	$s0, [&PrivateVar];
	ld_private_width(32768)_f16	$s0, [&PrivateVar];
	ld_private_width(65536)_f16	$s0, [&PrivateVar];
	ld_private_width(131072)_f16	$s0, [&PrivateVar];
	ld_private_width(262144)_f16	$s0, [&PrivateVar];
	ld_private_width(524288)_f16	$s0, [&PrivateVar];
	ld_private_width(1048576)_f16	$s0, [&PrivateVar];
	ld_private_width(2097152)_f16	$s0, [&PrivateVar];
	ld_private_width(4194304)_f16	$s0, [&PrivateVar];
	ld_private_width(8388608)_f16	$s0, [&PrivateVar];
	ld_private_width(16777216)_f16	$s0, [&PrivateVar];
	ld_private_width(33554432)_f16	$s0, [&PrivateVar];
	ld_private_width(67108864)_f16	$s0, [&PrivateVar];
	ld_private_width(134217728)_f16	$s0, [&PrivateVar];
	ld_private_width(268435456)_f16	$s0, [&PrivateVar];
	ld_private_width(536870912)_f16	$s0, [&PrivateVar];
	ld_private_width(1073741824)_f16	$s0, [&PrivateVar];
	ld_private_width(2147483648)_f16	$s0, [&PrivateVar];
	ld_private_width(WAVESIZE)_f16	$s0, [&PrivateVar];
	ld_private_width(all)_f16	$s0, [&PrivateVar];
	// 
	// Next sample
	// 
	ld_spill_f16	$s0, [%SpillVar];
	// 
	ld_v2_spill_f16	($s0, $s1), [%SpillVar];
	ld_v3_spill_f16	($s0, $s1, $s2), [%SpillVar];
	ld_v4_spill_f16	($s0, $s1, $s2, $s3), [%SpillVar];
	ld_spill_align(2)_f16	$s0, [%SpillVar];
	ld_spill_align(4)_f16	$s0, [%SpillVar];
	ld_spill_align(8)_f16	$s0, [%SpillVar];
	ld_spill_align(16)_f16	$s0, [%SpillVar];
	ld_spill_align(32)_f16	$s0, [%SpillVar];
	ld_spill_align(64)_f16	$s0, [%SpillVar];
	ld_spill_align(128)_f16	$s0, [%SpillVar];
	ld_spill_align(256)_f16	$s0, [%SpillVar];
	ld_spill_equiv(1)_f16	$s0, [%SpillVar];
	ld_spill_equiv(2)_f16	$s0, [%SpillVar];
	ld_spill_equiv(255)_f16	$s0, [%SpillVar];
	ld_spill_width(2)_f16	$s0, [%SpillVar];
	ld_spill_width(4)_f16	$s0, [%SpillVar];
	ld_spill_width(8)_f16	$s0, [%SpillVar];
	ld_spill_width(16)_f16	$s0, [%SpillVar];
	ld_spill_width(32)_f16	$s0, [%SpillVar];
	ld_spill_width(64)_f16	$s0, [%SpillVar];
	ld_spill_width(128)_f16	$s0, [%SpillVar];
	ld_spill_width(256)_f16	$s0, [%SpillVar];
	ld_spill_width(512)_f16	$s0, [%SpillVar];
	ld_spill_width(1024)_f16	$s0, [%SpillVar];
	ld_spill_width(2048)_f16	$s0, [%SpillVar];
	ld_spill_width(4096)_f16	$s0, [%SpillVar];
	ld_spill_width(8192)_f16	$s0, [%SpillVar];
	ld_spill_width(16384)_f16	$s0, [%SpillVar];
	ld_spill_width(32768)_f16	$s0, [%SpillVar];
	ld_spill_width(65536)_f16	$s0, [%SpillVar];
	ld_spill_width(131072)_f16	$s0, [%SpillVar];
	ld_spill_width(262144)_f16	$s0, [%SpillVar];
	ld_spill_width(524288)_f16	$s0, [%SpillVar];
	ld_spill_width(1048576)_f16	$s0, [%SpillVar];
	ld_spill_width(2097152)_f16	$s0, [%SpillVar];
	ld_spill_width(4194304)_f16	$s0, [%SpillVar];
	ld_spill_width(8388608)_f16	$s0, [%SpillVar];
	ld_spill_width(16777216)_f16	$s0, [%SpillVar];
	ld_spill_width(33554432)_f16	$s0, [%SpillVar];
	ld_spill_width(67108864)_f16	$s0, [%SpillVar];
	ld_spill_width(134217728)_f16	$s0, [%SpillVar];
	ld_spill_width(268435456)_f16	$s0, [%SpillVar];
	ld_spill_width(536870912)_f16	$s0, [%SpillVar];
	ld_spill_width(1073741824)_f16	$s0, [%SpillVar];
	ld_spill_width(2147483648)_f16	$s0, [%SpillVar];
	ld_spill_width(WAVESIZE)_f16	$s0, [%SpillVar];
	ld_spill_width(all)_f16	$s0, [%SpillVar];
	// 
	// Next sample
	// 
	ld_f32	$s0, [$d0+2];
	// 
	ld_const_f32	$s0, [$d0+2];
	ld_v2_f32	($s0, $s1), [$d0+2];
	ld_v3_f32	($s0, $s1, $s2), [$d0+2];
	ld_v4_f32	($s0, $s1, $s2, $s3), [$d0+2];
	ld_f32	$s0, [$d0+3];
	ld_f32	$s0, [$d0+5];
	ld_f32	$s0, [$d0+6];
	ld_f32	$s0, [0];
	ld_align(2)_f32	$s0, [$d0+2];
	ld_align(4)_f32	$s0, [$d0+2];
	ld_align(8)_f32	$s0, [$d0+2];
	ld_align(16)_f32	$s0, [$d0+2];
	ld_align(32)_f32	$s0, [$d0+2];
	ld_align(64)_f32	$s0, [$d0+2];
	ld_align(128)_f32	$s0, [$d0+2];
	ld_align(256)_f32	$s0, [$d0+2];
	ld_equiv(1)_f32	$s0, [$d0+2];
	ld_equiv(2)_f32	$s0, [$d0+2];
	ld_equiv(255)_f32	$s0, [$d0+2];
	ld_width(2)_f32	$s0, [$d0+2];
	ld_width(4)_f32	$s0, [$d0+2];
	ld_width(8)_f32	$s0, [$d0+2];
	ld_width(16)_f32	$s0, [$d0+2];
	ld_width(32)_f32	$s0, [$d0+2];
	ld_width(64)_f32	$s0, [$d0+2];
	ld_width(128)_f32	$s0, [$d0+2];
	ld_width(256)_f32	$s0, [$d0+2];
	ld_width(512)_f32	$s0, [$d0+2];
	ld_width(1024)_f32	$s0, [$d0+2];
	ld_width(2048)_f32	$s0, [$d0+2];
	ld_width(4096)_f32	$s0, [$d0+2];
	ld_width(8192)_f32	$s0, [$d0+2];
	ld_width(16384)_f32	$s0, [$d0+2];
	ld_width(32768)_f32	$s0, [$d0+2];
	ld_width(65536)_f32	$s0, [$d0+2];
	ld_width(131072)_f32	$s0, [$d0+2];
	ld_width(262144)_f32	$s0, [$d0+2];
	ld_width(524288)_f32	$s0, [$d0+2];
	ld_width(1048576)_f32	$s0, [$d0+2];
	ld_width(2097152)_f32	$s0, [$d0+2];
	ld_width(4194304)_f32	$s0, [$d0+2];
	ld_width(8388608)_f32	$s0, [$d0+2];
	ld_width(16777216)_f32	$s0, [$d0+2];
	ld_width(33554432)_f32	$s0, [$d0+2];
	ld_width(67108864)_f32	$s0, [$d0+2];
	ld_width(134217728)_f32	$s0, [$d0+2];
	ld_width(268435456)_f32	$s0, [$d0+2];
	ld_width(536870912)_f32	$s0, [$d0+2];
	ld_width(1073741824)_f32	$s0, [$d0+2];
	ld_width(2147483648)_f32	$s0, [$d0+2];
	ld_width(WAVESIZE)_f32	$s0, [$d0+2];
	ld_width(all)_f32	$s0, [$d0+2];
	// 
	// Next sample
	// 
	ld_global_f32	$s0, [&GlobalVar];
	// 
	ld_global_const_f32	$s0, [&GlobalVar];
	ld_v2_global_f32	($s0, $s1), [&GlobalVar];
	ld_v3_global_f32	($s0, $s1, $s2), [&GlobalVar];
	ld_v4_global_f32	($s0, $s1, $s2, $s3), [&GlobalVar];
	ld_global_f32	$s0, [$d0+2];
	ld_global_f32	$s0, [$d0+3];
	ld_global_f32	$s0, [$d0+5];
	ld_global_f32	$s0, [$d0+6];
	ld_global_f32	$s0, [0];
	ld_global_align(2)_f32	$s0, [&GlobalVar];
	ld_global_align(4)_f32	$s0, [&GlobalVar];
	ld_global_align(8)_f32	$s0, [&GlobalVar];
	ld_global_align(16)_f32	$s0, [&GlobalVar];
	ld_global_align(32)_f32	$s0, [&GlobalVar];
	ld_global_align(64)_f32	$s0, [&GlobalVar];
	ld_global_align(128)_f32	$s0, [&GlobalVar];
	ld_global_align(256)_f32	$s0, [&GlobalVar];
	ld_global_equiv(1)_f32	$s0, [&GlobalVar];
	ld_global_equiv(2)_f32	$s0, [&GlobalVar];
	ld_global_equiv(255)_f32	$s0, [&GlobalVar];
	ld_global_width(2)_f32	$s0, [&GlobalVar];
	ld_global_width(4)_f32	$s0, [&GlobalVar];
	ld_global_width(8)_f32	$s0, [&GlobalVar];
	ld_global_width(16)_f32	$s0, [&GlobalVar];
	ld_global_width(32)_f32	$s0, [&GlobalVar];
	ld_global_width(64)_f32	$s0, [&GlobalVar];
	ld_global_width(128)_f32	$s0, [&GlobalVar];
	ld_global_width(256)_f32	$s0, [&GlobalVar];
	ld_global_width(512)_f32	$s0, [&GlobalVar];
	ld_global_width(1024)_f32	$s0, [&GlobalVar];
	ld_global_width(2048)_f32	$s0, [&GlobalVar];
	ld_global_width(4096)_f32	$s0, [&GlobalVar];
	ld_global_width(8192)_f32	$s0, [&GlobalVar];
	ld_global_width(16384)_f32	$s0, [&GlobalVar];
	ld_global_width(32768)_f32	$s0, [&GlobalVar];
	ld_global_width(65536)_f32	$s0, [&GlobalVar];
	ld_global_width(131072)_f32	$s0, [&GlobalVar];
	ld_global_width(262144)_f32	$s0, [&GlobalVar];
	ld_global_width(524288)_f32	$s0, [&GlobalVar];
	ld_global_width(1048576)_f32	$s0, [&GlobalVar];
	ld_global_width(2097152)_f32	$s0, [&GlobalVar];
	ld_global_width(4194304)_f32	$s0, [&GlobalVar];
	ld_global_width(8388608)_f32	$s0, [&GlobalVar];
	ld_global_width(16777216)_f32	$s0, [&GlobalVar];
	ld_global_width(33554432)_f32	$s0, [&GlobalVar];
	ld_global_width(67108864)_f32	$s0, [&GlobalVar];
	ld_global_width(134217728)_f32	$s0, [&GlobalVar];
	ld_global_width(268435456)_f32	$s0, [&GlobalVar];
	ld_global_width(536870912)_f32	$s0, [&GlobalVar];
	ld_global_width(1073741824)_f32	$s0, [&GlobalVar];
	ld_global_width(2147483648)_f32	$s0, [&GlobalVar];
	ld_global_width(WAVESIZE)_f32	$s0, [&GlobalVar];
	ld_global_width(all)_f32	$s0, [&GlobalVar];
	// 
	// Next sample
	// 
	ld_readonly_f32	$s0, [&ReadonlyVar];
	// 
	ld_readonly_const_f32	$s0, [&ReadonlyVar];
	ld_v2_readonly_f32	($s0, $s1), [&ReadonlyVar];
	ld_v3_readonly_f32	($s0, $s1, $s2), [&ReadonlyVar];
	ld_v4_readonly_f32	($s0, $s1, $s2, $s3), [&ReadonlyVar];
	ld_readonly_f32	$s0, [$d0+2];
	ld_readonly_f32	$s0, [$d0+3];
	ld_readonly_f32	$s0, [$d0+5];
	ld_readonly_f32	$s0, [$d0+6];
	ld_readonly_f32	$s0, [0];
	ld_readonly_align(2)_f32	$s0, [&ReadonlyVar];
	ld_readonly_align(4)_f32	$s0, [&ReadonlyVar];
	ld_readonly_align(8)_f32	$s0, [&ReadonlyVar];
	ld_readonly_align(16)_f32	$s0, [&ReadonlyVar];
	ld_readonly_align(32)_f32	$s0, [&ReadonlyVar];
	ld_readonly_align(64)_f32	$s0, [&ReadonlyVar];
	ld_readonly_align(128)_f32	$s0, [&ReadonlyVar];
	ld_readonly_align(256)_f32	$s0, [&ReadonlyVar];
	ld_readonly_equiv(1)_f32	$s0, [&ReadonlyVar];
	ld_readonly_equiv(2)_f32	$s0, [&ReadonlyVar];
	ld_readonly_equiv(255)_f32	$s0, [&ReadonlyVar];
	ld_readonly_width(2)_f32	$s0, [&ReadonlyVar];
	ld_readonly_width(4)_f32	$s0, [&ReadonlyVar];
	ld_readonly_width(8)_f32	$s0, [&ReadonlyVar];
	ld_readonly_width(16)_f32	$s0, [&ReadonlyVar];
	ld_readonly_width(32)_f32	$s0, [&ReadonlyVar];
	ld_readonly_width(64)_f32	$s0, [&ReadonlyVar];
	ld_readonly_width(128)_f32	$s0, [&ReadonlyVar];
	ld_readonly_width(256)_f32	$s0, [&ReadonlyVar];
	ld_readonly_width(512)_f32	$s0, [&ReadonlyVar];
	ld_readonly_width(1024)_f32	$s0, [&ReadonlyVar];
	ld_readonly_width(2048)_f32	$s0, [&ReadonlyVar];
	ld_readonly_width(4096)_f32	$s0, [&ReadonlyVar];
	ld_readonly_width(8192)_f32	$s0, [&ReadonlyVar];
	ld_readonly_width(16384)_f32	$s0, [&ReadonlyVar];
	ld_readonly_width(32768)_f32	$s0, [&ReadonlyVar];
	ld_readonly_width(65536)_f32	$s0, [&ReadonlyVar];
	ld_readonly_width(131072)_f32	$s0, [&ReadonlyVar];
	ld_readonly_width(262144)_f32	$s0, [&ReadonlyVar];
	ld_readonly_width(524288)_f32	$s0, [&ReadonlyVar];
	ld_readonly_width(1048576)_f32	$s0, [&ReadonlyVar];
	ld_readonly_width(2097152)_f32	$s0, [&ReadonlyVar];
	ld_readonly_width(4194304)_f32	$s0, [&ReadonlyVar];
	ld_readonly_width(8388608)_f32	$s0, [&ReadonlyVar];
	ld_readonly_width(16777216)_f32	$s0, [&ReadonlyVar];
	ld_readonly_width(33554432)_f32	$s0, [&ReadonlyVar];
	ld_readonly_width(67108864)_f32	$s0, [&ReadonlyVar];
	ld_readonly_width(134217728)_f32	$s0, [&ReadonlyVar];
	ld_readonly_width(268435456)_f32	$s0, [&ReadonlyVar];
	ld_readonly_width(536870912)_f32	$s0, [&ReadonlyVar];
	ld_readonly_width(1073741824)_f32	$s0, [&ReadonlyVar];
	ld_readonly_width(2147483648)_f32	$s0, [&ReadonlyVar];
	ld_readonly_width(WAVESIZE)_f32	$s0, [&ReadonlyVar];
	ld_readonly_width(all)_f32	$s0, [&ReadonlyVar];
	// 
	// Next sample
	// 
	ld_kernarg_f32	$s0, [$d0+2];
	// 
	ld_v2_kernarg_f32	($s0, $s1), [$d0+2];
	ld_v3_kernarg_f32	($s0, $s1, $s2), [$d0+2];
	ld_v4_kernarg_f32	($s0, $s1, $s2, $s3), [$d0+2];
	ld_kernarg_f32	$s0, [$d0+3];
	ld_kernarg_f32	$s0, [$d0+5];
	ld_kernarg_f32	$s0, [$d0+6];
	ld_kernarg_f32	$s0, [0];
	ld_kernarg_align(2)_f32	$s0, [$d0+2];
	ld_kernarg_align(4)_f32	$s0, [$d0+2];
	ld_kernarg_align(8)_f32	$s0, [$d0+2];
	ld_kernarg_align(16)_f32	$s0, [$d0+2];
	ld_kernarg_align(32)_f32	$s0, [$d0+2];
	ld_kernarg_align(64)_f32	$s0, [$d0+2];
	ld_kernarg_align(128)_f32	$s0, [$d0+2];
	ld_kernarg_align(256)_f32	$s0, [$d0+2];
	ld_kernarg_equiv(1)_f32	$s0, [$d0+2];
	ld_kernarg_equiv(2)_f32	$s0, [$d0+2];
	ld_kernarg_equiv(255)_f32	$s0, [$d0+2];
	ld_kernarg_width(2)_f32	$s0, [$d0+2];
	ld_kernarg_width(4)_f32	$s0, [$d0+2];
	ld_kernarg_width(8)_f32	$s0, [$d0+2];
	ld_kernarg_width(16)_f32	$s0, [$d0+2];
	ld_kernarg_width(32)_f32	$s0, [$d0+2];
	ld_kernarg_width(64)_f32	$s0, [$d0+2];
	ld_kernarg_width(128)_f32	$s0, [$d0+2];
	ld_kernarg_width(256)_f32	$s0, [$d0+2];
	ld_kernarg_width(512)_f32	$s0, [$d0+2];
	ld_kernarg_width(1024)_f32	$s0, [$d0+2];
	ld_kernarg_width(2048)_f32	$s0, [$d0+2];
	ld_kernarg_width(4096)_f32	$s0, [$d0+2];
	ld_kernarg_width(8192)_f32	$s0, [$d0+2];
	ld_kernarg_width(16384)_f32	$s0, [$d0+2];
	ld_kernarg_width(32768)_f32	$s0, [$d0+2];
	ld_kernarg_width(65536)_f32	$s0, [$d0+2];
	ld_kernarg_width(131072)_f32	$s0, [$d0+2];
	ld_kernarg_width(262144)_f32	$s0, [$d0+2];
	ld_kernarg_width(524288)_f32	$s0, [$d0+2];
	ld_kernarg_width(1048576)_f32	$s0, [$d0+2];
	ld_kernarg_width(2097152)_f32	$s0, [$d0+2];
	ld_kernarg_width(4194304)_f32	$s0, [$d0+2];
	ld_kernarg_width(8388608)_f32	$s0, [$d0+2];
	ld_kernarg_width(16777216)_f32	$s0, [$d0+2];
	ld_kernarg_width(33554432)_f32	$s0, [$d0+2];
	ld_kernarg_width(67108864)_f32	$s0, [$d0+2];
	ld_kernarg_width(134217728)_f32	$s0, [$d0+2];
	ld_kernarg_width(268435456)_f32	$s0, [$d0+2];
	ld_kernarg_width(536870912)_f32	$s0, [$d0+2];
	ld_kernarg_width(1073741824)_f32	$s0, [$d0+2];
	ld_kernarg_width(2147483648)_f32	$s0, [$d0+2];
	ld_kernarg_width(WAVESIZE)_f32	$s0, [$d0+2];
	ld_kernarg_width(all)_f32	$s0, [$d0+2];
	// 
	// Next sample
	// 
	ld_group_f32	$s0, [&GroupVar];
	// 
	ld_v2_group_f32	($s0, $s1), [&GroupVar];
	ld_v3_group_f32	($s0, $s1, $s2), [&GroupVar];
	ld_v4_group_f32	($s0, $s1, $s2, $s3), [&GroupVar];
	ld_group_f32	$s0, [$s0+2];
	ld_group_f32	$s0, [$s0+3];
	ld_group_f32	$s0, [$s0+5];
	ld_group_f32	$s0, [$s0+6];
	ld_group_f32	$s0, [0];
	ld_group_align(2)_f32	$s0, [&GroupVar];
	ld_group_align(4)_f32	$s0, [&GroupVar];
	ld_group_align(8)_f32	$s0, [&GroupVar];
	ld_group_align(16)_f32	$s0, [&GroupVar];
	ld_group_align(32)_f32	$s0, [&GroupVar];
	ld_group_align(64)_f32	$s0, [&GroupVar];
	ld_group_align(128)_f32	$s0, [&GroupVar];
	ld_group_align(256)_f32	$s0, [&GroupVar];
	ld_group_equiv(1)_f32	$s0, [&GroupVar];
	ld_group_equiv(2)_f32	$s0, [&GroupVar];
	ld_group_equiv(255)_f32	$s0, [&GroupVar];
	ld_group_width(2)_f32	$s0, [&GroupVar];
	ld_group_width(4)_f32	$s0, [&GroupVar];
	ld_group_width(8)_f32	$s0, [&GroupVar];
	ld_group_width(16)_f32	$s0, [&GroupVar];
	ld_group_width(32)_f32	$s0, [&GroupVar];
	ld_group_width(64)_f32	$s0, [&GroupVar];
	ld_group_width(128)_f32	$s0, [&GroupVar];
	ld_group_width(256)_f32	$s0, [&GroupVar];
	ld_group_width(512)_f32	$s0, [&GroupVar];
	ld_group_width(1024)_f32	$s0, [&GroupVar];
	ld_group_width(2048)_f32	$s0, [&GroupVar];
	ld_group_width(4096)_f32	$s0, [&GroupVar];
	ld_group_width(8192)_f32	$s0, [&GroupVar];
	ld_group_width(16384)_f32	$s0, [&GroupVar];
	ld_group_width(32768)_f32	$s0, [&GroupVar];
	ld_group_width(65536)_f32	$s0, [&GroupVar];
	ld_group_width(131072)_f32	$s0, [&GroupVar];
	ld_group_width(262144)_f32	$s0, [&GroupVar];
	ld_group_width(524288)_f32	$s0, [&GroupVar];
	ld_group_width(1048576)_f32	$s0, [&GroupVar];
	ld_group_width(2097152)_f32	$s0, [&GroupVar];
	ld_group_width(4194304)_f32	$s0, [&GroupVar];
	ld_group_width(8388608)_f32	$s0, [&GroupVar];
	ld_group_width(16777216)_f32	$s0, [&GroupVar];
	ld_group_width(33554432)_f32	$s0, [&GroupVar];
	ld_group_width(67108864)_f32	$s0, [&GroupVar];
	ld_group_width(134217728)_f32	$s0, [&GroupVar];
	ld_group_width(268435456)_f32	$s0, [&GroupVar];
	ld_group_width(536870912)_f32	$s0, [&GroupVar];
	ld_group_width(1073741824)_f32	$s0, [&GroupVar];
	ld_group_width(2147483648)_f32	$s0, [&GroupVar];
	ld_group_width(WAVESIZE)_f32	$s0, [&GroupVar];
	ld_group_width(all)_f32	$s0, [&GroupVar];
	// 
	// Next sample
	// 
	ld_private_f32	$s0, [&PrivateVar];
	// 
	ld_v2_private_f32	($s0, $s1), [&PrivateVar];
	ld_v3_private_f32	($s0, $s1, $s2), [&PrivateVar];
	ld_v4_private_f32	($s0, $s1, $s2, $s3), [&PrivateVar];
	ld_private_f32	$s0, [$s0+2];
	ld_private_f32	$s0, [$s0+3];
	ld_private_f32	$s0, [$s0+5];
	ld_private_f32	$s0, [$s0+6];
	ld_private_f32	$s0, [0];
	ld_private_align(2)_f32	$s0, [&PrivateVar];
	ld_private_align(4)_f32	$s0, [&PrivateVar];
	ld_private_align(8)_f32	$s0, [&PrivateVar];
	ld_private_align(16)_f32	$s0, [&PrivateVar];
	ld_private_align(32)_f32	$s0, [&PrivateVar];
	ld_private_align(64)_f32	$s0, [&PrivateVar];
	ld_private_align(128)_f32	$s0, [&PrivateVar];
	ld_private_align(256)_f32	$s0, [&PrivateVar];
	ld_private_equiv(1)_f32	$s0, [&PrivateVar];
	ld_private_equiv(2)_f32	$s0, [&PrivateVar];
	ld_private_equiv(255)_f32	$s0, [&PrivateVar];
	ld_private_width(2)_f32	$s0, [&PrivateVar];
	ld_private_width(4)_f32	$s0, [&PrivateVar];
	ld_private_width(8)_f32	$s0, [&PrivateVar];
	ld_private_width(16)_f32	$s0, [&PrivateVar];
	ld_private_width(32)_f32	$s0, [&PrivateVar];
	ld_private_width(64)_f32	$s0, [&PrivateVar];
	ld_private_width(128)_f32	$s0, [&PrivateVar];
	ld_private_width(256)_f32	$s0, [&PrivateVar];
	ld_private_width(512)_f32	$s0, [&PrivateVar];
	ld_private_width(1024)_f32	$s0, [&PrivateVar];
	ld_private_width(2048)_f32	$s0, [&PrivateVar];
	ld_private_width(4096)_f32	$s0, [&PrivateVar];
	ld_private_width(8192)_f32	$s0, [&PrivateVar];
	ld_private_width(16384)_f32	$s0, [&PrivateVar];
	ld_private_width(32768)_f32	$s0, [&PrivateVar];
	ld_private_width(65536)_f32	$s0, [&PrivateVar];
	ld_private_width(131072)_f32	$s0, [&PrivateVar];
	ld_private_width(262144)_f32	$s0, [&PrivateVar];
	ld_private_width(524288)_f32	$s0, [&PrivateVar];
	ld_private_width(1048576)_f32	$s0, [&PrivateVar];
	ld_private_width(2097152)_f32	$s0, [&PrivateVar];
	ld_private_width(4194304)_f32	$s0, [&PrivateVar];
	ld_private_width(8388608)_f32	$s0, [&PrivateVar];
	ld_private_width(16777216)_f32	$s0, [&PrivateVar];
	ld_private_width(33554432)_f32	$s0, [&PrivateVar];
	ld_private_width(67108864)_f32	$s0, [&PrivateVar];
	ld_private_width(134217728)_f32	$s0, [&PrivateVar];
	ld_private_width(268435456)_f32	$s0, [&PrivateVar];
	ld_private_width(536870912)_f32	$s0, [&PrivateVar];
	ld_private_width(1073741824)_f32	$s0, [&PrivateVar];
	ld_private_width(2147483648)_f32	$s0, [&PrivateVar];
	ld_private_width(WAVESIZE)_f32	$s0, [&PrivateVar];
	ld_private_width(all)_f32	$s0, [&PrivateVar];
	// 
	// Next sample
	// 
	ld_spill_f32	$s0, [%SpillVar];
	// 
	ld_v2_spill_f32	($s0, $s1), [%SpillVar];
	ld_v3_spill_f32	($s0, $s1, $s2), [%SpillVar];
	ld_v4_spill_f32	($s0, $s1, $s2, $s3), [%SpillVar];
	ld_spill_align(2)_f32	$s0, [%SpillVar];
	ld_spill_align(4)_f32	$s0, [%SpillVar];
	ld_spill_align(8)_f32	$s0, [%SpillVar];
	ld_spill_align(16)_f32	$s0, [%SpillVar];
	ld_spill_align(32)_f32	$s0, [%SpillVar];
	ld_spill_align(64)_f32	$s0, [%SpillVar];
	ld_spill_align(128)_f32	$s0, [%SpillVar];
	ld_spill_align(256)_f32	$s0, [%SpillVar];
	ld_spill_equiv(1)_f32	$s0, [%SpillVar];
	ld_spill_equiv(2)_f32	$s0, [%SpillVar];
	ld_spill_equiv(255)_f32	$s0, [%SpillVar];
	ld_spill_width(2)_f32	$s0, [%SpillVar];
	ld_spill_width(4)_f32	$s0, [%SpillVar];
	ld_spill_width(8)_f32	$s0, [%SpillVar];
	ld_spill_width(16)_f32	$s0, [%SpillVar];
	ld_spill_width(32)_f32	$s0, [%SpillVar];
	ld_spill_width(64)_f32	$s0, [%SpillVar];
	ld_spill_width(128)_f32	$s0, [%SpillVar];
	ld_spill_width(256)_f32	$s0, [%SpillVar];
	ld_spill_width(512)_f32	$s0, [%SpillVar];
	ld_spill_width(1024)_f32	$s0, [%SpillVar];
	ld_spill_width(2048)_f32	$s0, [%SpillVar];
	ld_spill_width(4096)_f32	$s0, [%SpillVar];
	ld_spill_width(8192)_f32	$s0, [%SpillVar];
	ld_spill_width(16384)_f32	$s0, [%SpillVar];
	ld_spill_width(32768)_f32	$s0, [%SpillVar];
	ld_spill_width(65536)_f32	$s0, [%SpillVar];
	ld_spill_width(131072)_f32	$s0, [%SpillVar];
	ld_spill_width(262144)_f32	$s0, [%SpillVar];
	ld_spill_width(524288)_f32	$s0, [%SpillVar];
	ld_spill_width(1048576)_f32	$s0, [%SpillVar];
	ld_spill_width(2097152)_f32	$s0, [%SpillVar];
	ld_spill_width(4194304)_f32	$s0, [%SpillVar];
	ld_spill_width(8388608)_f32	$s0, [%SpillVar];
	ld_spill_width(16777216)_f32	$s0, [%SpillVar];
	ld_spill_width(33554432)_f32	$s0, [%SpillVar];
	ld_spill_width(67108864)_f32	$s0, [%SpillVar];
	ld_spill_width(134217728)_f32	$s0, [%SpillVar];
	ld_spill_width(268435456)_f32	$s0, [%SpillVar];
	ld_spill_width(536870912)_f32	$s0, [%SpillVar];
	ld_spill_width(1073741824)_f32	$s0, [%SpillVar];
	ld_spill_width(2147483648)_f32	$s0, [%SpillVar];
	ld_spill_width(WAVESIZE)_f32	$s0, [%SpillVar];
	ld_spill_width(all)_f32	$s0, [%SpillVar];
	// 
	// Next sample
	// 
	ld_b128	$q0, [$d0+2];
	// 
	ld_const_b128	$q0, [$d0+2];
	ld_v2_b128	($q0, $q1), [$d0+2];
	ld_v3_b128	($q0, $q1, $q2), [$d0+2];
	ld_v4_b128	($q0, $q1, $q2, $q3), [$d0+2];
	ld_b128	$q0, [$d0+3];
	ld_b128	$q0, [$d0+5];
	ld_b128	$q0, [$d0+6];
	ld_b128	$q0, [0];
	ld_align(2)_b128	$q0, [$d0+2];
	ld_align(4)_b128	$q0, [$d0+2];
	ld_align(8)_b128	$q0, [$d0+2];
	ld_align(16)_b128	$q0, [$d0+2];
	ld_align(32)_b128	$q0, [$d0+2];
	ld_align(64)_b128	$q0, [$d0+2];
	ld_align(128)_b128	$q0, [$d0+2];
	ld_align(256)_b128	$q0, [$d0+2];
	ld_equiv(1)_b128	$q0, [$d0+2];
	ld_equiv(2)_b128	$q0, [$d0+2];
	ld_equiv(255)_b128	$q0, [$d0+2];
	ld_width(2)_b128	$q0, [$d0+2];
	ld_width(4)_b128	$q0, [$d0+2];
	ld_width(8)_b128	$q0, [$d0+2];
	ld_width(16)_b128	$q0, [$d0+2];
	ld_width(32)_b128	$q0, [$d0+2];
	ld_width(64)_b128	$q0, [$d0+2];
	ld_width(128)_b128	$q0, [$d0+2];
	ld_width(256)_b128	$q0, [$d0+2];
	ld_width(512)_b128	$q0, [$d0+2];
	ld_width(1024)_b128	$q0, [$d0+2];
	ld_width(2048)_b128	$q0, [$d0+2];
	ld_width(4096)_b128	$q0, [$d0+2];
	ld_width(8192)_b128	$q0, [$d0+2];
	ld_width(16384)_b128	$q0, [$d0+2];
	ld_width(32768)_b128	$q0, [$d0+2];
	ld_width(65536)_b128	$q0, [$d0+2];
	ld_width(131072)_b128	$q0, [$d0+2];
	ld_width(262144)_b128	$q0, [$d0+2];
	ld_width(524288)_b128	$q0, [$d0+2];
	ld_width(1048576)_b128	$q0, [$d0+2];
	ld_width(2097152)_b128	$q0, [$d0+2];
	ld_width(4194304)_b128	$q0, [$d0+2];
	ld_width(8388608)_b128	$q0, [$d0+2];
	ld_width(16777216)_b128	$q0, [$d0+2];
	ld_width(33554432)_b128	$q0, [$d0+2];
	ld_width(67108864)_b128	$q0, [$d0+2];
	ld_width(134217728)_b128	$q0, [$d0+2];
	ld_width(268435456)_b128	$q0, [$d0+2];
	ld_width(536870912)_b128	$q0, [$d0+2];
	ld_width(1073741824)_b128	$q0, [$d0+2];
	ld_width(2147483648)_b128	$q0, [$d0+2];
	ld_width(WAVESIZE)_b128	$q0, [$d0+2];
	ld_width(all)_b128	$q0, [$d0+2];
	// 
	// Next sample
	// 
	ld_global_b128	$q0, [&GlobalVar];
	// 
	ld_global_const_b128	$q0, [&GlobalVar];
	ld_v2_global_b128	($q0, $q1), [&GlobalVar];
	ld_v3_global_b128	($q0, $q1, $q2), [&GlobalVar];
	ld_v4_global_b128	($q0, $q1, $q2, $q3), [&GlobalVar];
	ld_global_b128	$q0, [$d0+2];
	ld_global_b128	$q0, [$d0+3];
	ld_global_b128	$q0, [$d0+5];
	ld_global_b128	$q0, [$d0+6];
	ld_global_b128	$q0, [0];
	ld_global_align(2)_b128	$q0, [&GlobalVar];
	ld_global_align(4)_b128	$q0, [&GlobalVar];
	ld_global_align(8)_b128	$q0, [&GlobalVar];
	ld_global_align(16)_b128	$q0, [&GlobalVar];
	ld_global_align(32)_b128	$q0, [&GlobalVar];
	ld_global_align(64)_b128	$q0, [&GlobalVar];
	ld_global_align(128)_b128	$q0, [&GlobalVar];
	ld_global_align(256)_b128	$q0, [&GlobalVar];
	ld_global_equiv(1)_b128	$q0, [&GlobalVar];
	ld_global_equiv(2)_b128	$q0, [&GlobalVar];
	ld_global_equiv(255)_b128	$q0, [&GlobalVar];
	ld_global_width(2)_b128	$q0, [&GlobalVar];
	ld_global_width(4)_b128	$q0, [&GlobalVar];
	ld_global_width(8)_b128	$q0, [&GlobalVar];
	ld_global_width(16)_b128	$q0, [&GlobalVar];
	ld_global_width(32)_b128	$q0, [&GlobalVar];
	ld_global_width(64)_b128	$q0, [&GlobalVar];
	ld_global_width(128)_b128	$q0, [&GlobalVar];
	ld_global_width(256)_b128	$q0, [&GlobalVar];
	ld_global_width(512)_b128	$q0, [&GlobalVar];
	ld_global_width(1024)_b128	$q0, [&GlobalVar];
	ld_global_width(2048)_b128	$q0, [&GlobalVar];
	ld_global_width(4096)_b128	$q0, [&GlobalVar];
	ld_global_width(8192)_b128	$q0, [&GlobalVar];
	ld_global_width(16384)_b128	$q0, [&GlobalVar];
	ld_global_width(32768)_b128	$q0, [&GlobalVar];
	ld_global_width(65536)_b128	$q0, [&GlobalVar];
	ld_global_width(131072)_b128	$q0, [&GlobalVar];
	ld_global_width(262144)_b128	$q0, [&GlobalVar];
	ld_global_width(524288)_b128	$q0, [&GlobalVar];
	ld_global_width(1048576)_b128	$q0, [&GlobalVar];
	ld_global_width(2097152)_b128	$q0, [&GlobalVar];
	ld_global_width(4194304)_b128	$q0, [&GlobalVar];
	ld_global_width(8388608)_b128	$q0, [&GlobalVar];
	ld_global_width(16777216)_b128	$q0, [&GlobalVar];
	ld_global_width(33554432)_b128	$q0, [&GlobalVar];
	ld_global_width(67108864)_b128	$q0, [&GlobalVar];
	ld_global_width(134217728)_b128	$q0, [&GlobalVar];
	ld_global_width(268435456)_b128	$q0, [&GlobalVar];
	ld_global_width(536870912)_b128	$q0, [&GlobalVar];
	ld_global_width(1073741824)_b128	$q0, [&GlobalVar];
	ld_global_width(2147483648)_b128	$q0, [&GlobalVar];
	ld_global_width(WAVESIZE)_b128	$q0, [&GlobalVar];
	ld_global_width(all)_b128	$q0, [&GlobalVar];
	// 
	// Next sample
	// 
	ld_readonly_b128	$q0, [&ReadonlyVar];
	// 
	ld_readonly_const_b128	$q0, [&ReadonlyVar];
	ld_v2_readonly_b128	($q0, $q1), [&ReadonlyVar];
	ld_v3_readonly_b128	($q0, $q1, $q2), [&ReadonlyVar];
	ld_v4_readonly_b128	($q0, $q1, $q2, $q3), [&ReadonlyVar];
	ld_readonly_b128	$q0, [$d0+2];
	ld_readonly_b128	$q0, [$d0+3];
	ld_readonly_b128	$q0, [$d0+5];
	ld_readonly_b128	$q0, [$d0+6];
	ld_readonly_b128	$q0, [0];
	ld_readonly_align(2)_b128	$q0, [&ReadonlyVar];
	ld_readonly_align(4)_b128	$q0, [&ReadonlyVar];
	ld_readonly_align(8)_b128	$q0, [&ReadonlyVar];
	ld_readonly_align(16)_b128	$q0, [&ReadonlyVar];
	ld_readonly_align(32)_b128	$q0, [&ReadonlyVar];
	ld_readonly_align(64)_b128	$q0, [&ReadonlyVar];
	ld_readonly_align(128)_b128	$q0, [&ReadonlyVar];
	ld_readonly_align(256)_b128	$q0, [&ReadonlyVar];
	ld_readonly_equiv(1)_b128	$q0, [&ReadonlyVar];
	ld_readonly_equiv(2)_b128	$q0, [&ReadonlyVar];
	ld_readonly_equiv(255)_b128	$q0, [&ReadonlyVar];
	ld_readonly_width(2)_b128	$q0, [&ReadonlyVar];
	ld_readonly_width(4)_b128	$q0, [&ReadonlyVar];
	ld_readonly_width(8)_b128	$q0, [&ReadonlyVar];
	ld_readonly_width(16)_b128	$q0, [&ReadonlyVar];
	ld_readonly_width(32)_b128	$q0, [&ReadonlyVar];
	ld_readonly_width(64)_b128	$q0, [&ReadonlyVar];
	ld_readonly_width(128)_b128	$q0, [&ReadonlyVar];
	ld_readonly_width(256)_b128	$q0, [&ReadonlyVar];
	ld_readonly_width(512)_b128	$q0, [&ReadonlyVar];
	ld_readonly_width(1024)_b128	$q0, [&ReadonlyVar];
	ld_readonly_width(2048)_b128	$q0, [&ReadonlyVar];
	ld_readonly_width(4096)_b128	$q0, [&ReadonlyVar];
	ld_readonly_width(8192)_b128	$q0, [&ReadonlyVar];
	ld_readonly_width(16384)_b128	$q0, [&ReadonlyVar];
	ld_readonly_width(32768)_b128	$q0, [&ReadonlyVar];
	ld_readonly_width(65536)_b128	$q0, [&ReadonlyVar];
	ld_readonly_width(131072)_b128	$q0, [&ReadonlyVar];
	ld_readonly_width(262144)_b128	$q0, [&ReadonlyVar];
	ld_readonly_width(524288)_b128	$q0, [&ReadonlyVar];
	ld_readonly_width(1048576)_b128	$q0, [&ReadonlyVar];
	ld_readonly_width(2097152)_b128	$q0, [&ReadonlyVar];
	ld_readonly_width(4194304)_b128	$q0, [&ReadonlyVar];
	ld_readonly_width(8388608)_b128	$q0, [&ReadonlyVar];
	ld_readonly_width(16777216)_b128	$q0, [&ReadonlyVar];
	ld_readonly_width(33554432)_b128	$q0, [&ReadonlyVar];
	ld_readonly_width(67108864)_b128	$q0, [&ReadonlyVar];
	ld_readonly_width(134217728)_b128	$q0, [&ReadonlyVar];
	ld_readonly_width(268435456)_b128	$q0, [&ReadonlyVar];
	ld_readonly_width(536870912)_b128	$q0, [&ReadonlyVar];
	ld_readonly_width(1073741824)_b128	$q0, [&ReadonlyVar];
	ld_readonly_width(2147483648)_b128	$q0, [&ReadonlyVar];
	ld_readonly_width(WAVESIZE)_b128	$q0, [&ReadonlyVar];
	ld_readonly_width(all)_b128	$q0, [&ReadonlyVar];
	// 
	// Next sample
	// 
	ld_kernarg_b128	$q0, [$d0+2];
	// 
	ld_v2_kernarg_b128	($q0, $q1), [$d0+2];
	ld_v3_kernarg_b128	($q0, $q1, $q2), [$d0+2];
	ld_v4_kernarg_b128	($q0, $q1, $q2, $q3), [$d0+2];
	ld_kernarg_b128	$q0, [$d0+3];
	ld_kernarg_b128	$q0, [$d0+5];
	ld_kernarg_b128	$q0, [$d0+6];
	ld_kernarg_b128	$q0, [0];
	ld_kernarg_align(2)_b128	$q0, [$d0+2];
	ld_kernarg_align(4)_b128	$q0, [$d0+2];
	ld_kernarg_align(8)_b128	$q0, [$d0+2];
	ld_kernarg_align(16)_b128	$q0, [$d0+2];
	ld_kernarg_align(32)_b128	$q0, [$d0+2];
	ld_kernarg_align(64)_b128	$q0, [$d0+2];
	ld_kernarg_align(128)_b128	$q0, [$d0+2];
	ld_kernarg_align(256)_b128	$q0, [$d0+2];
	ld_kernarg_equiv(1)_b128	$q0, [$d0+2];
	ld_kernarg_equiv(2)_b128	$q0, [$d0+2];
	ld_kernarg_equiv(255)_b128	$q0, [$d0+2];
	ld_kernarg_width(2)_b128	$q0, [$d0+2];
	ld_kernarg_width(4)_b128	$q0, [$d0+2];
	ld_kernarg_width(8)_b128	$q0, [$d0+2];
	ld_kernarg_width(16)_b128	$q0, [$d0+2];
	ld_kernarg_width(32)_b128	$q0, [$d0+2];
	ld_kernarg_width(64)_b128	$q0, [$d0+2];
	ld_kernarg_width(128)_b128	$q0, [$d0+2];
	ld_kernarg_width(256)_b128	$q0, [$d0+2];
	ld_kernarg_width(512)_b128	$q0, [$d0+2];
	ld_kernarg_width(1024)_b128	$q0, [$d0+2];
	ld_kernarg_width(2048)_b128	$q0, [$d0+2];
	ld_kernarg_width(4096)_b128	$q0, [$d0+2];
	ld_kernarg_width(8192)_b128	$q0, [$d0+2];
	ld_kernarg_width(16384)_b128	$q0, [$d0+2];
	ld_kernarg_width(32768)_b128	$q0, [$d0+2];
	ld_kernarg_width(65536)_b128	$q0, [$d0+2];
	ld_kernarg_width(131072)_b128	$q0, [$d0+2];
	ld_kernarg_width(262144)_b128	$q0, [$d0+2];
	ld_kernarg_width(524288)_b128	$q0, [$d0+2];
	ld_kernarg_width(1048576)_b128	$q0, [$d0+2];
	ld_kernarg_width(2097152)_b128	$q0, [$d0+2];
	ld_kernarg_width(4194304)_b128	$q0, [$d0+2];
	ld_kernarg_width(8388608)_b128	$q0, [$d0+2];
	ld_kernarg_width(16777216)_b128	$q0, [$d0+2];
	ld_kernarg_width(33554432)_b128	$q0, [$d0+2];
	ld_kernarg_width(67108864)_b128	$q0, [$d0+2];
	ld_kernarg_width(134217728)_b128	$q0, [$d0+2];
	ld_kernarg_width(268435456)_b128	$q0, [$d0+2];
	ld_kernarg_width(536870912)_b128	$q0, [$d0+2];
	ld_kernarg_width(1073741824)_b128	$q0, [$d0+2];
	ld_kernarg_width(2147483648)_b128	$q0, [$d0+2];
	ld_kernarg_width(WAVESIZE)_b128	$q0, [$d0+2];
	ld_kernarg_width(all)_b128	$q0, [$d0+2];
	// 
	// Next sample
	// 
	ld_group_b128	$q0, [&GroupVar];
	// 
	ld_v2_group_b128	($q0, $q1), [&GroupVar];
	ld_v3_group_b128	($q0, $q1, $q2), [&GroupVar];
	ld_v4_group_b128	($q0, $q1, $q2, $q3), [&GroupVar];
	ld_group_b128	$q0, [$s0+2];
	ld_group_b128	$q0, [$s0+3];
	ld_group_b128	$q0, [$s0+5];
	ld_group_b128	$q0, [$s0+6];
	ld_group_b128	$q0, [0];
	ld_group_align(2)_b128	$q0, [&GroupVar];
	ld_group_align(4)_b128	$q0, [&GroupVar];
	ld_group_align(8)_b128	$q0, [&GroupVar];
	ld_group_align(16)_b128	$q0, [&GroupVar];
	ld_group_align(32)_b128	$q0, [&GroupVar];
	ld_group_align(64)_b128	$q0, [&GroupVar];
	ld_group_align(128)_b128	$q0, [&GroupVar];
	ld_group_align(256)_b128	$q0, [&GroupVar];
	ld_group_equiv(1)_b128	$q0, [&GroupVar];
	ld_group_equiv(2)_b128	$q0, [&GroupVar];
	ld_group_equiv(255)_b128	$q0, [&GroupVar];
	ld_group_width(2)_b128	$q0, [&GroupVar];
	ld_group_width(4)_b128	$q0, [&GroupVar];
	ld_group_width(8)_b128	$q0, [&GroupVar];
	ld_group_width(16)_b128	$q0, [&GroupVar];
	ld_group_width(32)_b128	$q0, [&GroupVar];
	ld_group_width(64)_b128	$q0, [&GroupVar];
	ld_group_width(128)_b128	$q0, [&GroupVar];
	ld_group_width(256)_b128	$q0, [&GroupVar];
	ld_group_width(512)_b128	$q0, [&GroupVar];
	ld_group_width(1024)_b128	$q0, [&GroupVar];
	ld_group_width(2048)_b128	$q0, [&GroupVar];
	ld_group_width(4096)_b128	$q0, [&GroupVar];
	ld_group_width(8192)_b128	$q0, [&GroupVar];
	ld_group_width(16384)_b128	$q0, [&GroupVar];
	ld_group_width(32768)_b128	$q0, [&GroupVar];
	ld_group_width(65536)_b128	$q0, [&GroupVar];
	ld_group_width(131072)_b128	$q0, [&GroupVar];
	ld_group_width(262144)_b128	$q0, [&GroupVar];
	ld_group_width(524288)_b128	$q0, [&GroupVar];
	ld_group_width(1048576)_b128	$q0, [&GroupVar];
	ld_group_width(2097152)_b128	$q0, [&GroupVar];
	ld_group_width(4194304)_b128	$q0, [&GroupVar];
	ld_group_width(8388608)_b128	$q0, [&GroupVar];
	ld_group_width(16777216)_b128	$q0, [&GroupVar];
	ld_group_width(33554432)_b128	$q0, [&GroupVar];
	ld_group_width(67108864)_b128	$q0, [&GroupVar];
	ld_group_width(134217728)_b128	$q0, [&GroupVar];
	ld_group_width(268435456)_b128	$q0, [&GroupVar];
	ld_group_width(536870912)_b128	$q0, [&GroupVar];
	ld_group_width(1073741824)_b128	$q0, [&GroupVar];
	ld_group_width(2147483648)_b128	$q0, [&GroupVar];
	ld_group_width(WAVESIZE)_b128	$q0, [&GroupVar];
	ld_group_width(all)_b128	$q0, [&GroupVar];
	// 
	// Next sample
	// 
	ld_private_b128	$q0, [&PrivateVar];
	// 
	ld_v2_private_b128	($q0, $q1), [&PrivateVar];
	ld_v3_private_b128	($q0, $q1, $q2), [&PrivateVar];
	ld_v4_private_b128	($q0, $q1, $q2, $q3), [&PrivateVar];
	ld_private_b128	$q0, [$s0+2];
	ld_private_b128	$q0, [$s0+3];
	ld_private_b128	$q0, [$s0+5];
	ld_private_b128	$q0, [$s0+6];
	ld_private_b128	$q0, [0];
	ld_private_align(2)_b128	$q0, [&PrivateVar];
	ld_private_align(4)_b128	$q0, [&PrivateVar];
	ld_private_align(8)_b128	$q0, [&PrivateVar];
	ld_private_align(16)_b128	$q0, [&PrivateVar];
	ld_private_align(32)_b128	$q0, [&PrivateVar];
	ld_private_align(64)_b128	$q0, [&PrivateVar];
	ld_private_align(128)_b128	$q0, [&PrivateVar];
	ld_private_align(256)_b128	$q0, [&PrivateVar];
	ld_private_equiv(1)_b128	$q0, [&PrivateVar];
	ld_private_equiv(2)_b128	$q0, [&PrivateVar];
	ld_private_equiv(255)_b128	$q0, [&PrivateVar];
	ld_private_width(2)_b128	$q0, [&PrivateVar];
	ld_private_width(4)_b128	$q0, [&PrivateVar];
	ld_private_width(8)_b128	$q0, [&PrivateVar];
	ld_private_width(16)_b128	$q0, [&PrivateVar];
	ld_private_width(32)_b128	$q0, [&PrivateVar];
	ld_private_width(64)_b128	$q0, [&PrivateVar];
	ld_private_width(128)_b128	$q0, [&PrivateVar];
	ld_private_width(256)_b128	$q0, [&PrivateVar];
	ld_private_width(512)_b128	$q0, [&PrivateVar];
	ld_private_width(1024)_b128	$q0, [&PrivateVar];
	ld_private_width(2048)_b128	$q0, [&PrivateVar];
	ld_private_width(4096)_b128	$q0, [&PrivateVar];
	ld_private_width(8192)_b128	$q0, [&PrivateVar];
	ld_private_width(16384)_b128	$q0, [&PrivateVar];
	ld_private_width(32768)_b128	$q0, [&PrivateVar];
	ld_private_width(65536)_b128	$q0, [&PrivateVar];
	ld_private_width(131072)_b128	$q0, [&PrivateVar];
	ld_private_width(262144)_b128	$q0, [&PrivateVar];
	ld_private_width(524288)_b128	$q0, [&PrivateVar];
	ld_private_width(1048576)_b128	$q0, [&PrivateVar];
	ld_private_width(2097152)_b128	$q0, [&PrivateVar];
	ld_private_width(4194304)_b128	$q0, [&PrivateVar];
	ld_private_width(8388608)_b128	$q0, [&PrivateVar];
	ld_private_width(16777216)_b128	$q0, [&PrivateVar];
	ld_private_width(33554432)_b128	$q0, [&PrivateVar];
	ld_private_width(67108864)_b128	$q0, [&PrivateVar];
	ld_private_width(134217728)_b128	$q0, [&PrivateVar];
	ld_private_width(268435456)_b128	$q0, [&PrivateVar];
	ld_private_width(536870912)_b128	$q0, [&PrivateVar];
	ld_private_width(1073741824)_b128	$q0, [&PrivateVar];
	ld_private_width(2147483648)_b128	$q0, [&PrivateVar];
	ld_private_width(WAVESIZE)_b128	$q0, [&PrivateVar];
	ld_private_width(all)_b128	$q0, [&PrivateVar];
	// 
	// Next sample
	// 
	ld_spill_b128	$q0, [%SpillVar];
	// 
	ld_v2_spill_b128	($q0, $q1), [%SpillVar];
	ld_v3_spill_b128	($q0, $q1, $q2), [%SpillVar];
	ld_v4_spill_b128	($q0, $q1, $q2, $q3), [%SpillVar];
	ld_spill_align(2)_b128	$q0, [%SpillVar];
	ld_spill_align(4)_b128	$q0, [%SpillVar];
	ld_spill_align(8)_b128	$q0, [%SpillVar];
	ld_spill_align(16)_b128	$q0, [%SpillVar];
	ld_spill_align(32)_b128	$q0, [%SpillVar];
	ld_spill_align(64)_b128	$q0, [%SpillVar];
	ld_spill_align(128)_b128	$q0, [%SpillVar];
	ld_spill_align(256)_b128	$q0, [%SpillVar];
	ld_spill_equiv(1)_b128	$q0, [%SpillVar];
	ld_spill_equiv(2)_b128	$q0, [%SpillVar];
	ld_spill_equiv(255)_b128	$q0, [%SpillVar];
	ld_spill_width(2)_b128	$q0, [%SpillVar];
	ld_spill_width(4)_b128	$q0, [%SpillVar];
	ld_spill_width(8)_b128	$q0, [%SpillVar];
	ld_spill_width(16)_b128	$q0, [%SpillVar];
	ld_spill_width(32)_b128	$q0, [%SpillVar];
	ld_spill_width(64)_b128	$q0, [%SpillVar];
	ld_spill_width(128)_b128	$q0, [%SpillVar];
	ld_spill_width(256)_b128	$q0, [%SpillVar];
	ld_spill_width(512)_b128	$q0, [%SpillVar];
	ld_spill_width(1024)_b128	$q0, [%SpillVar];
	ld_spill_width(2048)_b128	$q0, [%SpillVar];
	ld_spill_width(4096)_b128	$q0, [%SpillVar];
	ld_spill_width(8192)_b128	$q0, [%SpillVar];
	ld_spill_width(16384)_b128	$q0, [%SpillVar];
	ld_spill_width(32768)_b128	$q0, [%SpillVar];
	ld_spill_width(65536)_b128	$q0, [%SpillVar];
	ld_spill_width(131072)_b128	$q0, [%SpillVar];
	ld_spill_width(262144)_b128	$q0, [%SpillVar];
	ld_spill_width(524288)_b128	$q0, [%SpillVar];
	ld_spill_width(1048576)_b128	$q0, [%SpillVar];
	ld_spill_width(2097152)_b128	$q0, [%SpillVar];
	ld_spill_width(4194304)_b128	$q0, [%SpillVar];
	ld_spill_width(8388608)_b128	$q0, [%SpillVar];
	ld_spill_width(16777216)_b128	$q0, [%SpillVar];
	ld_spill_width(33554432)_b128	$q0, [%SpillVar];
	ld_spill_width(67108864)_b128	$q0, [%SpillVar];
	ld_spill_width(134217728)_b128	$q0, [%SpillVar];
	ld_spill_width(268435456)_b128	$q0, [%SpillVar];
	ld_spill_width(536870912)_b128	$q0, [%SpillVar];
	ld_spill_width(1073741824)_b128	$q0, [%SpillVar];
	ld_spill_width(2147483648)_b128	$q0, [%SpillVar];
	ld_spill_width(WAVESIZE)_b128	$q0, [%SpillVar];
	ld_spill_width(all)_b128	$q0, [%SpillVar];
	// 
	// Next sample
	// 
	ld_sig64	$d0, [$d0+2];
	// 
	ld_const_sig64	$d0, [$d0+2];
	ld_v2_sig64	($d0, $d1), [$d0+2];
	ld_v3_sig64	($d0, $d1, $d2), [$d0+2];
	ld_v4_sig64	($d0, $d1, $d2, $d3), [$d0+2];
	ld_sig64	$d0, [$d0+3];
	ld_sig64	$d0, [$d0+5];
	ld_sig64	$d0, [$d0+6];
	ld_sig64	$d0, [0];
	ld_align(2)_sig64	$d0, [$d0+2];
	ld_align(4)_sig64	$d0, [$d0+2];
	ld_align(8)_sig64	$d0, [$d0+2];
	ld_align(16)_sig64	$d0, [$d0+2];
	ld_align(32)_sig64	$d0, [$d0+2];
	ld_align(64)_sig64	$d0, [$d0+2];
	ld_align(128)_sig64	$d0, [$d0+2];
	ld_align(256)_sig64	$d0, [$d0+2];
	ld_equiv(1)_sig64	$d0, [$d0+2];
	ld_equiv(2)_sig64	$d0, [$d0+2];
	ld_equiv(255)_sig64	$d0, [$d0+2];
	ld_width(2)_sig64	$d0, [$d0+2];
	ld_width(4)_sig64	$d0, [$d0+2];
	ld_width(8)_sig64	$d0, [$d0+2];
	ld_width(16)_sig64	$d0, [$d0+2];
	ld_width(32)_sig64	$d0, [$d0+2];
	ld_width(64)_sig64	$d0, [$d0+2];
	ld_width(128)_sig64	$d0, [$d0+2];
	ld_width(256)_sig64	$d0, [$d0+2];
	ld_width(512)_sig64	$d0, [$d0+2];
	ld_width(1024)_sig64	$d0, [$d0+2];
	ld_width(2048)_sig64	$d0, [$d0+2];
	ld_width(4096)_sig64	$d0, [$d0+2];
	ld_width(8192)_sig64	$d0, [$d0+2];
	ld_width(16384)_sig64	$d0, [$d0+2];
	ld_width(32768)_sig64	$d0, [$d0+2];
	ld_width(65536)_sig64	$d0, [$d0+2];
	ld_width(131072)_sig64	$d0, [$d0+2];
	ld_width(262144)_sig64	$d0, [$d0+2];
	ld_width(524288)_sig64	$d0, [$d0+2];
	ld_width(1048576)_sig64	$d0, [$d0+2];
	ld_width(2097152)_sig64	$d0, [$d0+2];
	ld_width(4194304)_sig64	$d0, [$d0+2];
	ld_width(8388608)_sig64	$d0, [$d0+2];
	ld_width(16777216)_sig64	$d0, [$d0+2];
	ld_width(33554432)_sig64	$d0, [$d0+2];
	ld_width(67108864)_sig64	$d0, [$d0+2];
	ld_width(134217728)_sig64	$d0, [$d0+2];
	ld_width(268435456)_sig64	$d0, [$d0+2];
	ld_width(536870912)_sig64	$d0, [$d0+2];
	ld_width(1073741824)_sig64	$d0, [$d0+2];
	ld_width(2147483648)_sig64	$d0, [$d0+2];
	ld_width(WAVESIZE)_sig64	$d0, [$d0+2];
	ld_width(all)_sig64	$d0, [$d0+2];
	// 
	// Next sample
	// 
	ld_global_sig64	$d0, [&GlobalSig64];
	// 
	ld_global_const_sig64	$d0, [&GlobalSig64];
	ld_v2_global_sig64	($d0, $d1), [&GlobalSig64];
	ld_v3_global_sig64	($d0, $d1, $d2), [&GlobalSig64];
	ld_v4_global_sig64	($d0, $d1, $d2, $d3), [&GlobalSig64];
	ld_global_sig64	$d0, [$d0+2];
	ld_global_sig64	$d0, [$d0+3];
	ld_global_sig64	$d0, [$d0+5];
	ld_global_sig64	$d0, [$d0+6];
	ld_global_sig64	$d0, [0];
	ld_global_align(2)_sig64	$d0, [&GlobalSig64];
	ld_global_align(4)_sig64	$d0, [&GlobalSig64];
	ld_global_align(8)_sig64	$d0, [&GlobalSig64];
	ld_global_align(16)_sig64	$d0, [&GlobalSig64];
	ld_global_align(32)_sig64	$d0, [&GlobalSig64];
	ld_global_align(64)_sig64	$d0, [&GlobalSig64];
	ld_global_align(128)_sig64	$d0, [&GlobalSig64];
	ld_global_align(256)_sig64	$d0, [&GlobalSig64];
	ld_global_equiv(1)_sig64	$d0, [&GlobalSig64];
	ld_global_equiv(2)_sig64	$d0, [&GlobalSig64];
	ld_global_equiv(255)_sig64	$d0, [&GlobalSig64];
	ld_global_width(2)_sig64	$d0, [&GlobalSig64];
	ld_global_width(4)_sig64	$d0, [&GlobalSig64];
	ld_global_width(8)_sig64	$d0, [&GlobalSig64];
	ld_global_width(16)_sig64	$d0, [&GlobalSig64];
	ld_global_width(32)_sig64	$d0, [&GlobalSig64];
	ld_global_width(64)_sig64	$d0, [&GlobalSig64];
	ld_global_width(128)_sig64	$d0, [&GlobalSig64];
	ld_global_width(256)_sig64	$d0, [&GlobalSig64];
	ld_global_width(512)_sig64	$d0, [&GlobalSig64];
	ld_global_width(1024)_sig64	$d0, [&GlobalSig64];
	ld_global_width(2048)_sig64	$d0, [&GlobalSig64];
	ld_global_width(4096)_sig64	$d0, [&GlobalSig64];
	ld_global_width(8192)_sig64	$d0, [&GlobalSig64];
	ld_global_width(16384)_sig64	$d0, [&GlobalSig64];
	ld_global_width(32768)_sig64	$d0, [&GlobalSig64];
	ld_global_width(65536)_sig64	$d0, [&GlobalSig64];
	ld_global_width(131072)_sig64	$d0, [&GlobalSig64];
	ld_global_width(262144)_sig64	$d0, [&GlobalSig64];
	ld_global_width(524288)_sig64	$d0, [&GlobalSig64];
	ld_global_width(1048576)_sig64	$d0, [&GlobalSig64];
	ld_global_width(2097152)_sig64	$d0, [&GlobalSig64];
	ld_global_width(4194304)_sig64	$d0, [&GlobalSig64];
	ld_global_width(8388608)_sig64	$d0, [&GlobalSig64];
	ld_global_width(16777216)_sig64	$d0, [&GlobalSig64];
	ld_global_width(33554432)_sig64	$d0, [&GlobalSig64];
	ld_global_width(67108864)_sig64	$d0, [&GlobalSig64];
	ld_global_width(134217728)_sig64	$d0, [&GlobalSig64];
	ld_global_width(268435456)_sig64	$d0, [&GlobalSig64];
	ld_global_width(536870912)_sig64	$d0, [&GlobalSig64];
	ld_global_width(1073741824)_sig64	$d0, [&GlobalSig64];
	ld_global_width(2147483648)_sig64	$d0, [&GlobalSig64];
	ld_global_width(WAVESIZE)_sig64	$d0, [&GlobalSig64];
	ld_global_width(all)_sig64	$d0, [&GlobalSig64];
	// 
	// Next sample
	// 
	ld_readonly_sig64	$d0, [&ReadonlySig64];
	// 
	ld_readonly_const_sig64	$d0, [&ReadonlySig64];
	ld_v2_readonly_sig64	($d0, $d1), [&ReadonlySig64];
	ld_v3_readonly_sig64	($d0, $d1, $d2), [&ReadonlySig64];
	ld_v4_readonly_sig64	($d0, $d1, $d2, $d3), [&ReadonlySig64];
	ld_readonly_sig64	$d0, [$d0+2];
	ld_readonly_sig64	$d0, [$d0+3];
	ld_readonly_sig64	$d0, [$d0+5];
	ld_readonly_sig64	$d0, [$d0+6];
	ld_readonly_sig64	$d0, [0];
	ld_readonly_align(2)_sig64	$d0, [&ReadonlySig64];
	ld_readonly_align(4)_sig64	$d0, [&ReadonlySig64];
	ld_readonly_align(8)_sig64	$d0, [&ReadonlySig64];
	ld_readonly_align(16)_sig64	$d0, [&ReadonlySig64];
	ld_readonly_align(32)_sig64	$d0, [&ReadonlySig64];
	ld_readonly_align(64)_sig64	$d0, [&ReadonlySig64];
	ld_readonly_align(128)_sig64	$d0, [&ReadonlySig64];
	ld_readonly_align(256)_sig64	$d0, [&ReadonlySig64];
	ld_readonly_equiv(1)_sig64	$d0, [&ReadonlySig64];
	ld_readonly_equiv(2)_sig64	$d0, [&ReadonlySig64];
	ld_readonly_equiv(255)_sig64	$d0, [&ReadonlySig64];
	ld_readonly_width(2)_sig64	$d0, [&ReadonlySig64];
	ld_readonly_width(4)_sig64	$d0, [&ReadonlySig64];
	ld_readonly_width(8)_sig64	$d0, [&ReadonlySig64];
	ld_readonly_width(16)_sig64	$d0, [&ReadonlySig64];
	ld_readonly_width(32)_sig64	$d0, [&ReadonlySig64];
	ld_readonly_width(64)_sig64	$d0, [&ReadonlySig64];
	ld_readonly_width(128)_sig64	$d0, [&ReadonlySig64];
	ld_readonly_width(256)_sig64	$d0, [&ReadonlySig64];
	ld_readonly_width(512)_sig64	$d0, [&ReadonlySig64];
	ld_readonly_width(1024)_sig64	$d0, [&ReadonlySig64];
	ld_readonly_width(2048)_sig64	$d0, [&ReadonlySig64];
	ld_readonly_width(4096)_sig64	$d0, [&ReadonlySig64];
	ld_readonly_width(8192)_sig64	$d0, [&ReadonlySig64];
	ld_readonly_width(16384)_sig64	$d0, [&ReadonlySig64];
	ld_readonly_width(32768)_sig64	$d0, [&ReadonlySig64];
	ld_readonly_width(65536)_sig64	$d0, [&ReadonlySig64];
	ld_readonly_width(131072)_sig64	$d0, [&ReadonlySig64];
	ld_readonly_width(262144)_sig64	$d0, [&ReadonlySig64];
	ld_readonly_width(524288)_sig64	$d0, [&ReadonlySig64];
	ld_readonly_width(1048576)_sig64	$d0, [&ReadonlySig64];
	ld_readonly_width(2097152)_sig64	$d0, [&ReadonlySig64];
	ld_readonly_width(4194304)_sig64	$d0, [&ReadonlySig64];
	ld_readonly_width(8388608)_sig64	$d0, [&ReadonlySig64];
	ld_readonly_width(16777216)_sig64	$d0, [&ReadonlySig64];
	ld_readonly_width(33554432)_sig64	$d0, [&ReadonlySig64];
	ld_readonly_width(67108864)_sig64	$d0, [&ReadonlySig64];
	ld_readonly_width(134217728)_sig64	$d0, [&ReadonlySig64];
	ld_readonly_width(268435456)_sig64	$d0, [&ReadonlySig64];
	ld_readonly_width(536870912)_sig64	$d0, [&ReadonlySig64];
	ld_readonly_width(1073741824)_sig64	$d0, [&ReadonlySig64];
	ld_readonly_width(2147483648)_sig64	$d0, [&ReadonlySig64];
	ld_readonly_width(WAVESIZE)_sig64	$d0, [&ReadonlySig64];
	ld_readonly_width(all)_sig64	$d0, [&ReadonlySig64];
	// 
	// Next sample
	// 
	ld_kernarg_sig64	$d0, [$d0+2];
	// 
	ld_v2_kernarg_sig64	($d0, $d1), [$d0+2];
	ld_v3_kernarg_sig64	($d0, $d1, $d2), [$d0+2];
	ld_v4_kernarg_sig64	($d0, $d1, $d2, $d3), [$d0+2];
	ld_kernarg_sig64	$d0, [$d0+3];
	ld_kernarg_sig64	$d0, [$d0+5];
	ld_kernarg_sig64	$d0, [$d0+6];
	ld_kernarg_sig64	$d0, [0];
	ld_kernarg_align(2)_sig64	$d0, [$d0+2];
	ld_kernarg_align(4)_sig64	$d0, [$d0+2];
	ld_kernarg_align(8)_sig64	$d0, [$d0+2];
	ld_kernarg_align(16)_sig64	$d0, [$d0+2];
	ld_kernarg_align(32)_sig64	$d0, [$d0+2];
	ld_kernarg_align(64)_sig64	$d0, [$d0+2];
	ld_kernarg_align(128)_sig64	$d0, [$d0+2];
	ld_kernarg_align(256)_sig64	$d0, [$d0+2];
	ld_kernarg_equiv(1)_sig64	$d0, [$d0+2];
	ld_kernarg_equiv(2)_sig64	$d0, [$d0+2];
	ld_kernarg_equiv(255)_sig64	$d0, [$d0+2];
	ld_kernarg_width(2)_sig64	$d0, [$d0+2];
	ld_kernarg_width(4)_sig64	$d0, [$d0+2];
	ld_kernarg_width(8)_sig64	$d0, [$d0+2];
	ld_kernarg_width(16)_sig64	$d0, [$d0+2];
	ld_kernarg_width(32)_sig64	$d0, [$d0+2];
	ld_kernarg_width(64)_sig64	$d0, [$d0+2];
	ld_kernarg_width(128)_sig64	$d0, [$d0+2];
	ld_kernarg_width(256)_sig64	$d0, [$d0+2];
	ld_kernarg_width(512)_sig64	$d0, [$d0+2];
	ld_kernarg_width(1024)_sig64	$d0, [$d0+2];
	ld_kernarg_width(2048)_sig64	$d0, [$d0+2];
	ld_kernarg_width(4096)_sig64	$d0, [$d0+2];
	ld_kernarg_width(8192)_sig64	$d0, [$d0+2];
	ld_kernarg_width(16384)_sig64	$d0, [$d0+2];
	ld_kernarg_width(32768)_sig64	$d0, [$d0+2];
	ld_kernarg_width(65536)_sig64	$d0, [$d0+2];
	ld_kernarg_width(131072)_sig64	$d0, [$d0+2];
	ld_kernarg_width(262144)_sig64	$d0, [$d0+2];
	ld_kernarg_width(524288)_sig64	$d0, [$d0+2];
	ld_kernarg_width(1048576)_sig64	$d0, [$d0+2];
	ld_kernarg_width(2097152)_sig64	$d0, [$d0+2];
	ld_kernarg_width(4194304)_sig64	$d0, [$d0+2];
	ld_kernarg_width(8388608)_sig64	$d0, [$d0+2];
	ld_kernarg_width(16777216)_sig64	$d0, [$d0+2];
	ld_kernarg_width(33554432)_sig64	$d0, [$d0+2];
	ld_kernarg_width(67108864)_sig64	$d0, [$d0+2];
	ld_kernarg_width(134217728)_sig64	$d0, [$d0+2];
	ld_kernarg_width(268435456)_sig64	$d0, [$d0+2];
	ld_kernarg_width(536870912)_sig64	$d0, [$d0+2];
	ld_kernarg_width(1073741824)_sig64	$d0, [$d0+2];
	ld_kernarg_width(2147483648)_sig64	$d0, [$d0+2];
	ld_kernarg_width(WAVESIZE)_sig64	$d0, [$d0+2];
	ld_kernarg_width(all)_sig64	$d0, [$d0+2];
	// 
	// Next sample
	// 
	ld_group_sig64	$d0, [$s0+2];
	// 
	ld_v2_group_sig64	($d0, $d1), [$s0+2];
	ld_v3_group_sig64	($d0, $d1, $d2), [$s0+2];
	ld_v4_group_sig64	($d0, $d1, $d2, $d3), [$s0+2];
	ld_group_sig64	$d0, [$s0+3];
	ld_group_sig64	$d0, [$s0+5];
	ld_group_sig64	$d0, [$s0+6];
	ld_group_sig64	$d0, [0];
	ld_group_align(2)_sig64	$d0, [$s0+2];
	ld_group_align(4)_sig64	$d0, [$s0+2];
	ld_group_align(8)_sig64	$d0, [$s0+2];
	ld_group_align(16)_sig64	$d0, [$s0+2];
	ld_group_align(32)_sig64	$d0, [$s0+2];
	ld_group_align(64)_sig64	$d0, [$s0+2];
	ld_group_align(128)_sig64	$d0, [$s0+2];
	ld_group_align(256)_sig64	$d0, [$s0+2];
	ld_group_equiv(1)_sig64	$d0, [$s0+2];
	ld_group_equiv(2)_sig64	$d0, [$s0+2];
	ld_group_equiv(255)_sig64	$d0, [$s0+2];
	ld_group_width(2)_sig64	$d0, [$s0+2];
	ld_group_width(4)_sig64	$d0, [$s0+2];
	ld_group_width(8)_sig64	$d0, [$s0+2];
	ld_group_width(16)_sig64	$d0, [$s0+2];
	ld_group_width(32)_sig64	$d0, [$s0+2];
	ld_group_width(64)_sig64	$d0, [$s0+2];
	ld_group_width(128)_sig64	$d0, [$s0+2];
	ld_group_width(256)_sig64	$d0, [$s0+2];
	ld_group_width(512)_sig64	$d0, [$s0+2];
	ld_group_width(1024)_sig64	$d0, [$s0+2];
	ld_group_width(2048)_sig64	$d0, [$s0+2];
	ld_group_width(4096)_sig64	$d0, [$s0+2];
	ld_group_width(8192)_sig64	$d0, [$s0+2];
	ld_group_width(16384)_sig64	$d0, [$s0+2];
	ld_group_width(32768)_sig64	$d0, [$s0+2];
	ld_group_width(65536)_sig64	$d0, [$s0+2];
	ld_group_width(131072)_sig64	$d0, [$s0+2];
	ld_group_width(262144)_sig64	$d0, [$s0+2];
	ld_group_width(524288)_sig64	$d0, [$s0+2];
	ld_group_width(1048576)_sig64	$d0, [$s0+2];
	ld_group_width(2097152)_sig64	$d0, [$s0+2];
	ld_group_width(4194304)_sig64	$d0, [$s0+2];
	ld_group_width(8388608)_sig64	$d0, [$s0+2];
	ld_group_width(16777216)_sig64	$d0, [$s0+2];
	ld_group_width(33554432)_sig64	$d0, [$s0+2];
	ld_group_width(67108864)_sig64	$d0, [$s0+2];
	ld_group_width(134217728)_sig64	$d0, [$s0+2];
	ld_group_width(268435456)_sig64	$d0, [$s0+2];
	ld_group_width(536870912)_sig64	$d0, [$s0+2];
	ld_group_width(1073741824)_sig64	$d0, [$s0+2];
	ld_group_width(2147483648)_sig64	$d0, [$s0+2];
	ld_group_width(WAVESIZE)_sig64	$d0, [$s0+2];
	ld_group_width(all)_sig64	$d0, [$s0+2];
	// 
	// Next sample
	// 
	ld_private_sig64	$d0, [$s0+2];
	// 
	ld_v2_private_sig64	($d0, $d1), [$s0+2];
	ld_v3_private_sig64	($d0, $d1, $d2), [$s0+2];
	ld_v4_private_sig64	($d0, $d1, $d2, $d3), [$s0+2];
	ld_private_sig64	$d0, [$s0+3];
	ld_private_sig64	$d0, [$s0+5];
	ld_private_sig64	$d0, [$s0+6];
	ld_private_sig64	$d0, [0];
	ld_private_align(2)_sig64	$d0, [$s0+2];
	ld_private_align(4)_sig64	$d0, [$s0+2];
	ld_private_align(8)_sig64	$d0, [$s0+2];
	ld_private_align(16)_sig64	$d0, [$s0+2];
	ld_private_align(32)_sig64	$d0, [$s0+2];
	ld_private_align(64)_sig64	$d0, [$s0+2];
	ld_private_align(128)_sig64	$d0, [$s0+2];
	ld_private_align(256)_sig64	$d0, [$s0+2];
	ld_private_equiv(1)_sig64	$d0, [$s0+2];
	ld_private_equiv(2)_sig64	$d0, [$s0+2];
	ld_private_equiv(255)_sig64	$d0, [$s0+2];
	ld_private_width(2)_sig64	$d0, [$s0+2];
	ld_private_width(4)_sig64	$d0, [$s0+2];
	ld_private_width(8)_sig64	$d0, [$s0+2];
	ld_private_width(16)_sig64	$d0, [$s0+2];
	ld_private_width(32)_sig64	$d0, [$s0+2];
	ld_private_width(64)_sig64	$d0, [$s0+2];
	ld_private_width(128)_sig64	$d0, [$s0+2];
	ld_private_width(256)_sig64	$d0, [$s0+2];
	ld_private_width(512)_sig64	$d0, [$s0+2];
	ld_private_width(1024)_sig64	$d0, [$s0+2];
	ld_private_width(2048)_sig64	$d0, [$s0+2];
	ld_private_width(4096)_sig64	$d0, [$s0+2];
	ld_private_width(8192)_sig64	$d0, [$s0+2];
	ld_private_width(16384)_sig64	$d0, [$s0+2];
	ld_private_width(32768)_sig64	$d0, [$s0+2];
	ld_private_width(65536)_sig64	$d0, [$s0+2];
	ld_private_width(131072)_sig64	$d0, [$s0+2];
	ld_private_width(262144)_sig64	$d0, [$s0+2];
	ld_private_width(524288)_sig64	$d0, [$s0+2];
	ld_private_width(1048576)_sig64	$d0, [$s0+2];
	ld_private_width(2097152)_sig64	$d0, [$s0+2];
	ld_private_width(4194304)_sig64	$d0, [$s0+2];
	ld_private_width(8388608)_sig64	$d0, [$s0+2];
	ld_private_width(16777216)_sig64	$d0, [$s0+2];
	ld_private_width(33554432)_sig64	$d0, [$s0+2];
	ld_private_width(67108864)_sig64	$d0, [$s0+2];
	ld_private_width(134217728)_sig64	$d0, [$s0+2];
	ld_private_width(268435456)_sig64	$d0, [$s0+2];
	ld_private_width(536870912)_sig64	$d0, [$s0+2];
	ld_private_width(1073741824)_sig64	$d0, [$s0+2];
	ld_private_width(2147483648)_sig64	$d0, [$s0+2];
	ld_private_width(WAVESIZE)_sig64	$d0, [$s0+2];
	ld_private_width(all)_sig64	$d0, [$s0+2];
	// 
	// Next sample
	// 
	st_u8	$s0, [$d0+2];
	// 
	st_v2_u8	($s0, $s0), [$d0+2];
	st_v3_u8	($s0, $s0, $s0), [$d0+2];
	st_v4_u8	($s0, $s0, $s0, $s0), [$d0+2];
	st_v2_u8	(WAVESIZE, 255), [$d0+2];
	st_v3_u8	(WAVESIZE, 255, 255), [$d0+2];
	st_v4_u8	(WAVESIZE, 255, 255, 255), [$d0+2];
	st_v2_u8	(0, $s0), [$d0+2];
	st_v3_u8	(0, 255, $s0), [$d0+2];
	st_v4_u8	(0, 255, $s0, $s0), [$d0+2];
	st_v2_u8	($s0, $s1), [$d0+2];
	st_v3_u8	($s0, $s1, $s2), [$d0+2];
	st_v4_u8	($s0, $s1, $s2, $s3), [$d0+2];
	st_u8	1, [$d0+2];
	st_u8	WAVESIZE, [$d0+2];
	st_u8	$s0, [$d0+3];
	st_u8	$s0, [$d0+5];
	st_u8	$s0, [$d0+6];
	st_u8	$s0, [0];
	st_align(2)_u8	$s0, [$d0+2];
	st_align(4)_u8	$s0, [$d0+2];
	st_align(8)_u8	$s0, [$d0+2];
	st_align(16)_u8	$s0, [$d0+2];
	st_align(32)_u8	$s0, [$d0+2];
	st_align(64)_u8	$s0, [$d0+2];
	st_align(128)_u8	$s0, [$d0+2];
	st_align(256)_u8	$s0, [$d0+2];
	st_equiv(1)_u8	$s0, [$d0+2];
	st_equiv(2)_u8	$s0, [$d0+2];
	st_equiv(255)_u8	$s0, [$d0+2];
	// 
	// Next sample
	// 
	st_global_u8	$s0, [&GlobalVar];
	// 
	st_v2_global_u8	($s0, $s0), [&GlobalVar];
	st_v3_global_u8	($s0, $s0, $s0), [&GlobalVar];
	st_v4_global_u8	($s0, $s0, $s0, $s0), [&GlobalVar];
	st_v2_global_u8	(WAVESIZE, 255), [&GlobalVar];
	st_v3_global_u8	(WAVESIZE, 255, 255), [&GlobalVar];
	st_v4_global_u8	(WAVESIZE, 255, 255, 255), [&GlobalVar];
	st_v2_global_u8	(0, $s0), [&GlobalVar];
	st_v3_global_u8	(0, 255, $s0), [&GlobalVar];
	st_v4_global_u8	(0, 255, $s0, $s0), [&GlobalVar];
	st_v2_global_u8	($s0, $s1), [&GlobalVar];
	st_v3_global_u8	($s0, $s1, $s2), [&GlobalVar];
	st_v4_global_u8	($s0, $s1, $s2, $s3), [&GlobalVar];
	st_global_u8	1, [&GlobalVar];
	st_global_u8	WAVESIZE, [&GlobalVar];
	st_global_u8	$s0, [$d0+2];
	st_global_u8	$s0, [$d0+3];
	st_global_u8	$s0, [$d0+5];
	st_global_u8	$s0, [$d0+6];
	st_global_u8	$s0, [0];
	st_global_align(2)_u8	$s0, [&GlobalVar];
	st_global_align(4)_u8	$s0, [&GlobalVar];
	st_global_align(8)_u8	$s0, [&GlobalVar];
	st_global_align(16)_u8	$s0, [&GlobalVar];
	st_global_align(32)_u8	$s0, [&GlobalVar];
	st_global_align(64)_u8	$s0, [&GlobalVar];
	st_global_align(128)_u8	$s0, [&GlobalVar];
	st_global_align(256)_u8	$s0, [&GlobalVar];
	st_global_equiv(1)_u8	$s0, [&GlobalVar];
	st_global_equiv(2)_u8	$s0, [&GlobalVar];
	st_global_equiv(255)_u8	$s0, [&GlobalVar];
	// 
	// Next sample
	// 
	st_group_u8	$s0, [&GroupVar];
	// 
	st_v2_group_u8	($s0, $s0), [&GroupVar];
	st_v3_group_u8	($s0, $s0, $s0), [&GroupVar];
	st_v4_group_u8	($s0, $s0, $s0, $s0), [&GroupVar];
	st_v2_group_u8	(WAVESIZE, 255), [&GroupVar];
	st_v3_group_u8	(WAVESIZE, 255, 255), [&GroupVar];
	st_v4_group_u8	(WAVESIZE, 255, 255, 255), [&GroupVar];
	st_v2_group_u8	(0, $s0), [&GroupVar];
	st_v3_group_u8	(0, 255, $s0), [&GroupVar];
	st_v4_group_u8	(0, 255, $s0, $s0), [&GroupVar];
	st_v2_group_u8	($s0, $s1), [&GroupVar];
	st_v3_group_u8	($s0, $s1, $s2), [&GroupVar];
	st_v4_group_u8	($s0, $s1, $s2, $s3), [&GroupVar];
	st_group_u8	1, [&GroupVar];
	st_group_u8	WAVESIZE, [&GroupVar];
	st_group_u8	$s0, [$s0+2];
	st_group_u8	$s0, [$s0+3];
	st_group_u8	$s0, [$s0+5];
	st_group_u8	$s0, [$s0+6];
	st_group_u8	$s0, [0];
	st_group_align(2)_u8	$s0, [&GroupVar];
	st_group_align(4)_u8	$s0, [&GroupVar];
	st_group_align(8)_u8	$s0, [&GroupVar];
	st_group_align(16)_u8	$s0, [&GroupVar];
	st_group_align(32)_u8	$s0, [&GroupVar];
	st_group_align(64)_u8	$s0, [&GroupVar];
	st_group_align(128)_u8	$s0, [&GroupVar];
	st_group_align(256)_u8	$s0, [&GroupVar];
	st_group_equiv(1)_u8	$s0, [&GroupVar];
	st_group_equiv(2)_u8	$s0, [&GroupVar];
	st_group_equiv(255)_u8	$s0, [&GroupVar];
	// 
	// Next sample
	// 
	st_private_u8	$s0, [&PrivateVar];
	// 
	st_v2_private_u8	($s0, $s0), [&PrivateVar];
	st_v3_private_u8	($s0, $s0, $s0), [&PrivateVar];
	st_v4_private_u8	($s0, $s0, $s0, $s0), [&PrivateVar];
	st_v2_private_u8	(WAVESIZE, 255), [&PrivateVar];
	st_v3_private_u8	(WAVESIZE, 255, 255), [&PrivateVar];
	st_v4_private_u8	(WAVESIZE, 255, 255, 255), [&PrivateVar];
	st_v2_private_u8	(0, $s0), [&PrivateVar];
	st_v3_private_u8	(0, 255, $s0), [&PrivateVar];
	st_v4_private_u8	(0, 255, $s0, $s0), [&PrivateVar];
	st_v2_private_u8	($s0, $s1), [&PrivateVar];
	st_v3_private_u8	($s0, $s1, $s2), [&PrivateVar];
	st_v4_private_u8	($s0, $s1, $s2, $s3), [&PrivateVar];
	st_private_u8	1, [&PrivateVar];
	st_private_u8	WAVESIZE, [&PrivateVar];
	st_private_u8	$s0, [$s0+2];
	st_private_u8	$s0, [$s0+3];
	st_private_u8	$s0, [$s0+5];
	st_private_u8	$s0, [$s0+6];
	st_private_u8	$s0, [0];
	st_private_align(2)_u8	$s0, [&PrivateVar];
	st_private_align(4)_u8	$s0, [&PrivateVar];
	st_private_align(8)_u8	$s0, [&PrivateVar];
	st_private_align(16)_u8	$s0, [&PrivateVar];
	st_private_align(32)_u8	$s0, [&PrivateVar];
	st_private_align(64)_u8	$s0, [&PrivateVar];
	st_private_align(128)_u8	$s0, [&PrivateVar];
	st_private_align(256)_u8	$s0, [&PrivateVar];
	st_private_equiv(1)_u8	$s0, [&PrivateVar];
	st_private_equiv(2)_u8	$s0, [&PrivateVar];
	st_private_equiv(255)_u8	$s0, [&PrivateVar];
	// 
	// Next sample
	// 
	st_spill_u8	$s0, [%SpillVar];
	// 
	st_v2_spill_u8	($s0, $s0), [%SpillVar];
	st_v3_spill_u8	($s0, $s0, $s0), [%SpillVar];
	st_v4_spill_u8	($s0, $s0, $s0, $s0), [%SpillVar];
	st_v2_spill_u8	(WAVESIZE, 255), [%SpillVar];
	st_v3_spill_u8	(WAVESIZE, 255, 255), [%SpillVar];
	st_v4_spill_u8	(WAVESIZE, 255, 255, 255), [%SpillVar];
	st_v2_spill_u8	(0, $s0), [%SpillVar];
	st_v3_spill_u8	(0, 255, $s0), [%SpillVar];
	st_v4_spill_u8	(0, 255, $s0, $s0), [%SpillVar];
	st_v2_spill_u8	($s0, $s1), [%SpillVar];
	st_v3_spill_u8	($s0, $s1, $s2), [%SpillVar];
	st_v4_spill_u8	($s0, $s1, $s2, $s3), [%SpillVar];
	st_spill_u8	1, [%SpillVar];
	st_spill_u8	WAVESIZE, [%SpillVar];
	st_spill_align(2)_u8	$s0, [%SpillVar];
	st_spill_align(4)_u8	$s0, [%SpillVar];
	st_spill_align(8)_u8	$s0, [%SpillVar];
	st_spill_align(16)_u8	$s0, [%SpillVar];
	st_spill_align(32)_u8	$s0, [%SpillVar];
	st_spill_align(64)_u8	$s0, [%SpillVar];
	st_spill_align(128)_u8	$s0, [%SpillVar];
	st_spill_align(256)_u8	$s0, [%SpillVar];
	st_spill_equiv(1)_u8	$s0, [%SpillVar];
	st_spill_equiv(2)_u8	$s0, [%SpillVar];
	st_spill_equiv(255)_u8	$s0, [%SpillVar];
	// 
	// Next sample
	// 
	st_u16	$s0, [$d0+2];
	// 
	st_v2_u16	($s0, $s0), [$d0+2];
	st_v3_u16	($s0, $s0, $s0), [$d0+2];
	st_v4_u16	($s0, $s0, $s0, $s0), [$d0+2];
	st_v2_u16	(WAVESIZE, -1), [$d0+2];
	st_v3_u16	(WAVESIZE, -1, -1), [$d0+2];
	st_v4_u16	(WAVESIZE, -1, -1, -1), [$d0+2];
	st_v2_u16	(0, $s0), [$d0+2];
	st_v3_u16	(0, -1, $s0), [$d0+2];
	st_v4_u16	(0, -1, $s0, $s0), [$d0+2];
	st_v2_u16	($s0, $s1), [$d0+2];
	st_v3_u16	($s0, $s1, $s2), [$d0+2];
	st_v4_u16	($s0, $s1, $s2, $s3), [$d0+2];
	st_u16	-1, [$d0+2];
	st_u16	WAVESIZE, [$d0+2];
	st_u16	$s0, [$d0+3];
	st_u16	$s0, [$d0+5];
	st_u16	$s0, [$d0+6];
	st_u16	$s0, [0];
	st_align(2)_u16	$s0, [$d0+2];
	st_align(4)_u16	$s0, [$d0+2];
	st_align(8)_u16	$s0, [$d0+2];
	st_align(16)_u16	$s0, [$d0+2];
	st_align(32)_u16	$s0, [$d0+2];
	st_align(64)_u16	$s0, [$d0+2];
	st_align(128)_u16	$s0, [$d0+2];
	st_align(256)_u16	$s0, [$d0+2];
	st_equiv(1)_u16	$s0, [$d0+2];
	st_equiv(2)_u16	$s0, [$d0+2];
	st_equiv(255)_u16	$s0, [$d0+2];
	// 
	// Next sample
	// 
	st_global_u16	$s0, [&GlobalVar];
	// 
	st_v2_global_u16	($s0, $s0), [&GlobalVar];
	st_v3_global_u16	($s0, $s0, $s0), [&GlobalVar];
	st_v4_global_u16	($s0, $s0, $s0, $s0), [&GlobalVar];
	st_v2_global_u16	(WAVESIZE, -1), [&GlobalVar];
	st_v3_global_u16	(WAVESIZE, -1, -1), [&GlobalVar];
	st_v4_global_u16	(WAVESIZE, -1, -1, -1), [&GlobalVar];
	st_v2_global_u16	(0, $s0), [&GlobalVar];
	st_v3_global_u16	(0, -1, $s0), [&GlobalVar];
	st_v4_global_u16	(0, -1, $s0, $s0), [&GlobalVar];
	st_v2_global_u16	($s0, $s1), [&GlobalVar];
	st_v3_global_u16	($s0, $s1, $s2), [&GlobalVar];
	st_v4_global_u16	($s0, $s1, $s2, $s3), [&GlobalVar];
	st_global_u16	-1, [&GlobalVar];
	st_global_u16	WAVESIZE, [&GlobalVar];
	st_global_u16	$s0, [$d0+2];
	st_global_u16	$s0, [$d0+3];
	st_global_u16	$s0, [$d0+5];
	st_global_u16	$s0, [$d0+6];
	st_global_u16	$s0, [0];
	st_global_align(2)_u16	$s0, [&GlobalVar];
	st_global_align(4)_u16	$s0, [&GlobalVar];
	st_global_align(8)_u16	$s0, [&GlobalVar];
	st_global_align(16)_u16	$s0, [&GlobalVar];
	st_global_align(32)_u16	$s0, [&GlobalVar];
	st_global_align(64)_u16	$s0, [&GlobalVar];
	st_global_align(128)_u16	$s0, [&GlobalVar];
	st_global_align(256)_u16	$s0, [&GlobalVar];
	st_global_equiv(1)_u16	$s0, [&GlobalVar];
	st_global_equiv(2)_u16	$s0, [&GlobalVar];
	st_global_equiv(255)_u16	$s0, [&GlobalVar];
	// 
	// Next sample
	// 
	st_group_u16	$s0, [&GroupVar];
	// 
	st_v2_group_u16	($s0, $s0), [&GroupVar];
	st_v3_group_u16	($s0, $s0, $s0), [&GroupVar];
	st_v4_group_u16	($s0, $s0, $s0, $s0), [&GroupVar];
	st_v2_group_u16	(WAVESIZE, -1), [&GroupVar];
	st_v3_group_u16	(WAVESIZE, -1, -1), [&GroupVar];
	st_v4_group_u16	(WAVESIZE, -1, -1, -1), [&GroupVar];
	st_v2_group_u16	(0, $s0), [&GroupVar];
	st_v3_group_u16	(0, -1, $s0), [&GroupVar];
	st_v4_group_u16	(0, -1, $s0, $s0), [&GroupVar];
	st_v2_group_u16	($s0, $s1), [&GroupVar];
	st_v3_group_u16	($s0, $s1, $s2), [&GroupVar];
	st_v4_group_u16	($s0, $s1, $s2, $s3), [&GroupVar];
	st_group_u16	-1, [&GroupVar];
	st_group_u16	WAVESIZE, [&GroupVar];
	st_group_u16	$s0, [$s0+2];
	st_group_u16	$s0, [$s0+3];
	st_group_u16	$s0, [$s0+5];
	st_group_u16	$s0, [$s0+6];
	st_group_u16	$s0, [0];
	st_group_align(2)_u16	$s0, [&GroupVar];
	st_group_align(4)_u16	$s0, [&GroupVar];
	st_group_align(8)_u16	$s0, [&GroupVar];
	st_group_align(16)_u16	$s0, [&GroupVar];
	st_group_align(32)_u16	$s0, [&GroupVar];
	st_group_align(64)_u16	$s0, [&GroupVar];
	st_group_align(128)_u16	$s0, [&GroupVar];
	st_group_align(256)_u16	$s0, [&GroupVar];
	st_group_equiv(1)_u16	$s0, [&GroupVar];
	st_group_equiv(2)_u16	$s0, [&GroupVar];
	st_group_equiv(255)_u16	$s0, [&GroupVar];
	// 
	// Next sample
	// 
	st_private_u16	$s0, [&PrivateVar];
	// 
	st_v2_private_u16	($s0, $s0), [&PrivateVar];
	st_v3_private_u16	($s0, $s0, $s0), [&PrivateVar];
	st_v4_private_u16	($s0, $s0, $s0, $s0), [&PrivateVar];
	st_v2_private_u16	(WAVESIZE, -1), [&PrivateVar];
	st_v3_private_u16	(WAVESIZE, -1, -1), [&PrivateVar];
	st_v4_private_u16	(WAVESIZE, -1, -1, -1), [&PrivateVar];
	st_v2_private_u16	(0, $s0), [&PrivateVar];
	st_v3_private_u16	(0, -1, $s0), [&PrivateVar];
	st_v4_private_u16	(0, -1, $s0, $s0), [&PrivateVar];
	st_v2_private_u16	($s0, $s1), [&PrivateVar];
	st_v3_private_u16	($s0, $s1, $s2), [&PrivateVar];
	st_v4_private_u16	($s0, $s1, $s2, $s3), [&PrivateVar];
	st_private_u16	-1, [&PrivateVar];
	st_private_u16	WAVESIZE, [&PrivateVar];
	st_private_u16	$s0, [$s0+2];
	st_private_u16	$s0, [$s0+3];
	st_private_u16	$s0, [$s0+5];
	st_private_u16	$s0, [$s0+6];
	st_private_u16	$s0, [0];
	st_private_align(2)_u16	$s0, [&PrivateVar];
	st_private_align(4)_u16	$s0, [&PrivateVar];
	st_private_align(8)_u16	$s0, [&PrivateVar];
	st_private_align(16)_u16	$s0, [&PrivateVar];
	st_private_align(32)_u16	$s0, [&PrivateVar];
	st_private_align(64)_u16	$s0, [&PrivateVar];
	st_private_align(128)_u16	$s0, [&PrivateVar];
	st_private_align(256)_u16	$s0, [&PrivateVar];
	st_private_equiv(1)_u16	$s0, [&PrivateVar];
	st_private_equiv(2)_u16	$s0, [&PrivateVar];
	st_private_equiv(255)_u16	$s0, [&PrivateVar];
	// 
	// Next sample
	// 
	st_spill_u16	$s0, [%SpillVar];
	// 
	st_v2_spill_u16	($s0, $s0), [%SpillVar];
	st_v3_spill_u16	($s0, $s0, $s0), [%SpillVar];
	st_v4_spill_u16	($s0, $s0, $s0, $s0), [%SpillVar];
	st_v2_spill_u16	(WAVESIZE, -1), [%SpillVar];
	st_v3_spill_u16	(WAVESIZE, -1, -1), [%SpillVar];
	st_v4_spill_u16	(WAVESIZE, -1, -1, -1), [%SpillVar];
	st_v2_spill_u16	(0, $s0), [%SpillVar];
	st_v3_spill_u16	(0, -1, $s0), [%SpillVar];
	st_v4_spill_u16	(0, -1, $s0, $s0), [%SpillVar];
	st_v2_spill_u16	($s0, $s1), [%SpillVar];
	st_v3_spill_u16	($s0, $s1, $s2), [%SpillVar];
	st_v4_spill_u16	($s0, $s1, $s2, $s3), [%SpillVar];
	st_spill_u16	-1, [%SpillVar];
	st_spill_u16	WAVESIZE, [%SpillVar];
	st_spill_align(2)_u16	$s0, [%SpillVar];
	st_spill_align(4)_u16	$s0, [%SpillVar];
	st_spill_align(8)_u16	$s0, [%SpillVar];
	st_spill_align(16)_u16	$s0, [%SpillVar];
	st_spill_align(32)_u16	$s0, [%SpillVar];
	st_spill_align(64)_u16	$s0, [%SpillVar];
	st_spill_align(128)_u16	$s0, [%SpillVar];
	st_spill_align(256)_u16	$s0, [%SpillVar];
	st_spill_equiv(1)_u16	$s0, [%SpillVar];
	st_spill_equiv(2)_u16	$s0, [%SpillVar];
	st_spill_equiv(255)_u16	$s0, [%SpillVar];
	// 
	// Next sample
	// 
	st_u32	$s0, [$d0+2];
	// 
	st_v2_u32	($s0, $s0), [$d0+2];
	st_v3_u32	($s0, $s0, $s0), [$d0+2];
	st_v4_u32	($s0, $s0, $s0, $s0), [$d0+2];
	st_v2_u32	(WAVESIZE, -1), [$d0+2];
	st_v3_u32	(WAVESIZE, -1, -1), [$d0+2];
	st_v4_u32	(WAVESIZE, -1, -1, -1), [$d0+2];
	st_v2_u32	(0, $s0), [$d0+2];
	st_v3_u32	(0, -1, $s0), [$d0+2];
	st_v4_u32	(0, -1, $s0, $s0), [$d0+2];
	st_v2_u32	($s0, $s1), [$d0+2];
	st_v3_u32	($s0, $s1, $s2), [$d0+2];
	st_v4_u32	($s0, $s1, $s2, $s3), [$d0+2];
	st_u32	-1, [$d0+2];
	st_u32	WAVESIZE, [$d0+2];
	st_u32	$s0, [$d0+3];
	st_u32	$s0, [$d0+5];
	st_u32	$s0, [$d0+6];
	st_u32	$s0, [0];
	st_align(2)_u32	$s0, [$d0+2];
	st_align(4)_u32	$s0, [$d0+2];
	st_align(8)_u32	$s0, [$d0+2];
	st_align(16)_u32	$s0, [$d0+2];
	st_align(32)_u32	$s0, [$d0+2];
	st_align(64)_u32	$s0, [$d0+2];
	st_align(128)_u32	$s0, [$d0+2];
	st_align(256)_u32	$s0, [$d0+2];
	st_equiv(1)_u32	$s0, [$d0+2];
	st_equiv(2)_u32	$s0, [$d0+2];
	st_equiv(255)_u32	$s0, [$d0+2];
	// 
	// Next sample
	// 
	st_global_u32	$s0, [&GlobalVar];
	// 
	st_v2_global_u32	($s0, $s0), [&GlobalVar];
	st_v3_global_u32	($s0, $s0, $s0), [&GlobalVar];
	st_v4_global_u32	($s0, $s0, $s0, $s0), [&GlobalVar];
	st_v2_global_u32	(WAVESIZE, -1), [&GlobalVar];
	st_v3_global_u32	(WAVESIZE, -1, -1), [&GlobalVar];
	st_v4_global_u32	(WAVESIZE, -1, -1, -1), [&GlobalVar];
	st_v2_global_u32	(0, $s0), [&GlobalVar];
	st_v3_global_u32	(0, -1, $s0), [&GlobalVar];
	st_v4_global_u32	(0, -1, $s0, $s0), [&GlobalVar];
	st_v2_global_u32	($s0, $s1), [&GlobalVar];
	st_v3_global_u32	($s0, $s1, $s2), [&GlobalVar];
	st_v4_global_u32	($s0, $s1, $s2, $s3), [&GlobalVar];
	st_global_u32	-1, [&GlobalVar];
	st_global_u32	WAVESIZE, [&GlobalVar];
	st_global_u32	$s0, [$d0+2];
	st_global_u32	$s0, [$d0+3];
	st_global_u32	$s0, [$d0+5];
	st_global_u32	$s0, [$d0+6];
	st_global_u32	$s0, [0];
	st_global_align(2)_u32	$s0, [&GlobalVar];
	st_global_align(4)_u32	$s0, [&GlobalVar];
	st_global_align(8)_u32	$s0, [&GlobalVar];
	st_global_align(16)_u32	$s0, [&GlobalVar];
	st_global_align(32)_u32	$s0, [&GlobalVar];
	st_global_align(64)_u32	$s0, [&GlobalVar];
	st_global_align(128)_u32	$s0, [&GlobalVar];
	st_global_align(256)_u32	$s0, [&GlobalVar];
	st_global_equiv(1)_u32	$s0, [&GlobalVar];
	st_global_equiv(2)_u32	$s0, [&GlobalVar];
	st_global_equiv(255)_u32	$s0, [&GlobalVar];
	// 
	// Next sample
	// 
	st_group_u32	$s0, [&GroupVar];
	// 
	st_v2_group_u32	($s0, $s0), [&GroupVar];
	st_v3_group_u32	($s0, $s0, $s0), [&GroupVar];
	st_v4_group_u32	($s0, $s0, $s0, $s0), [&GroupVar];
	st_v2_group_u32	(WAVESIZE, -1), [&GroupVar];
	st_v3_group_u32	(WAVESIZE, -1, -1), [&GroupVar];
	st_v4_group_u32	(WAVESIZE, -1, -1, -1), [&GroupVar];
	st_v2_group_u32	(0, $s0), [&GroupVar];
	st_v3_group_u32	(0, -1, $s0), [&GroupVar];
	st_v4_group_u32	(0, -1, $s0, $s0), [&GroupVar];
	st_v2_group_u32	($s0, $s1), [&GroupVar];
	st_v3_group_u32	($s0, $s1, $s2), [&GroupVar];
	st_v4_group_u32	($s0, $s1, $s2, $s3), [&GroupVar];
	st_group_u32	-1, [&GroupVar];
	st_group_u32	WAVESIZE, [&GroupVar];
	st_group_u32	$s0, [$s0+2];
	st_group_u32	$s0, [$s0+3];
	st_group_u32	$s0, [$s0+5];
	st_group_u32	$s0, [$s0+6];
	st_group_u32	$s0, [0];
	st_group_align(2)_u32	$s0, [&GroupVar];
	st_group_align(4)_u32	$s0, [&GroupVar];
	st_group_align(8)_u32	$s0, [&GroupVar];
	st_group_align(16)_u32	$s0, [&GroupVar];
	st_group_align(32)_u32	$s0, [&GroupVar];
	st_group_align(64)_u32	$s0, [&GroupVar];
	st_group_align(128)_u32	$s0, [&GroupVar];
	st_group_align(256)_u32	$s0, [&GroupVar];
	st_group_equiv(1)_u32	$s0, [&GroupVar];
	st_group_equiv(2)_u32	$s0, [&GroupVar];
	st_group_equiv(255)_u32	$s0, [&GroupVar];
	// 
	// Next sample
	// 
	st_private_u32	$s0, [&PrivateVar];
	// 
	st_v2_private_u32	($s0, $s0), [&PrivateVar];
	st_v3_private_u32	($s0, $s0, $s0), [&PrivateVar];
	st_v4_private_u32	($s0, $s0, $s0, $s0), [&PrivateVar];
	st_v2_private_u32	(WAVESIZE, -1), [&PrivateVar];
	st_v3_private_u32	(WAVESIZE, -1, -1), [&PrivateVar];
	st_v4_private_u32	(WAVESIZE, -1, -1, -1), [&PrivateVar];
	st_v2_private_u32	(0, $s0), [&PrivateVar];
	st_v3_private_u32	(0, -1, $s0), [&PrivateVar];
	st_v4_private_u32	(0, -1, $s0, $s0), [&PrivateVar];
	st_v2_private_u32	($s0, $s1), [&PrivateVar];
	st_v3_private_u32	($s0, $s1, $s2), [&PrivateVar];
	st_v4_private_u32	($s0, $s1, $s2, $s3), [&PrivateVar];
	st_private_u32	-1, [&PrivateVar];
	st_private_u32	WAVESIZE, [&PrivateVar];
	st_private_u32	$s0, [$s0+2];
	st_private_u32	$s0, [$s0+3];
	st_private_u32	$s0, [$s0+5];
	st_private_u32	$s0, [$s0+6];
	st_private_u32	$s0, [0];
	st_private_align(2)_u32	$s0, [&PrivateVar];
	st_private_align(4)_u32	$s0, [&PrivateVar];
	st_private_align(8)_u32	$s0, [&PrivateVar];
	st_private_align(16)_u32	$s0, [&PrivateVar];
	st_private_align(32)_u32	$s0, [&PrivateVar];
	st_private_align(64)_u32	$s0, [&PrivateVar];
	st_private_align(128)_u32	$s0, [&PrivateVar];
	st_private_align(256)_u32	$s0, [&PrivateVar];
	st_private_equiv(1)_u32	$s0, [&PrivateVar];
	st_private_equiv(2)_u32	$s0, [&PrivateVar];
	st_private_equiv(255)_u32	$s0, [&PrivateVar];
	// 
	// Next sample
	// 
	st_spill_u32	$s0, [%SpillVar];
	// 
	st_v2_spill_u32	($s0, $s0), [%SpillVar];
	st_v3_spill_u32	($s0, $s0, $s0), [%SpillVar];
	st_v4_spill_u32	($s0, $s0, $s0, $s0), [%SpillVar];
	st_v2_spill_u32	(WAVESIZE, -1), [%SpillVar];
	st_v3_spill_u32	(WAVESIZE, -1, -1), [%SpillVar];
	st_v4_spill_u32	(WAVESIZE, -1, -1, -1), [%SpillVar];
	st_v2_spill_u32	(0, $s0), [%SpillVar];
	st_v3_spill_u32	(0, -1, $s0), [%SpillVar];
	st_v4_spill_u32	(0, -1, $s0, $s0), [%SpillVar];
	st_v2_spill_u32	($s0, $s1), [%SpillVar];
	st_v3_spill_u32	($s0, $s1, $s2), [%SpillVar];
	st_v4_spill_u32	($s0, $s1, $s2, $s3), [%SpillVar];
	st_spill_u32	-1, [%SpillVar];
	st_spill_u32	WAVESIZE, [%SpillVar];
	st_spill_align(2)_u32	$s0, [%SpillVar];
	st_spill_align(4)_u32	$s0, [%SpillVar];
	st_spill_align(8)_u32	$s0, [%SpillVar];
	st_spill_align(16)_u32	$s0, [%SpillVar];
	st_spill_align(32)_u32	$s0, [%SpillVar];
	st_spill_align(64)_u32	$s0, [%SpillVar];
	st_spill_align(128)_u32	$s0, [%SpillVar];
	st_spill_align(256)_u32	$s0, [%SpillVar];
	st_spill_equiv(1)_u32	$s0, [%SpillVar];
	st_spill_equiv(2)_u32	$s0, [%SpillVar];
	st_spill_equiv(255)_u32	$s0, [%SpillVar];
	// 
	// Next sample
	// 
	st_u64	$d0, [$d0+2];
	// 
	st_v2_u64	($d0, $d0), [$d0+2];
	st_v3_u64	($d0, $d0, $d0), [$d0+2];
	st_v4_u64	($d0, $d0, $d0, $d0), [$d0+2];
	st_v2_u64	(WAVESIZE, -1), [$d0+2];
	st_v3_u64	(WAVESIZE, -1, -1), [$d0+2];
	st_v4_u64	(WAVESIZE, -1, -1, -1), [$d0+2];
	st_v2_u64	(0, $d0), [$d0+2];
	st_v3_u64	(0, -1, $d0), [$d0+2];
	st_v4_u64	(0, -1, $d0, $d0), [$d0+2];
	st_v2_u64	($d0, $d1), [$d0+2];
	st_v3_u64	($d0, $d1, $d2), [$d0+2];
	st_v4_u64	($d0, $d1, $d2, $d3), [$d0+2];
	st_u64	-1, [$d0+2];
	st_u64	WAVESIZE, [$d0+2];
	st_u64	$d0, [$d0+3];
	st_u64	$d0, [$d0+5];
	st_u64	$d0, [$d0+6];
	st_u64	$d0, [0];
	st_align(2)_u64	$d0, [$d0+2];
	st_align(4)_u64	$d0, [$d0+2];
	st_align(8)_u64	$d0, [$d0+2];
	st_align(16)_u64	$d0, [$d0+2];
	st_align(32)_u64	$d0, [$d0+2];
	st_align(64)_u64	$d0, [$d0+2];
	st_align(128)_u64	$d0, [$d0+2];
	st_align(256)_u64	$d0, [$d0+2];
	st_equiv(1)_u64	$d0, [$d0+2];
	st_equiv(2)_u64	$d0, [$d0+2];
	st_equiv(255)_u64	$d0, [$d0+2];
	// 
	// Next sample
	// 
	st_global_u64	$d0, [&GlobalVar];
	// 
	st_v2_global_u64	($d0, $d0), [&GlobalVar];
	st_v3_global_u64	($d0, $d0, $d0), [&GlobalVar];
	st_v4_global_u64	($d0, $d0, $d0, $d0), [&GlobalVar];
	st_v2_global_u64	(WAVESIZE, -1), [&GlobalVar];
	st_v3_global_u64	(WAVESIZE, -1, -1), [&GlobalVar];
	st_v4_global_u64	(WAVESIZE, -1, -1, -1), [&GlobalVar];
	st_v2_global_u64	(0, $d0), [&GlobalVar];
	st_v3_global_u64	(0, -1, $d0), [&GlobalVar];
	st_v4_global_u64	(0, -1, $d0, $d0), [&GlobalVar];
	st_v2_global_u64	($d0, $d1), [&GlobalVar];
	st_v3_global_u64	($d0, $d1, $d2), [&GlobalVar];
	st_v4_global_u64	($d0, $d1, $d2, $d3), [&GlobalVar];
	st_global_u64	-1, [&GlobalVar];
	st_global_u64	WAVESIZE, [&GlobalVar];
	st_global_u64	$d0, [$d0+2];
	st_global_u64	$d0, [$d0+3];
	st_global_u64	$d0, [$d0+5];
	st_global_u64	$d0, [$d0+6];
	st_global_u64	$d0, [0];
	st_global_align(2)_u64	$d0, [&GlobalVar];
	st_global_align(4)_u64	$d0, [&GlobalVar];
	st_global_align(8)_u64	$d0, [&GlobalVar];
	st_global_align(16)_u64	$d0, [&GlobalVar];
	st_global_align(32)_u64	$d0, [&GlobalVar];
	st_global_align(64)_u64	$d0, [&GlobalVar];
	st_global_align(128)_u64	$d0, [&GlobalVar];
	st_global_align(256)_u64	$d0, [&GlobalVar];
	st_global_equiv(1)_u64	$d0, [&GlobalVar];
	st_global_equiv(2)_u64	$d0, [&GlobalVar];
	st_global_equiv(255)_u64	$d0, [&GlobalVar];
	// 
	// Next sample
	// 
	st_group_u64	$d0, [&GroupVar];
	// 
	st_v2_group_u64	($d0, $d0), [&GroupVar];
	st_v3_group_u64	($d0, $d0, $d0), [&GroupVar];
	st_v4_group_u64	($d0, $d0, $d0, $d0), [&GroupVar];
	st_v2_group_u64	(WAVESIZE, -1), [&GroupVar];
	st_v3_group_u64	(WAVESIZE, -1, -1), [&GroupVar];
	st_v4_group_u64	(WAVESIZE, -1, -1, -1), [&GroupVar];
	st_v2_group_u64	(0, $d0), [&GroupVar];
	st_v3_group_u64	(0, -1, $d0), [&GroupVar];
	st_v4_group_u64	(0, -1, $d0, $d0), [&GroupVar];
	st_v2_group_u64	($d0, $d1), [&GroupVar];
	st_v3_group_u64	($d0, $d1, $d2), [&GroupVar];
	st_v4_group_u64	($d0, $d1, $d2, $d3), [&GroupVar];
	st_group_u64	-1, [&GroupVar];
	st_group_u64	WAVESIZE, [&GroupVar];
	st_group_u64	$d0, [$s0+2];
	st_group_u64	$d0, [$s0+3];
	st_group_u64	$d0, [$s0+5];
	st_group_u64	$d0, [$s0+6];
	st_group_u64	$d0, [0];
	st_group_align(2)_u64	$d0, [&GroupVar];
	st_group_align(4)_u64	$d0, [&GroupVar];
	st_group_align(8)_u64	$d0, [&GroupVar];
	st_group_align(16)_u64	$d0, [&GroupVar];
	st_group_align(32)_u64	$d0, [&GroupVar];
	st_group_align(64)_u64	$d0, [&GroupVar];
	st_group_align(128)_u64	$d0, [&GroupVar];
	st_group_align(256)_u64	$d0, [&GroupVar];
	st_group_equiv(1)_u64	$d0, [&GroupVar];
	st_group_equiv(2)_u64	$d0, [&GroupVar];
	st_group_equiv(255)_u64	$d0, [&GroupVar];
	// 
	// Next sample
	// 
	st_private_u64	$d0, [&PrivateVar];
	// 
	st_v2_private_u64	($d0, $d0), [&PrivateVar];
	st_v3_private_u64	($d0, $d0, $d0), [&PrivateVar];
	st_v4_private_u64	($d0, $d0, $d0, $d0), [&PrivateVar];
	st_v2_private_u64	(WAVESIZE, -1), [&PrivateVar];
	st_v3_private_u64	(WAVESIZE, -1, -1), [&PrivateVar];
	st_v4_private_u64	(WAVESIZE, -1, -1, -1), [&PrivateVar];
	st_v2_private_u64	(0, $d0), [&PrivateVar];
	st_v3_private_u64	(0, -1, $d0), [&PrivateVar];
	st_v4_private_u64	(0, -1, $d0, $d0), [&PrivateVar];
	st_v2_private_u64	($d0, $d1), [&PrivateVar];
	st_v3_private_u64	($d0, $d1, $d2), [&PrivateVar];
	st_v4_private_u64	($d0, $d1, $d2, $d3), [&PrivateVar];
	st_private_u64	-1, [&PrivateVar];
	st_private_u64	WAVESIZE, [&PrivateVar];
	st_private_u64	$d0, [$s0+2];
	st_private_u64	$d0, [$s0+3];
	st_private_u64	$d0, [$s0+5];
	st_private_u64	$d0, [$s0+6];
	st_private_u64	$d0, [0];
	st_private_align(2)_u64	$d0, [&PrivateVar];
	st_private_align(4)_u64	$d0, [&PrivateVar];
	st_private_align(8)_u64	$d0, [&PrivateVar];
	st_private_align(16)_u64	$d0, [&PrivateVar];
	st_private_align(32)_u64	$d0, [&PrivateVar];
	st_private_align(64)_u64	$d0, [&PrivateVar];
	st_private_align(128)_u64	$d0, [&PrivateVar];
	st_private_align(256)_u64	$d0, [&PrivateVar];
	st_private_equiv(1)_u64	$d0, [&PrivateVar];
	st_private_equiv(2)_u64	$d0, [&PrivateVar];
	st_private_equiv(255)_u64	$d0, [&PrivateVar];
	// 
	// Next sample
	// 
	st_spill_u64	$d0, [%SpillVar];
	// 
	st_v2_spill_u64	($d0, $d0), [%SpillVar];
	st_v3_spill_u64	($d0, $d0, $d0), [%SpillVar];
	st_v4_spill_u64	($d0, $d0, $d0, $d0), [%SpillVar];
	st_v2_spill_u64	(WAVESIZE, -1), [%SpillVar];
	st_v3_spill_u64	(WAVESIZE, -1, -1), [%SpillVar];
	st_v4_spill_u64	(WAVESIZE, -1, -1, -1), [%SpillVar];
	st_v2_spill_u64	(0, $d0), [%SpillVar];
	st_v3_spill_u64	(0, -1, $d0), [%SpillVar];
	st_v4_spill_u64	(0, -1, $d0, $d0), [%SpillVar];
	st_v2_spill_u64	($d0, $d1), [%SpillVar];
	st_v3_spill_u64	($d0, $d1, $d2), [%SpillVar];
	st_v4_spill_u64	($d0, $d1, $d2, $d3), [%SpillVar];
	st_spill_u64	-1, [%SpillVar];
	st_spill_u64	WAVESIZE, [%SpillVar];
	st_spill_align(2)_u64	$d0, [%SpillVar];
	st_spill_align(4)_u64	$d0, [%SpillVar];
	st_spill_align(8)_u64	$d0, [%SpillVar];
	st_spill_align(16)_u64	$d0, [%SpillVar];
	st_spill_align(32)_u64	$d0, [%SpillVar];
	st_spill_align(64)_u64	$d0, [%SpillVar];
	st_spill_align(128)_u64	$d0, [%SpillVar];
	st_spill_align(256)_u64	$d0, [%SpillVar];
	st_spill_equiv(1)_u64	$d0, [%SpillVar];
	st_spill_equiv(2)_u64	$d0, [%SpillVar];
	st_spill_equiv(255)_u64	$d0, [%SpillVar];
	// 
	// Next sample
	// 
	st_s8	$s0, [$d0+2];
	// 
	st_v2_s8	($s0, $s0), [$d0+2];
	st_v3_s8	($s0, $s0, $s0), [$d0+2];
	st_v4_s8	($s0, $s0, $s0, $s0), [$d0+2];
	st_v2_s8	(WAVESIZE, -1), [$d0+2];
	st_v3_s8	(WAVESIZE, -1, -1), [$d0+2];
	st_v4_s8	(WAVESIZE, -1, -1, -1), [$d0+2];
	st_v2_s8	(0, $s0), [$d0+2];
	st_v3_s8	(0, -1, $s0), [$d0+2];
	st_v4_s8	(0, -1, $s0, $s0), [$d0+2];
	st_v2_s8	($s0, $s1), [$d0+2];
	st_v3_s8	($s0, $s1, $s2), [$d0+2];
	st_v4_s8	($s0, $s1, $s2, $s3), [$d0+2];
	st_s8	1, [$d0+2];
	st_s8	WAVESIZE, [$d0+2];
	st_s8	$s0, [$d0+3];
	st_s8	$s0, [$d0+5];
	st_s8	$s0, [$d0+6];
	st_s8	$s0, [0];
	st_align(2)_s8	$s0, [$d0+2];
	st_align(4)_s8	$s0, [$d0+2];
	st_align(8)_s8	$s0, [$d0+2];
	st_align(16)_s8	$s0, [$d0+2];
	st_align(32)_s8	$s0, [$d0+2];
	st_align(64)_s8	$s0, [$d0+2];
	st_align(128)_s8	$s0, [$d0+2];
	st_align(256)_s8	$s0, [$d0+2];
	st_equiv(1)_s8	$s0, [$d0+2];
	st_equiv(2)_s8	$s0, [$d0+2];
	st_equiv(255)_s8	$s0, [$d0+2];
	// 
	// Next sample
	// 
	st_global_s8	$s0, [&GlobalVar];
	// 
	st_v2_global_s8	($s0, $s0), [&GlobalVar];
	st_v3_global_s8	($s0, $s0, $s0), [&GlobalVar];
	st_v4_global_s8	($s0, $s0, $s0, $s0), [&GlobalVar];
	st_v2_global_s8	(WAVESIZE, -1), [&GlobalVar];
	st_v3_global_s8	(WAVESIZE, -1, -1), [&GlobalVar];
	st_v4_global_s8	(WAVESIZE, -1, -1, -1), [&GlobalVar];
	st_v2_global_s8	(0, $s0), [&GlobalVar];
	st_v3_global_s8	(0, -1, $s0), [&GlobalVar];
	st_v4_global_s8	(0, -1, $s0, $s0), [&GlobalVar];
	st_v2_global_s8	($s0, $s1), [&GlobalVar];
	st_v3_global_s8	($s0, $s1, $s2), [&GlobalVar];
	st_v4_global_s8	($s0, $s1, $s2, $s3), [&GlobalVar];
	st_global_s8	1, [&GlobalVar];
	st_global_s8	WAVESIZE, [&GlobalVar];
	st_global_s8	$s0, [$d0+2];
	st_global_s8	$s0, [$d0+3];
	st_global_s8	$s0, [$d0+5];
	st_global_s8	$s0, [$d0+6];
	st_global_s8	$s0, [0];
	st_global_align(2)_s8	$s0, [&GlobalVar];
	st_global_align(4)_s8	$s0, [&GlobalVar];
	st_global_align(8)_s8	$s0, [&GlobalVar];
	st_global_align(16)_s8	$s0, [&GlobalVar];
	st_global_align(32)_s8	$s0, [&GlobalVar];
	st_global_align(64)_s8	$s0, [&GlobalVar];
	st_global_align(128)_s8	$s0, [&GlobalVar];
	st_global_align(256)_s8	$s0, [&GlobalVar];
	st_global_equiv(1)_s8	$s0, [&GlobalVar];
	st_global_equiv(2)_s8	$s0, [&GlobalVar];
	st_global_equiv(255)_s8	$s0, [&GlobalVar];
	// 
	// Next sample
	// 
	st_group_s8	$s0, [&GroupVar];
	// 
	st_v2_group_s8	($s0, $s0), [&GroupVar];
	st_v3_group_s8	($s0, $s0, $s0), [&GroupVar];
	st_v4_group_s8	($s0, $s0, $s0, $s0), [&GroupVar];
	st_v2_group_s8	(WAVESIZE, -1), [&GroupVar];
	st_v3_group_s8	(WAVESIZE, -1, -1), [&GroupVar];
	st_v4_group_s8	(WAVESIZE, -1, -1, -1), [&GroupVar];
	st_v2_group_s8	(0, $s0), [&GroupVar];
	st_v3_group_s8	(0, -1, $s0), [&GroupVar];
	st_v4_group_s8	(0, -1, $s0, $s0), [&GroupVar];
	st_v2_group_s8	($s0, $s1), [&GroupVar];
	st_v3_group_s8	($s0, $s1, $s2), [&GroupVar];
	st_v4_group_s8	($s0, $s1, $s2, $s3), [&GroupVar];
	st_group_s8	1, [&GroupVar];
	st_group_s8	WAVESIZE, [&GroupVar];
	st_group_s8	$s0, [$s0+2];
	st_group_s8	$s0, [$s0+3];
	st_group_s8	$s0, [$s0+5];
	st_group_s8	$s0, [$s0+6];
	st_group_s8	$s0, [0];
	st_group_align(2)_s8	$s0, [&GroupVar];
	st_group_align(4)_s8	$s0, [&GroupVar];
	st_group_align(8)_s8	$s0, [&GroupVar];
	st_group_align(16)_s8	$s0, [&GroupVar];
	st_group_align(32)_s8	$s0, [&GroupVar];
	st_group_align(64)_s8	$s0, [&GroupVar];
	st_group_align(128)_s8	$s0, [&GroupVar];
	st_group_align(256)_s8	$s0, [&GroupVar];
	st_group_equiv(1)_s8	$s0, [&GroupVar];
	st_group_equiv(2)_s8	$s0, [&GroupVar];
	st_group_equiv(255)_s8	$s0, [&GroupVar];
	// 
	// Next sample
	// 
	st_private_s8	$s0, [&PrivateVar];
	// 
	st_v2_private_s8	($s0, $s0), [&PrivateVar];
	st_v3_private_s8	($s0, $s0, $s0), [&PrivateVar];
	st_v4_private_s8	($s0, $s0, $s0, $s0), [&PrivateVar];
	st_v2_private_s8	(WAVESIZE, -1), [&PrivateVar];
	st_v3_private_s8	(WAVESIZE, -1, -1), [&PrivateVar];
	st_v4_private_s8	(WAVESIZE, -1, -1, -1), [&PrivateVar];
	st_v2_private_s8	(0, $s0), [&PrivateVar];
	st_v3_private_s8	(0, -1, $s0), [&PrivateVar];
	st_v4_private_s8	(0, -1, $s0, $s0), [&PrivateVar];
	st_v2_private_s8	($s0, $s1), [&PrivateVar];
	st_v3_private_s8	($s0, $s1, $s2), [&PrivateVar];
	st_v4_private_s8	($s0, $s1, $s2, $s3), [&PrivateVar];
	st_private_s8	1, [&PrivateVar];
	st_private_s8	WAVESIZE, [&PrivateVar];
	st_private_s8	$s0, [$s0+2];
	st_private_s8	$s0, [$s0+3];
	st_private_s8	$s0, [$s0+5];
	st_private_s8	$s0, [$s0+6];
	st_private_s8	$s0, [0];
	st_private_align(2)_s8	$s0, [&PrivateVar];
	st_private_align(4)_s8	$s0, [&PrivateVar];
	st_private_align(8)_s8	$s0, [&PrivateVar];
	st_private_align(16)_s8	$s0, [&PrivateVar];
	st_private_align(32)_s8	$s0, [&PrivateVar];
	st_private_align(64)_s8	$s0, [&PrivateVar];
	st_private_align(128)_s8	$s0, [&PrivateVar];
	st_private_align(256)_s8	$s0, [&PrivateVar];
	st_private_equiv(1)_s8	$s0, [&PrivateVar];
	st_private_equiv(2)_s8	$s0, [&PrivateVar];
	st_private_equiv(255)_s8	$s0, [&PrivateVar];
	// 
	// Next sample
	// 
	st_spill_s8	$s0, [%SpillVar];
	// 
	st_v2_spill_s8	($s0, $s0), [%SpillVar];
	st_v3_spill_s8	($s0, $s0, $s0), [%SpillVar];
	st_v4_spill_s8	($s0, $s0, $s0, $s0), [%SpillVar];
	st_v2_spill_s8	(WAVESIZE, -1), [%SpillVar];
	st_v3_spill_s8	(WAVESIZE, -1, -1), [%SpillVar];
	st_v4_spill_s8	(WAVESIZE, -1, -1, -1), [%SpillVar];
	st_v2_spill_s8	(0, $s0), [%SpillVar];
	st_v3_spill_s8	(0, -1, $s0), [%SpillVar];
	st_v4_spill_s8	(0, -1, $s0, $s0), [%SpillVar];
	st_v2_spill_s8	($s0, $s1), [%SpillVar];
	st_v3_spill_s8	($s0, $s1, $s2), [%SpillVar];
	st_v4_spill_s8	($s0, $s1, $s2, $s3), [%SpillVar];
	st_spill_s8	1, [%SpillVar];
	st_spill_s8	WAVESIZE, [%SpillVar];
	st_spill_align(2)_s8	$s0, [%SpillVar];
	st_spill_align(4)_s8	$s0, [%SpillVar];
	st_spill_align(8)_s8	$s0, [%SpillVar];
	st_spill_align(16)_s8	$s0, [%SpillVar];
	st_spill_align(32)_s8	$s0, [%SpillVar];
	st_spill_align(64)_s8	$s0, [%SpillVar];
	st_spill_align(128)_s8	$s0, [%SpillVar];
	st_spill_align(256)_s8	$s0, [%SpillVar];
	st_spill_equiv(1)_s8	$s0, [%SpillVar];
	st_spill_equiv(2)_s8	$s0, [%SpillVar];
	st_spill_equiv(255)_s8	$s0, [%SpillVar];
	// 
	// Next sample
	// 
	st_s16	$s0, [$d0+2];
	// 
	st_v2_s16	($s0, $s0), [$d0+2];
	st_v3_s16	($s0, $s0, $s0), [$d0+2];
	st_v4_s16	($s0, $s0, $s0, $s0), [$d0+2];
	st_v2_s16	(WAVESIZE, -1), [$d0+2];
	st_v3_s16	(WAVESIZE, -1, -1), [$d0+2];
	st_v4_s16	(WAVESIZE, -1, -1, -1), [$d0+2];
	st_v2_s16	(0, $s0), [$d0+2];
	st_v3_s16	(0, -1, $s0), [$d0+2];
	st_v4_s16	(0, -1, $s0, $s0), [$d0+2];
	st_v2_s16	($s0, $s1), [$d0+2];
	st_v3_s16	($s0, $s1, $s2), [$d0+2];
	st_v4_s16	($s0, $s1, $s2, $s3), [$d0+2];
	st_s16	-1, [$d0+2];
	st_s16	WAVESIZE, [$d0+2];
	st_s16	$s0, [$d0+3];
	st_s16	$s0, [$d0+5];
	st_s16	$s0, [$d0+6];
	st_s16	$s0, [0];
	st_align(2)_s16	$s0, [$d0+2];
	st_align(4)_s16	$s0, [$d0+2];
	st_align(8)_s16	$s0, [$d0+2];
	st_align(16)_s16	$s0, [$d0+2];
	st_align(32)_s16	$s0, [$d0+2];
	st_align(64)_s16	$s0, [$d0+2];
	st_align(128)_s16	$s0, [$d0+2];
	st_align(256)_s16	$s0, [$d0+2];
	st_equiv(1)_s16	$s0, [$d0+2];
	st_equiv(2)_s16	$s0, [$d0+2];
	st_equiv(255)_s16	$s0, [$d0+2];
	// 
	// Next sample
	// 
	st_global_s16	$s0, [&GlobalVar];
	// 
	st_v2_global_s16	($s0, $s0), [&GlobalVar];
	st_v3_global_s16	($s0, $s0, $s0), [&GlobalVar];
	st_v4_global_s16	($s0, $s0, $s0, $s0), [&GlobalVar];
	st_v2_global_s16	(WAVESIZE, -1), [&GlobalVar];
	st_v3_global_s16	(WAVESIZE, -1, -1), [&GlobalVar];
	st_v4_global_s16	(WAVESIZE, -1, -1, -1), [&GlobalVar];
	st_v2_global_s16	(0, $s0), [&GlobalVar];
	st_v3_global_s16	(0, -1, $s0), [&GlobalVar];
	st_v4_global_s16	(0, -1, $s0, $s0), [&GlobalVar];
	st_v2_global_s16	($s0, $s1), [&GlobalVar];
	st_v3_global_s16	($s0, $s1, $s2), [&GlobalVar];
	st_v4_global_s16	($s0, $s1, $s2, $s3), [&GlobalVar];
	st_global_s16	-1, [&GlobalVar];
	st_global_s16	WAVESIZE, [&GlobalVar];
	st_global_s16	$s0, [$d0+2];
	st_global_s16	$s0, [$d0+3];
	st_global_s16	$s0, [$d0+5];
	st_global_s16	$s0, [$d0+6];
	st_global_s16	$s0, [0];
	st_global_align(2)_s16	$s0, [&GlobalVar];
	st_global_align(4)_s16	$s0, [&GlobalVar];
	st_global_align(8)_s16	$s0, [&GlobalVar];
	st_global_align(16)_s16	$s0, [&GlobalVar];
	st_global_align(32)_s16	$s0, [&GlobalVar];
	st_global_align(64)_s16	$s0, [&GlobalVar];
	st_global_align(128)_s16	$s0, [&GlobalVar];
	st_global_align(256)_s16	$s0, [&GlobalVar];
	st_global_equiv(1)_s16	$s0, [&GlobalVar];
	st_global_equiv(2)_s16	$s0, [&GlobalVar];
	st_global_equiv(255)_s16	$s0, [&GlobalVar];
	// 
	// Next sample
	// 
	st_group_s16	$s0, [&GroupVar];
	// 
	st_v2_group_s16	($s0, $s0), [&GroupVar];
	st_v3_group_s16	($s0, $s0, $s0), [&GroupVar];
	st_v4_group_s16	($s0, $s0, $s0, $s0), [&GroupVar];
	st_v2_group_s16	(WAVESIZE, -1), [&GroupVar];
	st_v3_group_s16	(WAVESIZE, -1, -1), [&GroupVar];
	st_v4_group_s16	(WAVESIZE, -1, -1, -1), [&GroupVar];
	st_v2_group_s16	(0, $s0), [&GroupVar];
	st_v3_group_s16	(0, -1, $s0), [&GroupVar];
	st_v4_group_s16	(0, -1, $s0, $s0), [&GroupVar];
	st_v2_group_s16	($s0, $s1), [&GroupVar];
	st_v3_group_s16	($s0, $s1, $s2), [&GroupVar];
	st_v4_group_s16	($s0, $s1, $s2, $s3), [&GroupVar];
	st_group_s16	-1, [&GroupVar];
	st_group_s16	WAVESIZE, [&GroupVar];
	st_group_s16	$s0, [$s0+2];
	st_group_s16	$s0, [$s0+3];
	st_group_s16	$s0, [$s0+5];
	st_group_s16	$s0, [$s0+6];
	st_group_s16	$s0, [0];
	st_group_align(2)_s16	$s0, [&GroupVar];
	st_group_align(4)_s16	$s0, [&GroupVar];
	st_group_align(8)_s16	$s0, [&GroupVar];
	st_group_align(16)_s16	$s0, [&GroupVar];
	st_group_align(32)_s16	$s0, [&GroupVar];
	st_group_align(64)_s16	$s0, [&GroupVar];
	st_group_align(128)_s16	$s0, [&GroupVar];
	st_group_align(256)_s16	$s0, [&GroupVar];
	st_group_equiv(1)_s16	$s0, [&GroupVar];
	st_group_equiv(2)_s16	$s0, [&GroupVar];
	st_group_equiv(255)_s16	$s0, [&GroupVar];
	// 
	// Next sample
	// 
	st_private_s16	$s0, [&PrivateVar];
	// 
	st_v2_private_s16	($s0, $s0), [&PrivateVar];
	st_v3_private_s16	($s0, $s0, $s0), [&PrivateVar];
	st_v4_private_s16	($s0, $s0, $s0, $s0), [&PrivateVar];
	st_v2_private_s16	(WAVESIZE, -1), [&PrivateVar];
	st_v3_private_s16	(WAVESIZE, -1, -1), [&PrivateVar];
	st_v4_private_s16	(WAVESIZE, -1, -1, -1), [&PrivateVar];
	st_v2_private_s16	(0, $s0), [&PrivateVar];
	st_v3_private_s16	(0, -1, $s0), [&PrivateVar];
	st_v4_private_s16	(0, -1, $s0, $s0), [&PrivateVar];
	st_v2_private_s16	($s0, $s1), [&PrivateVar];
	st_v3_private_s16	($s0, $s1, $s2), [&PrivateVar];
	st_v4_private_s16	($s0, $s1, $s2, $s3), [&PrivateVar];
	st_private_s16	-1, [&PrivateVar];
	st_private_s16	WAVESIZE, [&PrivateVar];
	st_private_s16	$s0, [$s0+2];
	st_private_s16	$s0, [$s0+3];
	st_private_s16	$s0, [$s0+5];
	st_private_s16	$s0, [$s0+6];
	st_private_s16	$s0, [0];
	st_private_align(2)_s16	$s0, [&PrivateVar];
	st_private_align(4)_s16	$s0, [&PrivateVar];
	st_private_align(8)_s16	$s0, [&PrivateVar];
	st_private_align(16)_s16	$s0, [&PrivateVar];
	st_private_align(32)_s16	$s0, [&PrivateVar];
	st_private_align(64)_s16	$s0, [&PrivateVar];
	st_private_align(128)_s16	$s0, [&PrivateVar];
	st_private_align(256)_s16	$s0, [&PrivateVar];
	st_private_equiv(1)_s16	$s0, [&PrivateVar];
	st_private_equiv(2)_s16	$s0, [&PrivateVar];
	st_private_equiv(255)_s16	$s0, [&PrivateVar];
	// 
	// Next sample
	// 
	st_spill_s16	$s0, [%SpillVar];
	// 
	st_v2_spill_s16	($s0, $s0), [%SpillVar];
	st_v3_spill_s16	($s0, $s0, $s0), [%SpillVar];
	st_v4_spill_s16	($s0, $s0, $s0, $s0), [%SpillVar];
	st_v2_spill_s16	(WAVESIZE, -1), [%SpillVar];
	st_v3_spill_s16	(WAVESIZE, -1, -1), [%SpillVar];
	st_v4_spill_s16	(WAVESIZE, -1, -1, -1), [%SpillVar];
	st_v2_spill_s16	(0, $s0), [%SpillVar];
	st_v3_spill_s16	(0, -1, $s0), [%SpillVar];
	st_v4_spill_s16	(0, -1, $s0, $s0), [%SpillVar];
	st_v2_spill_s16	($s0, $s1), [%SpillVar];
	st_v3_spill_s16	($s0, $s1, $s2), [%SpillVar];
	st_v4_spill_s16	($s0, $s1, $s2, $s3), [%SpillVar];
	st_spill_s16	-1, [%SpillVar];
	st_spill_s16	WAVESIZE, [%SpillVar];
	st_spill_align(2)_s16	$s0, [%SpillVar];
	st_spill_align(4)_s16	$s0, [%SpillVar];
	st_spill_align(8)_s16	$s0, [%SpillVar];
	st_spill_align(16)_s16	$s0, [%SpillVar];
	st_spill_align(32)_s16	$s0, [%SpillVar];
	st_spill_align(64)_s16	$s0, [%SpillVar];
	st_spill_align(128)_s16	$s0, [%SpillVar];
	st_spill_align(256)_s16	$s0, [%SpillVar];
	st_spill_equiv(1)_s16	$s0, [%SpillVar];
	st_spill_equiv(2)_s16	$s0, [%SpillVar];
	st_spill_equiv(255)_s16	$s0, [%SpillVar];
	// 
	// Next sample
	// 
	st_s32	$s0, [$d0+2];
	// 
	st_v2_s32	($s0, $s0), [$d0+2];
	st_v3_s32	($s0, $s0, $s0), [$d0+2];
	st_v4_s32	($s0, $s0, $s0, $s0), [$d0+2];
	st_v2_s32	(WAVESIZE, -1), [$d0+2];
	st_v3_s32	(WAVESIZE, -1, -1), [$d0+2];
	st_v4_s32	(WAVESIZE, -1, -1, -1), [$d0+2];
	st_v2_s32	(0, $s0), [$d0+2];
	st_v3_s32	(0, -1, $s0), [$d0+2];
	st_v4_s32	(0, -1, $s0, $s0), [$d0+2];
	st_v2_s32	($s0, $s1), [$d0+2];
	st_v3_s32	($s0, $s1, $s2), [$d0+2];
	st_v4_s32	($s0, $s1, $s2, $s3), [$d0+2];
	st_s32	-1, [$d0+2];
	st_s32	WAVESIZE, [$d0+2];
	st_s32	$s0, [$d0+3];
	st_s32	$s0, [$d0+5];
	st_s32	$s0, [$d0+6];
	st_s32	$s0, [0];
	st_align(2)_s32	$s0, [$d0+2];
	st_align(4)_s32	$s0, [$d0+2];
	st_align(8)_s32	$s0, [$d0+2];
	st_align(16)_s32	$s0, [$d0+2];
	st_align(32)_s32	$s0, [$d0+2];
	st_align(64)_s32	$s0, [$d0+2];
	st_align(128)_s32	$s0, [$d0+2];
	st_align(256)_s32	$s0, [$d0+2];
	st_equiv(1)_s32	$s0, [$d0+2];
	st_equiv(2)_s32	$s0, [$d0+2];
	st_equiv(255)_s32	$s0, [$d0+2];
	// 
	// Next sample
	// 
	st_global_s32	$s0, [&GlobalVar];
	// 
	st_v2_global_s32	($s0, $s0), [&GlobalVar];
	st_v3_global_s32	($s0, $s0, $s0), [&GlobalVar];
	st_v4_global_s32	($s0, $s0, $s0, $s0), [&GlobalVar];
	st_v2_global_s32	(WAVESIZE, -1), [&GlobalVar];
	st_v3_global_s32	(WAVESIZE, -1, -1), [&GlobalVar];
	st_v4_global_s32	(WAVESIZE, -1, -1, -1), [&GlobalVar];
	st_v2_global_s32	(0, $s0), [&GlobalVar];
	st_v3_global_s32	(0, -1, $s0), [&GlobalVar];
	st_v4_global_s32	(0, -1, $s0, $s0), [&GlobalVar];
	st_v2_global_s32	($s0, $s1), [&GlobalVar];
	st_v3_global_s32	($s0, $s1, $s2), [&GlobalVar];
	st_v4_global_s32	($s0, $s1, $s2, $s3), [&GlobalVar];
	st_global_s32	-1, [&GlobalVar];
	st_global_s32	WAVESIZE, [&GlobalVar];
	st_global_s32	$s0, [$d0+2];
	st_global_s32	$s0, [$d0+3];
	st_global_s32	$s0, [$d0+5];
	st_global_s32	$s0, [$d0+6];
	st_global_s32	$s0, [0];
	st_global_align(2)_s32	$s0, [&GlobalVar];
	st_global_align(4)_s32	$s0, [&GlobalVar];
	st_global_align(8)_s32	$s0, [&GlobalVar];
	st_global_align(16)_s32	$s0, [&GlobalVar];
	st_global_align(32)_s32	$s0, [&GlobalVar];
	st_global_align(64)_s32	$s0, [&GlobalVar];
	st_global_align(128)_s32	$s0, [&GlobalVar];
	st_global_align(256)_s32	$s0, [&GlobalVar];
	st_global_equiv(1)_s32	$s0, [&GlobalVar];
	st_global_equiv(2)_s32	$s0, [&GlobalVar];
	st_global_equiv(255)_s32	$s0, [&GlobalVar];
	// 
	// Next sample
	// 
	st_group_s32	$s0, [&GroupVar];
	// 
	st_v2_group_s32	($s0, $s0), [&GroupVar];
	st_v3_group_s32	($s0, $s0, $s0), [&GroupVar];
	st_v4_group_s32	($s0, $s0, $s0, $s0), [&GroupVar];
	st_v2_group_s32	(WAVESIZE, -1), [&GroupVar];
	st_v3_group_s32	(WAVESIZE, -1, -1), [&GroupVar];
	st_v4_group_s32	(WAVESIZE, -1, -1, -1), [&GroupVar];
	st_v2_group_s32	(0, $s0), [&GroupVar];
	st_v3_group_s32	(0, -1, $s0), [&GroupVar];
	st_v4_group_s32	(0, -1, $s0, $s0), [&GroupVar];
	st_v2_group_s32	($s0, $s1), [&GroupVar];
	st_v3_group_s32	($s0, $s1, $s2), [&GroupVar];
	st_v4_group_s32	($s0, $s1, $s2, $s3), [&GroupVar];
	st_group_s32	-1, [&GroupVar];
	st_group_s32	WAVESIZE, [&GroupVar];
	st_group_s32	$s0, [$s0+2];
	st_group_s32	$s0, [$s0+3];
	st_group_s32	$s0, [$s0+5];
	st_group_s32	$s0, [$s0+6];
	st_group_s32	$s0, [0];
	st_group_align(2)_s32	$s0, [&GroupVar];
	st_group_align(4)_s32	$s0, [&GroupVar];
	st_group_align(8)_s32	$s0, [&GroupVar];
	st_group_align(16)_s32	$s0, [&GroupVar];
	st_group_align(32)_s32	$s0, [&GroupVar];
	st_group_align(64)_s32	$s0, [&GroupVar];
	st_group_align(128)_s32	$s0, [&GroupVar];
	st_group_align(256)_s32	$s0, [&GroupVar];
	st_group_equiv(1)_s32	$s0, [&GroupVar];
	st_group_equiv(2)_s32	$s0, [&GroupVar];
	st_group_equiv(255)_s32	$s0, [&GroupVar];
	// 
	// Next sample
	// 
	st_private_s32	$s0, [&PrivateVar];
	// 
	st_v2_private_s32	($s0, $s0), [&PrivateVar];
	st_v3_private_s32	($s0, $s0, $s0), [&PrivateVar];
	st_v4_private_s32	($s0, $s0, $s0, $s0), [&PrivateVar];
	st_v2_private_s32	(WAVESIZE, -1), [&PrivateVar];
	st_v3_private_s32	(WAVESIZE, -1, -1), [&PrivateVar];
	st_v4_private_s32	(WAVESIZE, -1, -1, -1), [&PrivateVar];
	st_v2_private_s32	(0, $s0), [&PrivateVar];
	st_v3_private_s32	(0, -1, $s0), [&PrivateVar];
	st_v4_private_s32	(0, -1, $s0, $s0), [&PrivateVar];
	st_v2_private_s32	($s0, $s1), [&PrivateVar];
	st_v3_private_s32	($s0, $s1, $s2), [&PrivateVar];
	st_v4_private_s32	($s0, $s1, $s2, $s3), [&PrivateVar];
	st_private_s32	-1, [&PrivateVar];
	st_private_s32	WAVESIZE, [&PrivateVar];
	st_private_s32	$s0, [$s0+2];
	st_private_s32	$s0, [$s0+3];
	st_private_s32	$s0, [$s0+5];
	st_private_s32	$s0, [$s0+6];
	st_private_s32	$s0, [0];
	st_private_align(2)_s32	$s0, [&PrivateVar];
	st_private_align(4)_s32	$s0, [&PrivateVar];
	st_private_align(8)_s32	$s0, [&PrivateVar];
	st_private_align(16)_s32	$s0, [&PrivateVar];
	st_private_align(32)_s32	$s0, [&PrivateVar];
	st_private_align(64)_s32	$s0, [&PrivateVar];
	st_private_align(128)_s32	$s0, [&PrivateVar];
	st_private_align(256)_s32	$s0, [&PrivateVar];
	st_private_equiv(1)_s32	$s0, [&PrivateVar];
	st_private_equiv(2)_s32	$s0, [&PrivateVar];
	st_private_equiv(255)_s32	$s0, [&PrivateVar];
	// 
	// Next sample
	// 
	st_spill_s32	$s0, [%SpillVar];
	// 
	st_v2_spill_s32	($s0, $s0), [%SpillVar];
	st_v3_spill_s32	($s0, $s0, $s0), [%SpillVar];
	st_v4_spill_s32	($s0, $s0, $s0, $s0), [%SpillVar];
	st_v2_spill_s32	(WAVESIZE, -1), [%SpillVar];
	st_v3_spill_s32	(WAVESIZE, -1, -1), [%SpillVar];
	st_v4_spill_s32	(WAVESIZE, -1, -1, -1), [%SpillVar];
	st_v2_spill_s32	(0, $s0), [%SpillVar];
	st_v3_spill_s32	(0, -1, $s0), [%SpillVar];
	st_v4_spill_s32	(0, -1, $s0, $s0), [%SpillVar];
	st_v2_spill_s32	($s0, $s1), [%SpillVar];
	st_v3_spill_s32	($s0, $s1, $s2), [%SpillVar];
	st_v4_spill_s32	($s0, $s1, $s2, $s3), [%SpillVar];
	st_spill_s32	-1, [%SpillVar];
	st_spill_s32	WAVESIZE, [%SpillVar];
	st_spill_align(2)_s32	$s0, [%SpillVar];
	st_spill_align(4)_s32	$s0, [%SpillVar];
	st_spill_align(8)_s32	$s0, [%SpillVar];
	st_spill_align(16)_s32	$s0, [%SpillVar];
	st_spill_align(32)_s32	$s0, [%SpillVar];
	st_spill_align(64)_s32	$s0, [%SpillVar];
	st_spill_align(128)_s32	$s0, [%SpillVar];
	st_spill_align(256)_s32	$s0, [%SpillVar];
	st_spill_equiv(1)_s32	$s0, [%SpillVar];
	st_spill_equiv(2)_s32	$s0, [%SpillVar];
	st_spill_equiv(255)_s32	$s0, [%SpillVar];
	// 
	// Next sample
	// 
	st_s64	$d0, [$d0+2];
	// 
	st_v2_s64	($d0, $d0), [$d0+2];
	st_v3_s64	($d0, $d0, $d0), [$d0+2];
	st_v4_s64	($d0, $d0, $d0, $d0), [$d0+2];
	st_v2_s64	(WAVESIZE, -1), [$d0+2];
	st_v3_s64	(WAVESIZE, -1, -1), [$d0+2];
	st_v4_s64	(WAVESIZE, -1, -1, -1), [$d0+2];
	st_v2_s64	(0, $d0), [$d0+2];
	st_v3_s64	(0, -1, $d0), [$d0+2];
	st_v4_s64	(0, -1, $d0, $d0), [$d0+2];
	st_v2_s64	($d0, $d1), [$d0+2];
	st_v3_s64	($d0, $d1, $d2), [$d0+2];
	st_v4_s64	($d0, $d1, $d2, $d3), [$d0+2];
	st_s64	-1, [$d0+2];
	st_s64	WAVESIZE, [$d0+2];
	st_s64	$d0, [$d0+3];
	st_s64	$d0, [$d0+5];
	st_s64	$d0, [$d0+6];
	st_s64	$d0, [0];
	st_align(2)_s64	$d0, [$d0+2];
	st_align(4)_s64	$d0, [$d0+2];
	st_align(8)_s64	$d0, [$d0+2];
	st_align(16)_s64	$d0, [$d0+2];
	st_align(32)_s64	$d0, [$d0+2];
	st_align(64)_s64	$d0, [$d0+2];
	st_align(128)_s64	$d0, [$d0+2];
	st_align(256)_s64	$d0, [$d0+2];
	st_equiv(1)_s64	$d0, [$d0+2];
	st_equiv(2)_s64	$d0, [$d0+2];
	st_equiv(255)_s64	$d0, [$d0+2];
	// 
	// Next sample
	// 
	st_global_s64	$d0, [&GlobalVar];
	// 
	st_v2_global_s64	($d0, $d0), [&GlobalVar];
	st_v3_global_s64	($d0, $d0, $d0), [&GlobalVar];
	st_v4_global_s64	($d0, $d0, $d0, $d0), [&GlobalVar];
	st_v2_global_s64	(WAVESIZE, -1), [&GlobalVar];
	st_v3_global_s64	(WAVESIZE, -1, -1), [&GlobalVar];
	st_v4_global_s64	(WAVESIZE, -1, -1, -1), [&GlobalVar];
	st_v2_global_s64	(0, $d0), [&GlobalVar];
	st_v3_global_s64	(0, -1, $d0), [&GlobalVar];
	st_v4_global_s64	(0, -1, $d0, $d0), [&GlobalVar];
	st_v2_global_s64	($d0, $d1), [&GlobalVar];
	st_v3_global_s64	($d0, $d1, $d2), [&GlobalVar];
	st_v4_global_s64	($d0, $d1, $d2, $d3), [&GlobalVar];
	st_global_s64	-1, [&GlobalVar];
	st_global_s64	WAVESIZE, [&GlobalVar];
	st_global_s64	$d0, [$d0+2];
	st_global_s64	$d0, [$d0+3];
	st_global_s64	$d0, [$d0+5];
	st_global_s64	$d0, [$d0+6];
	st_global_s64	$d0, [0];
	st_global_align(2)_s64	$d0, [&GlobalVar];
	st_global_align(4)_s64	$d0, [&GlobalVar];
	st_global_align(8)_s64	$d0, [&GlobalVar];
	st_global_align(16)_s64	$d0, [&GlobalVar];
	st_global_align(32)_s64	$d0, [&GlobalVar];
	st_global_align(64)_s64	$d0, [&GlobalVar];
	st_global_align(128)_s64	$d0, [&GlobalVar];
	st_global_align(256)_s64	$d0, [&GlobalVar];
	st_global_equiv(1)_s64	$d0, [&GlobalVar];
	st_global_equiv(2)_s64	$d0, [&GlobalVar];
	st_global_equiv(255)_s64	$d0, [&GlobalVar];
	// 
	// Next sample
	// 
	st_group_s64	$d0, [&GroupVar];
	// 
	st_v2_group_s64	($d0, $d0), [&GroupVar];
	st_v3_group_s64	($d0, $d0, $d0), [&GroupVar];
	st_v4_group_s64	($d0, $d0, $d0, $d0), [&GroupVar];
	st_v2_group_s64	(WAVESIZE, -1), [&GroupVar];
	st_v3_group_s64	(WAVESIZE, -1, -1), [&GroupVar];
	st_v4_group_s64	(WAVESIZE, -1, -1, -1), [&GroupVar];
	st_v2_group_s64	(0, $d0), [&GroupVar];
	st_v3_group_s64	(0, -1, $d0), [&GroupVar];
	st_v4_group_s64	(0, -1, $d0, $d0), [&GroupVar];
	st_v2_group_s64	($d0, $d1), [&GroupVar];
	st_v3_group_s64	($d0, $d1, $d2), [&GroupVar];
	st_v4_group_s64	($d0, $d1, $d2, $d3), [&GroupVar];
	st_group_s64	-1, [&GroupVar];
	st_group_s64	WAVESIZE, [&GroupVar];
	st_group_s64	$d0, [$s0+2];
	st_group_s64	$d0, [$s0+3];
	st_group_s64	$d0, [$s0+5];
	st_group_s64	$d0, [$s0+6];
	st_group_s64	$d0, [0];
	st_group_align(2)_s64	$d0, [&GroupVar];
	st_group_align(4)_s64	$d0, [&GroupVar];
	st_group_align(8)_s64	$d0, [&GroupVar];
	st_group_align(16)_s64	$d0, [&GroupVar];
	st_group_align(32)_s64	$d0, [&GroupVar];
	st_group_align(64)_s64	$d0, [&GroupVar];
	st_group_align(128)_s64	$d0, [&GroupVar];
	st_group_align(256)_s64	$d0, [&GroupVar];
	st_group_equiv(1)_s64	$d0, [&GroupVar];
	st_group_equiv(2)_s64	$d0, [&GroupVar];
	st_group_equiv(255)_s64	$d0, [&GroupVar];
	// 
	// Next sample
	// 
	st_private_s64	$d0, [&PrivateVar];
	// 
	st_v2_private_s64	($d0, $d0), [&PrivateVar];
	st_v3_private_s64	($d0, $d0, $d0), [&PrivateVar];
	st_v4_private_s64	($d0, $d0, $d0, $d0), [&PrivateVar];
	st_v2_private_s64	(WAVESIZE, -1), [&PrivateVar];
	st_v3_private_s64	(WAVESIZE, -1, -1), [&PrivateVar];
	st_v4_private_s64	(WAVESIZE, -1, -1, -1), [&PrivateVar];
	st_v2_private_s64	(0, $d0), [&PrivateVar];
	st_v3_private_s64	(0, -1, $d0), [&PrivateVar];
	st_v4_private_s64	(0, -1, $d0, $d0), [&PrivateVar];
	st_v2_private_s64	($d0, $d1), [&PrivateVar];
	st_v3_private_s64	($d0, $d1, $d2), [&PrivateVar];
	st_v4_private_s64	($d0, $d1, $d2, $d3), [&PrivateVar];
	st_private_s64	-1, [&PrivateVar];
	st_private_s64	WAVESIZE, [&PrivateVar];
	st_private_s64	$d0, [$s0+2];
	st_private_s64	$d0, [$s0+3];
	st_private_s64	$d0, [$s0+5];
	st_private_s64	$d0, [$s0+6];
	st_private_s64	$d0, [0];
	st_private_align(2)_s64	$d0, [&PrivateVar];
	st_private_align(4)_s64	$d0, [&PrivateVar];
	st_private_align(8)_s64	$d0, [&PrivateVar];
	st_private_align(16)_s64	$d0, [&PrivateVar];
	st_private_align(32)_s64	$d0, [&PrivateVar];
	st_private_align(64)_s64	$d0, [&PrivateVar];
	st_private_align(128)_s64	$d0, [&PrivateVar];
	st_private_align(256)_s64	$d0, [&PrivateVar];
	st_private_equiv(1)_s64	$d0, [&PrivateVar];
	st_private_equiv(2)_s64	$d0, [&PrivateVar];
	st_private_equiv(255)_s64	$d0, [&PrivateVar];
	// 
	// Next sample
	// 
	st_spill_s64	$d0, [%SpillVar];
	// 
	st_v2_spill_s64	($d0, $d0), [%SpillVar];
	st_v3_spill_s64	($d0, $d0, $d0), [%SpillVar];
	st_v4_spill_s64	($d0, $d0, $d0, $d0), [%SpillVar];
	st_v2_spill_s64	(WAVESIZE, -1), [%SpillVar];
	st_v3_spill_s64	(WAVESIZE, -1, -1), [%SpillVar];
	st_v4_spill_s64	(WAVESIZE, -1, -1, -1), [%SpillVar];
	st_v2_spill_s64	(0, $d0), [%SpillVar];
	st_v3_spill_s64	(0, -1, $d0), [%SpillVar];
	st_v4_spill_s64	(0, -1, $d0, $d0), [%SpillVar];
	st_v2_spill_s64	($d0, $d1), [%SpillVar];
	st_v3_spill_s64	($d0, $d1, $d2), [%SpillVar];
	st_v4_spill_s64	($d0, $d1, $d2, $d3), [%SpillVar];
	st_spill_s64	-1, [%SpillVar];
	st_spill_s64	WAVESIZE, [%SpillVar];
	st_spill_align(2)_s64	$d0, [%SpillVar];
	st_spill_align(4)_s64	$d0, [%SpillVar];
	st_spill_align(8)_s64	$d0, [%SpillVar];
	st_spill_align(16)_s64	$d0, [%SpillVar];
	st_spill_align(32)_s64	$d0, [%SpillVar];
	st_spill_align(64)_s64	$d0, [%SpillVar];
	st_spill_align(128)_s64	$d0, [%SpillVar];
	st_spill_align(256)_s64	$d0, [%SpillVar];
	st_spill_equiv(1)_s64	$d0, [%SpillVar];
	st_spill_equiv(2)_s64	$d0, [%SpillVar];
	st_spill_equiv(255)_s64	$d0, [%SpillVar];
	// 
	// Next sample
	// 
	st_f16	$s0, [$d0+2];
	// 
	st_v2_f16	($s0, $s0), [$d0+2];
	st_v3_f16	($s0, $s0, $s0), [$d0+2];
	st_v4_f16	($s0, $s0, $s0, $s0), [$d0+2];
	st_v2_f16	(0H0000, $s0), [$d0+2];
	st_v3_f16	(0H0000, 0Hffff, $s0), [$d0+2];
	st_v4_f16	(0H0000, 0Hffff, $s0, $s0), [$d0+2];
	st_v2_f16	($s0, $s1), [$d0+2];
	st_v3_f16	($s0, $s1, $s2), [$d0+2];
	st_v4_f16	($s0, $s1, $s2, $s3), [$d0+2];
	st_f16	0Hffff, [$d0+2];
	st_f16	$s0, [$d0+3];
	st_f16	$s0, [$d0+5];
	st_f16	$s0, [$d0+6];
	st_f16	$s0, [0];
	st_align(2)_f16	$s0, [$d0+2];
	st_align(4)_f16	$s0, [$d0+2];
	st_align(8)_f16	$s0, [$d0+2];
	st_align(16)_f16	$s0, [$d0+2];
	st_align(32)_f16	$s0, [$d0+2];
	st_align(64)_f16	$s0, [$d0+2];
	st_align(128)_f16	$s0, [$d0+2];
	st_align(256)_f16	$s0, [$d0+2];
	st_equiv(1)_f16	$s0, [$d0+2];
	st_equiv(2)_f16	$s0, [$d0+2];
	st_equiv(255)_f16	$s0, [$d0+2];
	// 
	// Next sample
	// 
	st_global_f16	$s0, [&GlobalVar];
	// 
	st_v2_global_f16	($s0, $s0), [&GlobalVar];
	st_v3_global_f16	($s0, $s0, $s0), [&GlobalVar];
	st_v4_global_f16	($s0, $s0, $s0, $s0), [&GlobalVar];
	st_v2_global_f16	(0H0000, $s0), [&GlobalVar];
	st_v3_global_f16	(0H0000, 0Hffff, $s0), [&GlobalVar];
	st_v4_global_f16	(0H0000, 0Hffff, $s0, $s0), [&GlobalVar];
	st_v2_global_f16	($s0, $s1), [&GlobalVar];
	st_v3_global_f16	($s0, $s1, $s2), [&GlobalVar];
	st_v4_global_f16	($s0, $s1, $s2, $s3), [&GlobalVar];
	st_global_f16	0Hffff, [&GlobalVar];
	st_global_f16	$s0, [$d0+2];
	st_global_f16	$s0, [$d0+3];
	st_global_f16	$s0, [$d0+5];
	st_global_f16	$s0, [$d0+6];
	st_global_f16	$s0, [0];
	st_global_align(2)_f16	$s0, [&GlobalVar];
	st_global_align(4)_f16	$s0, [&GlobalVar];
	st_global_align(8)_f16	$s0, [&GlobalVar];
	st_global_align(16)_f16	$s0, [&GlobalVar];
	st_global_align(32)_f16	$s0, [&GlobalVar];
	st_global_align(64)_f16	$s0, [&GlobalVar];
	st_global_align(128)_f16	$s0, [&GlobalVar];
	st_global_align(256)_f16	$s0, [&GlobalVar];
	st_global_equiv(1)_f16	$s0, [&GlobalVar];
	st_global_equiv(2)_f16	$s0, [&GlobalVar];
	st_global_equiv(255)_f16	$s0, [&GlobalVar];
	// 
	// Next sample
	// 
	st_group_f16	$s0, [&GroupVar];
	// 
	st_v2_group_f16	($s0, $s0), [&GroupVar];
	st_v3_group_f16	($s0, $s0, $s0), [&GroupVar];
	st_v4_group_f16	($s0, $s0, $s0, $s0), [&GroupVar];
	st_v2_group_f16	(0H0000, $s0), [&GroupVar];
	st_v3_group_f16	(0H0000, 0Hffff, $s0), [&GroupVar];
	st_v4_group_f16	(0H0000, 0Hffff, $s0, $s0), [&GroupVar];
	st_v2_group_f16	($s0, $s1), [&GroupVar];
	st_v3_group_f16	($s0, $s1, $s2), [&GroupVar];
	st_v4_group_f16	($s0, $s1, $s2, $s3), [&GroupVar];
	st_group_f16	0Hffff, [&GroupVar];
	st_group_f16	$s0, [$s0+2];
	st_group_f16	$s0, [$s0+3];
	st_group_f16	$s0, [$s0+5];
	st_group_f16	$s0, [$s0+6];
	st_group_f16	$s0, [0];
	st_group_align(2)_f16	$s0, [&GroupVar];
	st_group_align(4)_f16	$s0, [&GroupVar];
	st_group_align(8)_f16	$s0, [&GroupVar];
	st_group_align(16)_f16	$s0, [&GroupVar];
	st_group_align(32)_f16	$s0, [&GroupVar];
	st_group_align(64)_f16	$s0, [&GroupVar];
	st_group_align(128)_f16	$s0, [&GroupVar];
	st_group_align(256)_f16	$s0, [&GroupVar];
	st_group_equiv(1)_f16	$s0, [&GroupVar];
	st_group_equiv(2)_f16	$s0, [&GroupVar];
	st_group_equiv(255)_f16	$s0, [&GroupVar];
	// 
	// Next sample
	// 
	st_private_f16	$s0, [&PrivateVar];
	// 
	st_v2_private_f16	($s0, $s0), [&PrivateVar];
	st_v3_private_f16	($s0, $s0, $s0), [&PrivateVar];
	st_v4_private_f16	($s0, $s0, $s0, $s0), [&PrivateVar];
	st_v2_private_f16	(0H0000, $s0), [&PrivateVar];
	st_v3_private_f16	(0H0000, 0Hffff, $s0), [&PrivateVar];
	st_v4_private_f16	(0H0000, 0Hffff, $s0, $s0), [&PrivateVar];
	st_v2_private_f16	($s0, $s1), [&PrivateVar];
	st_v3_private_f16	($s0, $s1, $s2), [&PrivateVar];
	st_v4_private_f16	($s0, $s1, $s2, $s3), [&PrivateVar];
	st_private_f16	0Hffff, [&PrivateVar];
	st_private_f16	$s0, [$s0+2];
	st_private_f16	$s0, [$s0+3];
	st_private_f16	$s0, [$s0+5];
	st_private_f16	$s0, [$s0+6];
	st_private_f16	$s0, [0];
	st_private_align(2)_f16	$s0, [&PrivateVar];
	st_private_align(4)_f16	$s0, [&PrivateVar];
	st_private_align(8)_f16	$s0, [&PrivateVar];
	st_private_align(16)_f16	$s0, [&PrivateVar];
	st_private_align(32)_f16	$s0, [&PrivateVar];
	st_private_align(64)_f16	$s0, [&PrivateVar];
	st_private_align(128)_f16	$s0, [&PrivateVar];
	st_private_align(256)_f16	$s0, [&PrivateVar];
	st_private_equiv(1)_f16	$s0, [&PrivateVar];
	st_private_equiv(2)_f16	$s0, [&PrivateVar];
	st_private_equiv(255)_f16	$s0, [&PrivateVar];
	// 
	// Next sample
	// 
	st_spill_f16	$s0, [%SpillVar];
	// 
	st_v2_spill_f16	($s0, $s0), [%SpillVar];
	st_v3_spill_f16	($s0, $s0, $s0), [%SpillVar];
	st_v4_spill_f16	($s0, $s0, $s0, $s0), [%SpillVar];
	st_v2_spill_f16	(0H0000, $s0), [%SpillVar];
	st_v3_spill_f16	(0H0000, 0Hffff, $s0), [%SpillVar];
	st_v4_spill_f16	(0H0000, 0Hffff, $s0, $s0), [%SpillVar];
	st_v2_spill_f16	($s0, $s1), [%SpillVar];
	st_v3_spill_f16	($s0, $s1, $s2), [%SpillVar];
	st_v4_spill_f16	($s0, $s1, $s2, $s3), [%SpillVar];
	st_spill_f16	0Hffff, [%SpillVar];
	st_spill_align(2)_f16	$s0, [%SpillVar];
	st_spill_align(4)_f16	$s0, [%SpillVar];
	st_spill_align(8)_f16	$s0, [%SpillVar];
	st_spill_align(16)_f16	$s0, [%SpillVar];
	st_spill_align(32)_f16	$s0, [%SpillVar];
	st_spill_align(64)_f16	$s0, [%SpillVar];
	st_spill_align(128)_f16	$s0, [%SpillVar];
	st_spill_align(256)_f16	$s0, [%SpillVar];
	st_spill_equiv(1)_f16	$s0, [%SpillVar];
	st_spill_equiv(2)_f16	$s0, [%SpillVar];
	st_spill_equiv(255)_f16	$s0, [%SpillVar];
	// 
	// Next sample
	// 
	st_f32	$s0, [$d0+2];
	// 
	st_v2_f32	($s0, $s0), [$d0+2];
	st_v3_f32	($s0, $s0, $s0), [$d0+2];
	st_v4_f32	($s0, $s0, $s0, $s0), [$d0+2];
	st_v2_f32	(0F00000000, $s0), [$d0+2];
	st_v3_f32	(0F00000000, 0Fffffffff, $s0), [$d0+2];
	st_v4_f32	(0F00000000, 0Fffffffff, $s0, $s0), [$d0+2];
	st_v2_f32	($s0, $s1), [$d0+2];
	st_v3_f32	($s0, $s1, $s2), [$d0+2];
	st_v4_f32	($s0, $s1, $s2, $s3), [$d0+2];
	st_f32	0Fffffffff, [$d0+2];
	st_f32	$s0, [$d0+3];
	st_f32	$s0, [$d0+5];
	st_f32	$s0, [$d0+6];
	st_f32	$s0, [0];
	st_align(2)_f32	$s0, [$d0+2];
	st_align(4)_f32	$s0, [$d0+2];
	st_align(8)_f32	$s0, [$d0+2];
	st_align(16)_f32	$s0, [$d0+2];
	st_align(32)_f32	$s0, [$d0+2];
	st_align(64)_f32	$s0, [$d0+2];
	st_align(128)_f32	$s0, [$d0+2];
	st_align(256)_f32	$s0, [$d0+2];
	st_equiv(1)_f32	$s0, [$d0+2];
	st_equiv(2)_f32	$s0, [$d0+2];
	st_equiv(255)_f32	$s0, [$d0+2];
	// 
	// Next sample
	// 
	st_global_f32	$s0, [&GlobalVar];
	// 
	st_v2_global_f32	($s0, $s0), [&GlobalVar];
	st_v3_global_f32	($s0, $s0, $s0), [&GlobalVar];
	st_v4_global_f32	($s0, $s0, $s0, $s0), [&GlobalVar];
	st_v2_global_f32	(0F00000000, $s0), [&GlobalVar];
	st_v3_global_f32	(0F00000000, 0Fffffffff, $s0), [&GlobalVar];
	st_v4_global_f32	(0F00000000, 0Fffffffff, $s0, $s0), [&GlobalVar];
	st_v2_global_f32	($s0, $s1), [&GlobalVar];
	st_v3_global_f32	($s0, $s1, $s2), [&GlobalVar];
	st_v4_global_f32	($s0, $s1, $s2, $s3), [&GlobalVar];
	st_global_f32	0Fffffffff, [&GlobalVar];
	st_global_f32	$s0, [$d0+2];
	st_global_f32	$s0, [$d0+3];
	st_global_f32	$s0, [$d0+5];
	st_global_f32	$s0, [$d0+6];
	st_global_f32	$s0, [0];
	st_global_align(2)_f32	$s0, [&GlobalVar];
	st_global_align(4)_f32	$s0, [&GlobalVar];
	st_global_align(8)_f32	$s0, [&GlobalVar];
	st_global_align(16)_f32	$s0, [&GlobalVar];
	st_global_align(32)_f32	$s0, [&GlobalVar];
	st_global_align(64)_f32	$s0, [&GlobalVar];
	st_global_align(128)_f32	$s0, [&GlobalVar];
	st_global_align(256)_f32	$s0, [&GlobalVar];
	st_global_equiv(1)_f32	$s0, [&GlobalVar];
	st_global_equiv(2)_f32	$s0, [&GlobalVar];
	st_global_equiv(255)_f32	$s0, [&GlobalVar];
	// 
	// Next sample
	// 
	st_group_f32	$s0, [&GroupVar];
	// 
	st_v2_group_f32	($s0, $s0), [&GroupVar];
	st_v3_group_f32	($s0, $s0, $s0), [&GroupVar];
	st_v4_group_f32	($s0, $s0, $s0, $s0), [&GroupVar];
	st_v2_group_f32	(0F00000000, $s0), [&GroupVar];
	st_v3_group_f32	(0F00000000, 0Fffffffff, $s0), [&GroupVar];
	st_v4_group_f32	(0F00000000, 0Fffffffff, $s0, $s0), [&GroupVar];
	st_v2_group_f32	($s0, $s1), [&GroupVar];
	st_v3_group_f32	($s0, $s1, $s2), [&GroupVar];
	st_v4_group_f32	($s0, $s1, $s2, $s3), [&GroupVar];
	st_group_f32	0Fffffffff, [&GroupVar];
	st_group_f32	$s0, [$s0+2];
	st_group_f32	$s0, [$s0+3];
	st_group_f32	$s0, [$s0+5];
	st_group_f32	$s0, [$s0+6];
	st_group_f32	$s0, [0];
	st_group_align(2)_f32	$s0, [&GroupVar];
	st_group_align(4)_f32	$s0, [&GroupVar];
	st_group_align(8)_f32	$s0, [&GroupVar];
	st_group_align(16)_f32	$s0, [&GroupVar];
	st_group_align(32)_f32	$s0, [&GroupVar];
	st_group_align(64)_f32	$s0, [&GroupVar];
	st_group_align(128)_f32	$s0, [&GroupVar];
	st_group_align(256)_f32	$s0, [&GroupVar];
	st_group_equiv(1)_f32	$s0, [&GroupVar];
	st_group_equiv(2)_f32	$s0, [&GroupVar];
	st_group_equiv(255)_f32	$s0, [&GroupVar];
	// 
	// Next sample
	// 
	st_private_f32	$s0, [&PrivateVar];
	// 
	st_v2_private_f32	($s0, $s0), [&PrivateVar];
	st_v3_private_f32	($s0, $s0, $s0), [&PrivateVar];
	st_v4_private_f32	($s0, $s0, $s0, $s0), [&PrivateVar];
	st_v2_private_f32	(0F00000000, $s0), [&PrivateVar];
	st_v3_private_f32	(0F00000000, 0Fffffffff, $s0), [&PrivateVar];
	st_v4_private_f32	(0F00000000, 0Fffffffff, $s0, $s0), [&PrivateVar];
	st_v2_private_f32	($s0, $s1), [&PrivateVar];
	st_v3_private_f32	($s0, $s1, $s2), [&PrivateVar];
	st_v4_private_f32	($s0, $s1, $s2, $s3), [&PrivateVar];
	st_private_f32	0Fffffffff, [&PrivateVar];
	st_private_f32	$s0, [$s0+2];
	st_private_f32	$s0, [$s0+3];
	st_private_f32	$s0, [$s0+5];
	st_private_f32	$s0, [$s0+6];
	st_private_f32	$s0, [0];
	st_private_align(2)_f32	$s0, [&PrivateVar];
	st_private_align(4)_f32	$s0, [&PrivateVar];
	st_private_align(8)_f32	$s0, [&PrivateVar];
	st_private_align(16)_f32	$s0, [&PrivateVar];
	st_private_align(32)_f32	$s0, [&PrivateVar];
	st_private_align(64)_f32	$s0, [&PrivateVar];
	st_private_align(128)_f32	$s0, [&PrivateVar];
	st_private_align(256)_f32	$s0, [&PrivateVar];
	st_private_equiv(1)_f32	$s0, [&PrivateVar];
	st_private_equiv(2)_f32	$s0, [&PrivateVar];
	st_private_equiv(255)_f32	$s0, [&PrivateVar];
	// 
	// Next sample
	// 
	st_spill_f32	$s0, [%SpillVar];
	// 
	st_v2_spill_f32	($s0, $s0), [%SpillVar];
	st_v3_spill_f32	($s0, $s0, $s0), [%SpillVar];
	st_v4_spill_f32	($s0, $s0, $s0, $s0), [%SpillVar];
	st_v2_spill_f32	(0F00000000, $s0), [%SpillVar];
	st_v3_spill_f32	(0F00000000, 0Fffffffff, $s0), [%SpillVar];
	st_v4_spill_f32	(0F00000000, 0Fffffffff, $s0, $s0), [%SpillVar];
	st_v2_spill_f32	($s0, $s1), [%SpillVar];
	st_v3_spill_f32	($s0, $s1, $s2), [%SpillVar];
	st_v4_spill_f32	($s0, $s1, $s2, $s3), [%SpillVar];
	st_spill_f32	0Fffffffff, [%SpillVar];
	st_spill_align(2)_f32	$s0, [%SpillVar];
	st_spill_align(4)_f32	$s0, [%SpillVar];
	st_spill_align(8)_f32	$s0, [%SpillVar];
	st_spill_align(16)_f32	$s0, [%SpillVar];
	st_spill_align(32)_f32	$s0, [%SpillVar];
	st_spill_align(64)_f32	$s0, [%SpillVar];
	st_spill_align(128)_f32	$s0, [%SpillVar];
	st_spill_align(256)_f32	$s0, [%SpillVar];
	st_spill_equiv(1)_f32	$s0, [%SpillVar];
	st_spill_equiv(2)_f32	$s0, [%SpillVar];
	st_spill_equiv(255)_f32	$s0, [%SpillVar];
	// 
	// Next sample
	// 
	st_b128	$q0, [$d0+2];
	// 
	st_v2_b128	($q0, $q0), [$d0+2];
	st_v3_b128	($q0, $q0, $q0), [$d0+2];
	st_v4_b128	($q0, $q0, $q0, $q0), [$d0+2];
	st_v2_b128	(u8x16(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0), u8x16(0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255)), [$d0+2];
	st_v3_b128	(u8x16(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0), u8x16(0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255), u8x16(0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255)), [$d0+2];
	st_v4_b128	(u8x16(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0), u8x16(0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255), u8x16(0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255), u8x16(0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255)), [$d0+2];
	st_v2_b128	(u8x16(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0), $q0), [$d0+2];
	st_v3_b128	(u8x16(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0), u8x16(0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255), $q0), [$d0+2];
	st_v4_b128	(u8x16(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0), u8x16(0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255), $q0, $q0), [$d0+2];
	st_v2_b128	($q0, $q1), [$d0+2];
	st_v3_b128	($q0, $q1, $q2), [$d0+2];
	st_v4_b128	($q0, $q1, $q2, $q3), [$d0+2];
	st_b128	u8x16(0,0,0,0,0,0,0,0,107,240,55,174,50,95,28,113), [$d0+2];
	st_b128	$q0, [$d0+3];
	st_b128	$q0, [$d0+5];
	st_b128	$q0, [$d0+6];
	st_b128	$q0, [0];
	st_align(2)_b128	$q0, [$d0+2];
	st_align(4)_b128	$q0, [$d0+2];
	st_align(8)_b128	$q0, [$d0+2];
	st_align(16)_b128	$q0, [$d0+2];
	st_align(32)_b128	$q0, [$d0+2];
	st_align(64)_b128	$q0, [$d0+2];
	st_align(128)_b128	$q0, [$d0+2];
	st_align(256)_b128	$q0, [$d0+2];
	st_equiv(1)_b128	$q0, [$d0+2];
	st_equiv(2)_b128	$q0, [$d0+2];
	st_equiv(255)_b128	$q0, [$d0+2];
	// 
	// Next sample
	// 
	st_global_b128	$q0, [&GlobalVar];
	// 
	st_v2_global_b128	($q0, $q0), [&GlobalVar];
	st_v3_global_b128	($q0, $q0, $q0), [&GlobalVar];
	st_v4_global_b128	($q0, $q0, $q0, $q0), [&GlobalVar];
	st_v2_global_b128	(u8x16(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0), u8x16(0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255)), [&GlobalVar];
	st_v3_global_b128	(u8x16(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0), u8x16(0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255), u8x16(0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255)), [&GlobalVar];
	st_v4_global_b128	(u8x16(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0), u8x16(0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255), u8x16(0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255), u8x16(0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255)), [&GlobalVar];
	st_v2_global_b128	(u8x16(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0), $q0), [&GlobalVar];
	st_v3_global_b128	(u8x16(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0), u8x16(0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255), $q0), [&GlobalVar];
	st_v4_global_b128	(u8x16(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0), u8x16(0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255), $q0, $q0), [&GlobalVar];
	st_v2_global_b128	($q0, $q1), [&GlobalVar];
	st_v3_global_b128	($q0, $q1, $q2), [&GlobalVar];
	st_v4_global_b128	($q0, $q1, $q2, $q3), [&GlobalVar];
	st_global_b128	u8x16(0,0,0,0,0,0,0,0,107,240,55,174,50,95,28,113), [&GlobalVar];
	st_global_b128	$q0, [$d0+2];
	st_global_b128	$q0, [$d0+3];
	st_global_b128	$q0, [$d0+5];
	st_global_b128	$q0, [$d0+6];
	st_global_b128	$q0, [0];
	st_global_align(2)_b128	$q0, [&GlobalVar];
	st_global_align(4)_b128	$q0, [&GlobalVar];
	st_global_align(8)_b128	$q0, [&GlobalVar];
	st_global_align(16)_b128	$q0, [&GlobalVar];
	st_global_align(32)_b128	$q0, [&GlobalVar];
	st_global_align(64)_b128	$q0, [&GlobalVar];
	st_global_align(128)_b128	$q0, [&GlobalVar];
	st_global_align(256)_b128	$q0, [&GlobalVar];
	st_global_equiv(1)_b128	$q0, [&GlobalVar];
	st_global_equiv(2)_b128	$q0, [&GlobalVar];
	st_global_equiv(255)_b128	$q0, [&GlobalVar];
	// 
	// Next sample
	// 
	st_group_b128	$q0, [&GroupVar];
	// 
	st_v2_group_b128	($q0, $q0), [&GroupVar];
	st_v3_group_b128	($q0, $q0, $q0), [&GroupVar];
	st_v4_group_b128	($q0, $q0, $q0, $q0), [&GroupVar];
	st_v2_group_b128	(u8x16(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0), u8x16(0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255)), [&GroupVar];
	st_v3_group_b128	(u8x16(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0), u8x16(0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255), u8x16(0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255)), [&GroupVar];
	st_v4_group_b128	(u8x16(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0), u8x16(0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255), u8x16(0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255), u8x16(0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255)), [&GroupVar];
	st_v2_group_b128	(u8x16(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0), $q0), [&GroupVar];
	st_v3_group_b128	(u8x16(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0), u8x16(0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255), $q0), [&GroupVar];
	st_v4_group_b128	(u8x16(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0), u8x16(0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255), $q0, $q0), [&GroupVar];
	st_v2_group_b128	($q0, $q1), [&GroupVar];
	st_v3_group_b128	($q0, $q1, $q2), [&GroupVar];
	st_v4_group_b128	($q0, $q1, $q2, $q3), [&GroupVar];
	st_group_b128	u8x16(0,0,0,0,0,0,0,0,107,240,55,174,50,95,28,113), [&GroupVar];
	st_group_b128	$q0, [$s0+2];
	st_group_b128	$q0, [$s0+3];
	st_group_b128	$q0, [$s0+5];
	st_group_b128	$q0, [$s0+6];
	st_group_b128	$q0, [0];
	st_group_align(2)_b128	$q0, [&GroupVar];
	st_group_align(4)_b128	$q0, [&GroupVar];
	st_group_align(8)_b128	$q0, [&GroupVar];
	st_group_align(16)_b128	$q0, [&GroupVar];
	st_group_align(32)_b128	$q0, [&GroupVar];
	st_group_align(64)_b128	$q0, [&GroupVar];
	st_group_align(128)_b128	$q0, [&GroupVar];
	st_group_align(256)_b128	$q0, [&GroupVar];
	st_group_equiv(1)_b128	$q0, [&GroupVar];
	st_group_equiv(2)_b128	$q0, [&GroupVar];
	st_group_equiv(255)_b128	$q0, [&GroupVar];
	// 
	// Next sample
	// 
	st_private_b128	$q0, [&PrivateVar];
	// 
	st_v2_private_b128	($q0, $q0), [&PrivateVar];
	st_v3_private_b128	($q0, $q0, $q0), [&PrivateVar];
	st_v4_private_b128	($q0, $q0, $q0, $q0), [&PrivateVar];
	st_v2_private_b128	(u8x16(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0), u8x16(0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255)), [&PrivateVar];
	st_v3_private_b128	(u8x16(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0), u8x16(0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255), u8x16(0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255)), [&PrivateVar];
	st_v4_private_b128	(u8x16(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0), u8x16(0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255), u8x16(0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255), u8x16(0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255)), [&PrivateVar];
	st_v2_private_b128	(u8x16(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0), $q0), [&PrivateVar];
	st_v3_private_b128	(u8x16(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0), u8x16(0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255), $q0), [&PrivateVar];
	st_v4_private_b128	(u8x16(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0), u8x16(0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255), $q0, $q0), [&PrivateVar];
	st_v2_private_b128	($q0, $q1), [&PrivateVar];
	st_v3_private_b128	($q0, $q1, $q2), [&PrivateVar];
	st_v4_private_b128	($q0, $q1, $q2, $q3), [&PrivateVar];
	st_private_b128	u8x16(0,0,0,0,0,0,0,0,107,240,55,174,50,95,28,113), [&PrivateVar];
	st_private_b128	$q0, [$s0+2];
	st_private_b128	$q0, [$s0+3];
	st_private_b128	$q0, [$s0+5];
	st_private_b128	$q0, [$s0+6];
	st_private_b128	$q0, [0];
	st_private_align(2)_b128	$q0, [&PrivateVar];
	st_private_align(4)_b128	$q0, [&PrivateVar];
	st_private_align(8)_b128	$q0, [&PrivateVar];
	st_private_align(16)_b128	$q0, [&PrivateVar];
	st_private_align(32)_b128	$q0, [&PrivateVar];
	st_private_align(64)_b128	$q0, [&PrivateVar];
	st_private_align(128)_b128	$q0, [&PrivateVar];
	st_private_align(256)_b128	$q0, [&PrivateVar];
	st_private_equiv(1)_b128	$q0, [&PrivateVar];
	st_private_equiv(2)_b128	$q0, [&PrivateVar];
	st_private_equiv(255)_b128	$q0, [&PrivateVar];
	// 
	// Next sample
	// 
	st_spill_b128	$q0, [%SpillVar];
	// 
	st_v2_spill_b128	($q0, $q0), [%SpillVar];
	st_v3_spill_b128	($q0, $q0, $q0), [%SpillVar];
	st_v4_spill_b128	($q0, $q0, $q0, $q0), [%SpillVar];
	st_v2_spill_b128	(u8x16(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0), u8x16(0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255)), [%SpillVar];
	st_v3_spill_b128	(u8x16(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0), u8x16(0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255), u8x16(0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255)), [%SpillVar];
	st_v4_spill_b128	(u8x16(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0), u8x16(0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255), u8x16(0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255), u8x16(0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255)), [%SpillVar];
	st_v2_spill_b128	(u8x16(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0), $q0), [%SpillVar];
	st_v3_spill_b128	(u8x16(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0), u8x16(0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255), $q0), [%SpillVar];
	st_v4_spill_b128	(u8x16(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0), u8x16(0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255), $q0, $q0), [%SpillVar];
	st_v2_spill_b128	($q0, $q1), [%SpillVar];
	st_v3_spill_b128	($q0, $q1, $q2), [%SpillVar];
	st_v4_spill_b128	($q0, $q1, $q2, $q3), [%SpillVar];
	st_spill_b128	u8x16(0,0,0,0,0,0,0,0,107,240,55,174,50,95,28,113), [%SpillVar];
	st_spill_align(2)_b128	$q0, [%SpillVar];
	st_spill_align(4)_b128	$q0, [%SpillVar];
	st_spill_align(8)_b128	$q0, [%SpillVar];
	st_spill_align(16)_b128	$q0, [%SpillVar];
	st_spill_align(32)_b128	$q0, [%SpillVar];
	st_spill_align(64)_b128	$q0, [%SpillVar];
	st_spill_align(128)_b128	$q0, [%SpillVar];
	st_spill_align(256)_b128	$q0, [%SpillVar];
	st_spill_equiv(1)_b128	$q0, [%SpillVar];
	st_spill_equiv(2)_b128	$q0, [%SpillVar];
	st_spill_equiv(255)_b128	$q0, [%SpillVar];
	// 
	// Next sample
	// 
	st_sig64	$d0, [$d0+2];
	// 
	st_v2_sig64	($d0, $d0), [$d0+2];
	st_v3_sig64	($d0, $d0, $d0), [$d0+2];
	st_v4_sig64	($d0, $d0, $d0, $d0), [$d0+2];
	st_v2_sig64	($d0, $d1), [$d0+2];
	st_v3_sig64	($d0, $d1, $d2), [$d0+2];
	st_v4_sig64	($d0, $d1, $d2, $d3), [$d0+2];
	st_v2_sig64	(sig64(0), $d0), [$d0+2];
	st_v3_sig64	(sig64(0), sig64(0), $d0), [$d0+2];
	st_v4_sig64	(sig64(0), sig64(0), sig64(0), $d0), [$d0+2];
	st_sig64	sig64(0), [$d0+2];
	st_sig64	$d0, [$d0+3];
	st_sig64	$d0, [$d0+5];
	st_sig64	$d0, [$d0+6];
	st_sig64	$d0, [0];
	st_align(2)_sig64	$d0, [$d0+2];
	st_align(4)_sig64	$d0, [$d0+2];
	st_align(8)_sig64	$d0, [$d0+2];
	st_align(16)_sig64	$d0, [$d0+2];
	st_align(32)_sig64	$d0, [$d0+2];
	st_align(64)_sig64	$d0, [$d0+2];
	st_align(128)_sig64	$d0, [$d0+2];
	st_align(256)_sig64	$d0, [$d0+2];
	st_equiv(1)_sig64	$d0, [$d0+2];
	st_equiv(2)_sig64	$d0, [$d0+2];
	st_equiv(255)_sig64	$d0, [$d0+2];
	// 
	// Next sample
	// 
	st_global_sig64	$d0, [&GlobalSig64];
	// 
	st_v2_global_sig64	($d0, $d0), [&GlobalSig64];
	st_v3_global_sig64	($d0, $d0, $d0), [&GlobalSig64];
	st_v4_global_sig64	($d0, $d0, $d0, $d0), [&GlobalSig64];
	st_v2_global_sig64	($d0, $d1), [&GlobalSig64];
	st_v3_global_sig64	($d0, $d1, $d2), [&GlobalSig64];
	st_v4_global_sig64	($d0, $d1, $d2, $d3), [&GlobalSig64];
	st_v2_global_sig64	(sig64(0), $d0), [&GlobalSig64];
	st_v3_global_sig64	(sig64(0), sig64(0), $d0), [&GlobalSig64];
	st_v4_global_sig64	(sig64(0), sig64(0), sig64(0), $d0), [&GlobalSig64];
	st_global_sig64	sig64(0), [&GlobalSig64];
	st_global_sig64	$d0, [$d0+2];
	st_global_sig64	$d0, [$d0+3];
	st_global_sig64	$d0, [$d0+5];
	st_global_sig64	$d0, [$d0+6];
	st_global_sig64	$d0, [0];
	st_global_align(2)_sig64	$d0, [&GlobalSig64];
	st_global_align(4)_sig64	$d0, [&GlobalSig64];
	st_global_align(8)_sig64	$d0, [&GlobalSig64];
	st_global_align(16)_sig64	$d0, [&GlobalSig64];
	st_global_align(32)_sig64	$d0, [&GlobalSig64];
	st_global_align(64)_sig64	$d0, [&GlobalSig64];
	st_global_align(128)_sig64	$d0, [&GlobalSig64];
	st_global_align(256)_sig64	$d0, [&GlobalSig64];
	st_global_equiv(1)_sig64	$d0, [&GlobalSig64];
	st_global_equiv(2)_sig64	$d0, [&GlobalSig64];
	st_global_equiv(255)_sig64	$d0, [&GlobalSig64];
	// 
	// Next sample
	// 
	st_group_sig64	$d0, [$s0+2];
	// 
	st_v2_group_sig64	($d0, $d0), [$s0+2];
	st_v3_group_sig64	($d0, $d0, $d0), [$s0+2];
	st_v4_group_sig64	($d0, $d0, $d0, $d0), [$s0+2];
	st_v2_group_sig64	($d0, $d1), [$s0+2];
	st_v3_group_sig64	($d0, $d1, $d2), [$s0+2];
	st_v4_group_sig64	($d0, $d1, $d2, $d3), [$s0+2];
	st_v2_group_sig64	(sig64(0), $d0), [$s0+2];
	st_v3_group_sig64	(sig64(0), sig64(0), $d0), [$s0+2];
	st_v4_group_sig64	(sig64(0), sig64(0), sig64(0), $d0), [$s0+2];
	st_group_sig64	sig64(0), [$s0+2];
	st_group_sig64	$d0, [$s0+3];
	st_group_sig64	$d0, [$s0+5];
	st_group_sig64	$d0, [$s0+6];
	st_group_sig64	$d0, [0];
	st_group_align(2)_sig64	$d0, [$s0+2];
	st_group_align(4)_sig64	$d0, [$s0+2];
	st_group_align(8)_sig64	$d0, [$s0+2];
	st_group_align(16)_sig64	$d0, [$s0+2];
	st_group_align(32)_sig64	$d0, [$s0+2];
	st_group_align(64)_sig64	$d0, [$s0+2];
	st_group_align(128)_sig64	$d0, [$s0+2];
	st_group_align(256)_sig64	$d0, [$s0+2];
	st_group_equiv(1)_sig64	$d0, [$s0+2];
	st_group_equiv(2)_sig64	$d0, [$s0+2];
	st_group_equiv(255)_sig64	$d0, [$s0+2];
	// 
	// Next sample
	// 
	st_private_sig64	$d0, [$s0+2];
	// 
	st_v2_private_sig64	($d0, $d0), [$s0+2];
	st_v3_private_sig64	($d0, $d0, $d0), [$s0+2];
	st_v4_private_sig64	($d0, $d0, $d0, $d0), [$s0+2];
	st_v2_private_sig64	($d0, $d1), [$s0+2];
	st_v3_private_sig64	($d0, $d1, $d2), [$s0+2];
	st_v4_private_sig64	($d0, $d1, $d2, $d3), [$s0+2];
	st_v2_private_sig64	(sig64(0), $d0), [$s0+2];
	st_v3_private_sig64	(sig64(0), sig64(0), $d0), [$s0+2];
	st_v4_private_sig64	(sig64(0), sig64(0), sig64(0), $d0), [$s0+2];
	st_private_sig64	sig64(0), [$s0+2];
	st_private_sig64	$d0, [$s0+3];
	st_private_sig64	$d0, [$s0+5];
	st_private_sig64	$d0, [$s0+6];
	st_private_sig64	$d0, [0];
	st_private_align(2)_sig64	$d0, [$s0+2];
	st_private_align(4)_sig64	$d0, [$s0+2];
	st_private_align(8)_sig64	$d0, [$s0+2];
	st_private_align(16)_sig64	$d0, [$s0+2];
	st_private_align(32)_sig64	$d0, [$s0+2];
	st_private_align(64)_sig64	$d0, [$s0+2];
	st_private_align(128)_sig64	$d0, [$s0+2];
	st_private_align(256)_sig64	$d0, [$s0+2];
	st_private_equiv(1)_sig64	$d0, [$s0+2];
	st_private_equiv(2)_sig64	$d0, [$s0+2];
	st_private_equiv(255)_sig64	$d0, [$s0+2];
	// 
	// Next sample
	// 
	atomic_add_rlx_wave_u32	$s0, [$d0+2], $s0;
	// 
	atomic_add_scacq_wave_u32	$s0, [$d0+2], $s0;
	atomic_add_screl_wave_u32	$s0, [$d0+2], $s0;
	atomic_add_scar_wave_u32	$s0, [$d0+2], $s0;
	atomic_add_rlx_wg_u32	$s0, [$d0+2], $s0;
	atomic_add_rlx_agent_u32	$s0, [$d0+2], $s0;
	atomic_add_rlx_system_u32	$s0, [$d0+2], $s0;
	atomic_add_rlx_wave_u32	$s0, [$d0+2], -1;
	atomic_add_rlx_wave_u32	$s0, [$d0+2], WAVESIZE;
	atomic_add_rlx_wave_u32	$s0, [$d0+3], $s0;
	atomic_add_rlx_wave_u32	$s0, [$d0+5], $s0;
	atomic_add_rlx_wave_u32	$s0, [$d0+6], $s0;
	atomic_add_rlx_wave_u32	$s0, [0], $s0;
	atomic_add_rlx_wave_equiv(1)_u32	$s0, [$d0+2], $s0;
	atomic_add_rlx_wave_equiv(2)_u32	$s0, [$d0+2], $s0;
	atomic_add_rlx_wave_equiv(255)_u32	$s0, [$d0+2], $s0;
	// 
	// Next sample
	// 
	atomic_add_global_rlx_wave_u32	$s0, [&GlobalVar], $s0;
	// 
	atomic_add_global_scacq_wave_u32	$s0, [&GlobalVar], $s0;
	atomic_add_global_screl_wave_u32	$s0, [&GlobalVar], $s0;
	atomic_add_global_scar_wave_u32	$s0, [&GlobalVar], $s0;
	atomic_add_global_rlx_wg_u32	$s0, [&GlobalVar], $s0;
	atomic_add_global_rlx_agent_u32	$s0, [&GlobalVar], $s0;
	atomic_add_global_rlx_system_u32	$s0, [&GlobalVar], $s0;
	atomic_add_global_rlx_wave_u32	$s0, [&GlobalVar], -1;
	atomic_add_global_rlx_wave_u32	$s0, [&GlobalVar], WAVESIZE;
	atomic_add_global_rlx_wave_u32	$s0, [&GlobalSig64], $s0;
	atomic_add_global_rlx_wave_u32	$s0, [$d0+2], $s0;
	atomic_add_global_rlx_wave_u32	$s0, [$d0+3], $s0;
	atomic_add_global_rlx_wave_u32	$s0, [$d0+5], $s0;
	atomic_add_global_rlx_wave_u32	$s0, [$d0+6], $s0;
	atomic_add_global_rlx_wave_u32	$s0, [0], $s0;
	atomic_add_global_rlx_wave_equiv(1)_u32	$s0, [&GlobalVar], $s0;
	atomic_add_global_rlx_wave_equiv(2)_u32	$s0, [&GlobalVar], $s0;
	atomic_add_global_rlx_wave_equiv(255)_u32	$s0, [&GlobalVar], $s0;
	// 
	// Next sample
	// 
	atomic_add_group_rlx_wave_u32	$s0, [&GroupVar], $s0;
	// 
	atomic_add_group_scacq_wave_u32	$s0, [&GroupVar], $s0;
	atomic_add_group_screl_wave_u32	$s0, [&GroupVar], $s0;
	atomic_add_group_scar_wave_u32	$s0, [&GroupVar], $s0;
	atomic_add_group_rlx_wg_u32	$s0, [&GroupVar], $s0;
	atomic_add_group_rlx_wave_u32	$s0, [&GroupVar], -1;
	atomic_add_group_rlx_wave_u32	$s0, [&GroupVar], WAVESIZE;
	atomic_add_group_rlx_wave_u32	$s0, [$s0+2], $s0;
	atomic_add_group_rlx_wave_u32	$s0, [$s0+3], $s0;
	atomic_add_group_rlx_wave_u32	$s0, [$s0+5], $s0;
	atomic_add_group_rlx_wave_u32	$s0, [$s0+6], $s0;
	atomic_add_group_rlx_wave_u32	$s0, [0], $s0;
	atomic_add_group_rlx_wave_equiv(1)_u32	$s0, [&GroupVar], $s0;
	atomic_add_group_rlx_wave_equiv(2)_u32	$s0, [&GroupVar], $s0;
	atomic_add_group_rlx_wave_equiv(255)_u32	$s0, [&GroupVar], $s0;
	// 
	// Next sample
	// 
	atomic_max_rlx_wave_u32	$s0, [$d0+2], $s0;
	// 
	atomic_max_scacq_wave_u32	$s0, [$d0+2], $s0;
	atomic_max_screl_wave_u32	$s0, [$d0+2], $s0;
	atomic_max_scar_wave_u32	$s0, [$d0+2], $s0;
	atomic_max_rlx_wg_u32	$s0, [$d0+2], $s0;
	atomic_max_rlx_agent_u32	$s0, [$d0+2], $s0;
	atomic_max_rlx_system_u32	$s0, [$d0+2], $s0;
	atomic_max_rlx_wave_u32	$s0, [$d0+2], -1;
	atomic_max_rlx_wave_u32	$s0, [$d0+2], WAVESIZE;
	atomic_max_rlx_wave_u32	$s0, [$d0+3], $s0;
	atomic_max_rlx_wave_u32	$s0, [$d0+5], $s0;
	atomic_max_rlx_wave_u32	$s0, [$d0+6], $s0;
	atomic_max_rlx_wave_u32	$s0, [0], $s0;
	atomic_max_rlx_wave_equiv(1)_u32	$s0, [$d0+2], $s0;
	atomic_max_rlx_wave_equiv(2)_u32	$s0, [$d0+2], $s0;
	atomic_max_rlx_wave_equiv(255)_u32	$s0, [$d0+2], $s0;
	// 
	// Next sample
	// 
	atomic_max_global_rlx_wave_u32	$s0, [&GlobalVar], $s0;
	// 
	atomic_max_global_scacq_wave_u32	$s0, [&GlobalVar], $s0;
	atomic_max_global_screl_wave_u32	$s0, [&GlobalVar], $s0;
	atomic_max_global_scar_wave_u32	$s0, [&GlobalVar], $s0;
	atomic_max_global_rlx_wg_u32	$s0, [&GlobalVar], $s0;
	atomic_max_global_rlx_agent_u32	$s0, [&GlobalVar], $s0;
	atomic_max_global_rlx_system_u32	$s0, [&GlobalVar], $s0;
	atomic_max_global_rlx_wave_u32	$s0, [&GlobalVar], -1;
	atomic_max_global_rlx_wave_u32	$s0, [&GlobalVar], WAVESIZE;
	atomic_max_global_rlx_wave_u32	$s0, [&GlobalSig64], $s0;
	atomic_max_global_rlx_wave_u32	$s0, [$d0+2], $s0;
	atomic_max_global_rlx_wave_u32	$s0, [$d0+3], $s0;
	atomic_max_global_rlx_wave_u32	$s0, [$d0+5], $s0;
	atomic_max_global_rlx_wave_u32	$s0, [$d0+6], $s0;
	atomic_max_global_rlx_wave_u32	$s0, [0], $s0;
	atomic_max_global_rlx_wave_equiv(1)_u32	$s0, [&GlobalVar], $s0;
	atomic_max_global_rlx_wave_equiv(2)_u32	$s0, [&GlobalVar], $s0;
	atomic_max_global_rlx_wave_equiv(255)_u32	$s0, [&GlobalVar], $s0;
	// 
	// Next sample
	// 
	atomic_max_group_rlx_wave_u32	$s0, [&GroupVar], $s0;
	// 
	atomic_max_group_scacq_wave_u32	$s0, [&GroupVar], $s0;
	atomic_max_group_screl_wave_u32	$s0, [&GroupVar], $s0;
	atomic_max_group_scar_wave_u32	$s0, [&GroupVar], $s0;
	atomic_max_group_rlx_wg_u32	$s0, [&GroupVar], $s0;
	atomic_max_group_rlx_wave_u32	$s0, [&GroupVar], -1;
	atomic_max_group_rlx_wave_u32	$s0, [&GroupVar], WAVESIZE;
	atomic_max_group_rlx_wave_u32	$s0, [$s0+2], $s0;
	atomic_max_group_rlx_wave_u32	$s0, [$s0+3], $s0;
	atomic_max_group_rlx_wave_u32	$s0, [$s0+5], $s0;
	atomic_max_group_rlx_wave_u32	$s0, [$s0+6], $s0;
	atomic_max_group_rlx_wave_u32	$s0, [0], $s0;
	atomic_max_group_rlx_wave_equiv(1)_u32	$s0, [&GroupVar], $s0;
	atomic_max_group_rlx_wave_equiv(2)_u32	$s0, [&GroupVar], $s0;
	atomic_max_group_rlx_wave_equiv(255)_u32	$s0, [&GroupVar], $s0;
	// 
	// Next sample
	// 
	atomic_min_rlx_wave_u32	$s0, [$d0+2], $s0;
	// 
	atomic_min_scacq_wave_u32	$s0, [$d0+2], $s0;
	atomic_min_screl_wave_u32	$s0, [$d0+2], $s0;
	atomic_min_scar_wave_u32	$s0, [$d0+2], $s0;
	atomic_min_rlx_wg_u32	$s0, [$d0+2], $s0;
	atomic_min_rlx_agent_u32	$s0, [$d0+2], $s0;
	atomic_min_rlx_system_u32	$s0, [$d0+2], $s0;
	atomic_min_rlx_wave_u32	$s0, [$d0+2], -1;
	atomic_min_rlx_wave_u32	$s0, [$d0+2], WAVESIZE;
	atomic_min_rlx_wave_u32	$s0, [$d0+3], $s0;
	atomic_min_rlx_wave_u32	$s0, [$d0+5], $s0;
	atomic_min_rlx_wave_u32	$s0, [$d0+6], $s0;
	atomic_min_rlx_wave_u32	$s0, [0], $s0;
	atomic_min_rlx_wave_equiv(1)_u32	$s0, [$d0+2], $s0;
	atomic_min_rlx_wave_equiv(2)_u32	$s0, [$d0+2], $s0;
	atomic_min_rlx_wave_equiv(255)_u32	$s0, [$d0+2], $s0;
	// 
	// Next sample
	// 
	atomic_min_global_rlx_wave_u32	$s0, [&GlobalVar], $s0;
	// 
	atomic_min_global_scacq_wave_u32	$s0, [&GlobalVar], $s0;
	atomic_min_global_screl_wave_u32	$s0, [&GlobalVar], $s0;
	atomic_min_global_scar_wave_u32	$s0, [&GlobalVar], $s0;
	atomic_min_global_rlx_wg_u32	$s0, [&GlobalVar], $s0;
	atomic_min_global_rlx_agent_u32	$s0, [&GlobalVar], $s0;
	atomic_min_global_rlx_system_u32	$s0, [&GlobalVar], $s0;
	atomic_min_global_rlx_wave_u32	$s0, [&GlobalVar], -1;
	atomic_min_global_rlx_wave_u32	$s0, [&GlobalVar], WAVESIZE;
	atomic_min_global_rlx_wave_u32	$s0, [&GlobalSig64], $s0;
	atomic_min_global_rlx_wave_u32	$s0, [$d0+2], $s0;
	atomic_min_global_rlx_wave_u32	$s0, [$d0+3], $s0;
	atomic_min_global_rlx_wave_u32	$s0, [$d0+5], $s0;
	atomic_min_global_rlx_wave_u32	$s0, [$d0+6], $s0;
	atomic_min_global_rlx_wave_u32	$s0, [0], $s0;
	atomic_min_global_rlx_wave_equiv(1)_u32	$s0, [&GlobalVar], $s0;
	atomic_min_global_rlx_wave_equiv(2)_u32	$s0, [&GlobalVar], $s0;
	atomic_min_global_rlx_wave_equiv(255)_u32	$s0, [&GlobalVar], $s0;
	// 
	// Next sample
	// 
	atomic_min_group_rlx_wave_u32	$s0, [&GroupVar], $s0;
	// 
	atomic_min_group_scacq_wave_u32	$s0, [&GroupVar], $s0;
	atomic_min_group_screl_wave_u32	$s0, [&GroupVar], $s0;
	atomic_min_group_scar_wave_u32	$s0, [&GroupVar], $s0;
	atomic_min_group_rlx_wg_u32	$s0, [&GroupVar], $s0;
	atomic_min_group_rlx_wave_u32	$s0, [&GroupVar], -1;
	atomic_min_group_rlx_wave_u32	$s0, [&GroupVar], WAVESIZE;
	atomic_min_group_rlx_wave_u32	$s0, [$s0+2], $s0;
	atomic_min_group_rlx_wave_u32	$s0, [$s0+3], $s0;
	atomic_min_group_rlx_wave_u32	$s0, [$s0+5], $s0;
	atomic_min_group_rlx_wave_u32	$s0, [$s0+6], $s0;
	atomic_min_group_rlx_wave_u32	$s0, [0], $s0;
	atomic_min_group_rlx_wave_equiv(1)_u32	$s0, [&GroupVar], $s0;
	atomic_min_group_rlx_wave_equiv(2)_u32	$s0, [&GroupVar], $s0;
	atomic_min_group_rlx_wave_equiv(255)_u32	$s0, [&GroupVar], $s0;
	// 
	// Next sample
	// 
	atomic_sub_rlx_wave_u32	$s0, [$d0+2], $s0;
	// 
	atomic_sub_scacq_wave_u32	$s0, [$d0+2], $s0;
	atomic_sub_screl_wave_u32	$s0, [$d0+2], $s0;
	atomic_sub_scar_wave_u32	$s0, [$d0+2], $s0;
	atomic_sub_rlx_wg_u32	$s0, [$d0+2], $s0;
	atomic_sub_rlx_agent_u32	$s0, [$d0+2], $s0;
	atomic_sub_rlx_system_u32	$s0, [$d0+2], $s0;
	atomic_sub_rlx_wave_u32	$s0, [$d0+2], -1;
	atomic_sub_rlx_wave_u32	$s0, [$d0+2], WAVESIZE;
	atomic_sub_rlx_wave_u32	$s0, [$d0+3], $s0;
	atomic_sub_rlx_wave_u32	$s0, [$d0+5], $s0;
	atomic_sub_rlx_wave_u32	$s0, [$d0+6], $s0;
	atomic_sub_rlx_wave_u32	$s0, [0], $s0;
	atomic_sub_rlx_wave_equiv(1)_u32	$s0, [$d0+2], $s0;
	atomic_sub_rlx_wave_equiv(2)_u32	$s0, [$d0+2], $s0;
	atomic_sub_rlx_wave_equiv(255)_u32	$s0, [$d0+2], $s0;
	// 
	// Next sample
	// 
	atomic_sub_global_rlx_wave_u32	$s0, [&GlobalVar], $s0;
	// 
	atomic_sub_global_scacq_wave_u32	$s0, [&GlobalVar], $s0;
	atomic_sub_global_screl_wave_u32	$s0, [&GlobalVar], $s0;
	atomic_sub_global_scar_wave_u32	$s0, [&GlobalVar], $s0;
	atomic_sub_global_rlx_wg_u32	$s0, [&GlobalVar], $s0;
	atomic_sub_global_rlx_agent_u32	$s0, [&GlobalVar], $s0;
	atomic_sub_global_rlx_system_u32	$s0, [&GlobalVar], $s0;
	atomic_sub_global_rlx_wave_u32	$s0, [&GlobalVar], -1;
	atomic_sub_global_rlx_wave_u32	$s0, [&GlobalVar], WAVESIZE;
	atomic_sub_global_rlx_wave_u32	$s0, [&GlobalSig64], $s0;
	atomic_sub_global_rlx_wave_u32	$s0, [$d0+2], $s0;
	atomic_sub_global_rlx_wave_u32	$s0, [$d0+3], $s0;
	atomic_sub_global_rlx_wave_u32	$s0, [$d0+5], $s0;
	atomic_sub_global_rlx_wave_u32	$s0, [$d0+6], $s0;
	atomic_sub_global_rlx_wave_u32	$s0, [0], $s0;
	atomic_sub_global_rlx_wave_equiv(1)_u32	$s0, [&GlobalVar], $s0;
	atomic_sub_global_rlx_wave_equiv(2)_u32	$s0, [&GlobalVar], $s0;
	atomic_sub_global_rlx_wave_equiv(255)_u32	$s0, [&GlobalVar], $s0;
	// 
	// Next sample
	// 
	atomic_sub_group_rlx_wave_u32	$s0, [&GroupVar], $s0;
	// 
	atomic_sub_group_scacq_wave_u32	$s0, [&GroupVar], $s0;
	atomic_sub_group_screl_wave_u32	$s0, [&GroupVar], $s0;
	atomic_sub_group_scar_wave_u32	$s0, [&GroupVar], $s0;
	atomic_sub_group_rlx_wg_u32	$s0, [&GroupVar], $s0;
	atomic_sub_group_rlx_wave_u32	$s0, [&GroupVar], -1;
	atomic_sub_group_rlx_wave_u32	$s0, [&GroupVar], WAVESIZE;
	atomic_sub_group_rlx_wave_u32	$s0, [$s0+2], $s0;
	atomic_sub_group_rlx_wave_u32	$s0, [$s0+3], $s0;
	atomic_sub_group_rlx_wave_u32	$s0, [$s0+5], $s0;
	atomic_sub_group_rlx_wave_u32	$s0, [$s0+6], $s0;
	atomic_sub_group_rlx_wave_u32	$s0, [0], $s0;
	atomic_sub_group_rlx_wave_equiv(1)_u32	$s0, [&GroupVar], $s0;
	atomic_sub_group_rlx_wave_equiv(2)_u32	$s0, [&GroupVar], $s0;
	atomic_sub_group_rlx_wave_equiv(255)_u32	$s0, [&GroupVar], $s0;
	// 
	// Next sample
	// 
	atomic_wrapdec_rlx_wave_u32	$s0, [$d0+2], $s0;
	// 
	atomic_wrapdec_scacq_wave_u32	$s0, [$d0+2], $s0;
	atomic_wrapdec_screl_wave_u32	$s0, [$d0+2], $s0;
	atomic_wrapdec_scar_wave_u32	$s0, [$d0+2], $s0;
	atomic_wrapdec_rlx_wg_u32	$s0, [$d0+2], $s0;
	atomic_wrapdec_rlx_agent_u32	$s0, [$d0+2], $s0;
	atomic_wrapdec_rlx_system_u32	$s0, [$d0+2], $s0;
	atomic_wrapdec_rlx_wave_u32	$s0, [$d0+2], -1;
	atomic_wrapdec_rlx_wave_u32	$s0, [$d0+2], WAVESIZE;
	atomic_wrapdec_rlx_wave_u32	$s0, [$d0+3], $s0;
	atomic_wrapdec_rlx_wave_u32	$s0, [$d0+5], $s0;
	atomic_wrapdec_rlx_wave_u32	$s0, [$d0+6], $s0;
	atomic_wrapdec_rlx_wave_u32	$s0, [0], $s0;
	atomic_wrapdec_rlx_wave_equiv(1)_u32	$s0, [$d0+2], $s0;
	atomic_wrapdec_rlx_wave_equiv(2)_u32	$s0, [$d0+2], $s0;
	atomic_wrapdec_rlx_wave_equiv(255)_u32	$s0, [$d0+2], $s0;
	// 
	// Next sample
	// 
	atomic_wrapdec_global_rlx_wave_u32	$s0, [&GlobalVar], $s0;
	// 
	atomic_wrapdec_global_scacq_wave_u32	$s0, [&GlobalVar], $s0;
	atomic_wrapdec_global_screl_wave_u32	$s0, [&GlobalVar], $s0;
	atomic_wrapdec_global_scar_wave_u32	$s0, [&GlobalVar], $s0;
	atomic_wrapdec_global_rlx_wg_u32	$s0, [&GlobalVar], $s0;
	atomic_wrapdec_global_rlx_agent_u32	$s0, [&GlobalVar], $s0;
	atomic_wrapdec_global_rlx_system_u32	$s0, [&GlobalVar], $s0;
	atomic_wrapdec_global_rlx_wave_u32	$s0, [&GlobalVar], -1;
	atomic_wrapdec_global_rlx_wave_u32	$s0, [&GlobalVar], WAVESIZE;
	atomic_wrapdec_global_rlx_wave_u32	$s0, [&GlobalSig64], $s0;
	atomic_wrapdec_global_rlx_wave_u32	$s0, [$d0+2], $s0;
	atomic_wrapdec_global_rlx_wave_u32	$s0, [$d0+3], $s0;
	atomic_wrapdec_global_rlx_wave_u32	$s0, [$d0+5], $s0;
	atomic_wrapdec_global_rlx_wave_u32	$s0, [$d0+6], $s0;
	atomic_wrapdec_global_rlx_wave_u32	$s0, [0], $s0;
	atomic_wrapdec_global_rlx_wave_equiv(1)_u32	$s0, [&GlobalVar], $s0;
	atomic_wrapdec_global_rlx_wave_equiv(2)_u32	$s0, [&GlobalVar], $s0;
	atomic_wrapdec_global_rlx_wave_equiv(255)_u32	$s0, [&GlobalVar], $s0;
	// 
	// Next sample
	// 
	atomic_wrapdec_group_rlx_wave_u32	$s0, [&GroupVar], $s0;
	// 
	atomic_wrapdec_group_scacq_wave_u32	$s0, [&GroupVar], $s0;
	atomic_wrapdec_group_screl_wave_u32	$s0, [&GroupVar], $s0;
	atomic_wrapdec_group_scar_wave_u32	$s0, [&GroupVar], $s0;
	atomic_wrapdec_group_rlx_wg_u32	$s0, [&GroupVar], $s0;
	atomic_wrapdec_group_rlx_wave_u32	$s0, [&GroupVar], -1;
	atomic_wrapdec_group_rlx_wave_u32	$s0, [&GroupVar], WAVESIZE;
	atomic_wrapdec_group_rlx_wave_u32	$s0, [$s0+2], $s0;
	atomic_wrapdec_group_rlx_wave_u32	$s0, [$s0+3], $s0;
	atomic_wrapdec_group_rlx_wave_u32	$s0, [$s0+5], $s0;
	atomic_wrapdec_group_rlx_wave_u32	$s0, [$s0+6], $s0;
	atomic_wrapdec_group_rlx_wave_u32	$s0, [0], $s0;
	atomic_wrapdec_group_rlx_wave_equiv(1)_u32	$s0, [&GroupVar], $s0;
	atomic_wrapdec_group_rlx_wave_equiv(2)_u32	$s0, [&GroupVar], $s0;
	atomic_wrapdec_group_rlx_wave_equiv(255)_u32	$s0, [&GroupVar], $s0;
	// 
	// Next sample
	// 
	atomic_wrapinc_rlx_wave_u32	$s0, [$d0+2], $s0;
	// 
	atomic_wrapinc_scacq_wave_u32	$s0, [$d0+2], $s0;
	atomic_wrapinc_screl_wave_u32	$s0, [$d0+2], $s0;
	atomic_wrapinc_scar_wave_u32	$s0, [$d0+2], $s0;
	atomic_wrapinc_rlx_wg_u32	$s0, [$d0+2], $s0;
	atomic_wrapinc_rlx_agent_u32	$s0, [$d0+2], $s0;
	atomic_wrapinc_rlx_system_u32	$s0, [$d0+2], $s0;
	atomic_wrapinc_rlx_wave_u32	$s0, [$d0+2], -1;
	atomic_wrapinc_rlx_wave_u32	$s0, [$d0+2], WAVESIZE;
	atomic_wrapinc_rlx_wave_u32	$s0, [$d0+3], $s0;
	atomic_wrapinc_rlx_wave_u32	$s0, [$d0+5], $s0;
	atomic_wrapinc_rlx_wave_u32	$s0, [$d0+6], $s0;
	atomic_wrapinc_rlx_wave_u32	$s0, [0], $s0;
	atomic_wrapinc_rlx_wave_equiv(1)_u32	$s0, [$d0+2], $s0;
	atomic_wrapinc_rlx_wave_equiv(2)_u32	$s0, [$d0+2], $s0;
	atomic_wrapinc_rlx_wave_equiv(255)_u32	$s0, [$d0+2], $s0;
	// 
	// Next sample
	// 
	atomic_wrapinc_global_rlx_wave_u32	$s0, [&GlobalVar], $s0;
	// 
	atomic_wrapinc_global_scacq_wave_u32	$s0, [&GlobalVar], $s0;
	atomic_wrapinc_global_screl_wave_u32	$s0, [&GlobalVar], $s0;
	atomic_wrapinc_global_scar_wave_u32	$s0, [&GlobalVar], $s0;
	atomic_wrapinc_global_rlx_wg_u32	$s0, [&GlobalVar], $s0;
	atomic_wrapinc_global_rlx_agent_u32	$s0, [&GlobalVar], $s0;
	atomic_wrapinc_global_rlx_system_u32	$s0, [&GlobalVar], $s0;
	atomic_wrapinc_global_rlx_wave_u32	$s0, [&GlobalVar], -1;
	atomic_wrapinc_global_rlx_wave_u32	$s0, [&GlobalVar], WAVESIZE;
	atomic_wrapinc_global_rlx_wave_u32	$s0, [&GlobalSig64], $s0;
	atomic_wrapinc_global_rlx_wave_u32	$s0, [$d0+2], $s0;
	atomic_wrapinc_global_rlx_wave_u32	$s0, [$d0+3], $s0;
	atomic_wrapinc_global_rlx_wave_u32	$s0, [$d0+5], $s0;
	atomic_wrapinc_global_rlx_wave_u32	$s0, [$d0+6], $s0;
	atomic_wrapinc_global_rlx_wave_u32	$s0, [0], $s0;
	atomic_wrapinc_global_rlx_wave_equiv(1)_u32	$s0, [&GlobalVar], $s0;
	atomic_wrapinc_global_rlx_wave_equiv(2)_u32	$s0, [&GlobalVar], $s0;
	atomic_wrapinc_global_rlx_wave_equiv(255)_u32	$s0, [&GlobalVar], $s0;
	// 
	// Next sample
	// 
	atomic_wrapinc_group_rlx_wave_u32	$s0, [&GroupVar], $s0;
	// 
	atomic_wrapinc_group_scacq_wave_u32	$s0, [&GroupVar], $s0;
	atomic_wrapinc_group_screl_wave_u32	$s0, [&GroupVar], $s0;
	atomic_wrapinc_group_scar_wave_u32	$s0, [&GroupVar], $s0;
	atomic_wrapinc_group_rlx_wg_u32	$s0, [&GroupVar], $s0;
	atomic_wrapinc_group_rlx_wave_u32	$s0, [&GroupVar], -1;
	atomic_wrapinc_group_rlx_wave_u32	$s0, [&GroupVar], WAVESIZE;
	atomic_wrapinc_group_rlx_wave_u32	$s0, [$s0+2], $s0;
	atomic_wrapinc_group_rlx_wave_u32	$s0, [$s0+3], $s0;
	atomic_wrapinc_group_rlx_wave_u32	$s0, [$s0+5], $s0;
	atomic_wrapinc_group_rlx_wave_u32	$s0, [$s0+6], $s0;
	atomic_wrapinc_group_rlx_wave_u32	$s0, [0], $s0;
	atomic_wrapinc_group_rlx_wave_equiv(1)_u32	$s0, [&GroupVar], $s0;
	atomic_wrapinc_group_rlx_wave_equiv(2)_u32	$s0, [&GroupVar], $s0;
	atomic_wrapinc_group_rlx_wave_equiv(255)_u32	$s0, [&GroupVar], $s0;
	// 
	// Next sample
	// 
	atomic_add_rlx_wave_u64	$d0, [$d0+2], $d0;
	// 
	atomic_add_scacq_wave_u64	$d0, [$d0+2], $d0;
	atomic_add_screl_wave_u64	$d0, [$d0+2], $d0;
	atomic_add_scar_wave_u64	$d0, [$d0+2], $d0;
	atomic_add_rlx_wg_u64	$d0, [$d0+2], $d0;
	atomic_add_rlx_agent_u64	$d0, [$d0+2], $d0;
	atomic_add_rlx_system_u64	$d0, [$d0+2], $d0;
	atomic_add_rlx_wave_u64	$d0, [$d0+2], -1;
	atomic_add_rlx_wave_u64	$d0, [$d0+2], WAVESIZE;
	atomic_add_rlx_wave_u64	$d0, [$d0+3], $d0;
	atomic_add_rlx_wave_u64	$d0, [$d0+5], $d0;
	atomic_add_rlx_wave_u64	$d0, [$d0+6], $d0;
	atomic_add_rlx_wave_u64	$d0, [0], $d0;
	atomic_add_rlx_wave_equiv(1)_u64	$d0, [$d0+2], $d0;
	atomic_add_rlx_wave_equiv(2)_u64	$d0, [$d0+2], $d0;
	atomic_add_rlx_wave_equiv(255)_u64	$d0, [$d0+2], $d0;
	// 
	// Next sample
	// 
	atomic_add_global_rlx_wave_u64	$d0, [&GlobalVar], $d0;
	// 
	atomic_add_global_scacq_wave_u64	$d0, [&GlobalVar], $d0;
	atomic_add_global_screl_wave_u64	$d0, [&GlobalVar], $d0;
	atomic_add_global_scar_wave_u64	$d0, [&GlobalVar], $d0;
	atomic_add_global_rlx_wg_u64	$d0, [&GlobalVar], $d0;
	atomic_add_global_rlx_agent_u64	$d0, [&GlobalVar], $d0;
	atomic_add_global_rlx_system_u64	$d0, [&GlobalVar], $d0;
	atomic_add_global_rlx_wave_u64	$d0, [&GlobalVar], -1;
	atomic_add_global_rlx_wave_u64	$d0, [&GlobalVar], WAVESIZE;
	atomic_add_global_rlx_wave_u64	$d0, [&GlobalSig64], $d0;
	atomic_add_global_rlx_wave_u64	$d0, [$d0+2], $d0;
	atomic_add_global_rlx_wave_u64	$d0, [$d0+3], $d0;
	atomic_add_global_rlx_wave_u64	$d0, [$d0+5], $d0;
	atomic_add_global_rlx_wave_u64	$d0, [$d0+6], $d0;
	atomic_add_global_rlx_wave_u64	$d0, [0], $d0;
	atomic_add_global_rlx_wave_equiv(1)_u64	$d0, [&GlobalVar], $d0;
	atomic_add_global_rlx_wave_equiv(2)_u64	$d0, [&GlobalVar], $d0;
	atomic_add_global_rlx_wave_equiv(255)_u64	$d0, [&GlobalVar], $d0;
	// 
	// Next sample
	// 
	atomic_add_group_rlx_wave_u64	$d0, [&GroupVar], $d0;
	// 
	atomic_add_group_scacq_wave_u64	$d0, [&GroupVar], $d0;
	atomic_add_group_screl_wave_u64	$d0, [&GroupVar], $d0;
	atomic_add_group_scar_wave_u64	$d0, [&GroupVar], $d0;
	atomic_add_group_rlx_wg_u64	$d0, [&GroupVar], $d0;
	atomic_add_group_rlx_wave_u64	$d0, [&GroupVar], -1;
	atomic_add_group_rlx_wave_u64	$d0, [&GroupVar], WAVESIZE;
	atomic_add_group_rlx_wave_u64	$d0, [$s0+2], $d0;
	atomic_add_group_rlx_wave_u64	$d0, [$s0+3], $d0;
	atomic_add_group_rlx_wave_u64	$d0, [$s0+5], $d0;
	atomic_add_group_rlx_wave_u64	$d0, [$s0+6], $d0;
	atomic_add_group_rlx_wave_u64	$d0, [0], $d0;
	atomic_add_group_rlx_wave_equiv(1)_u64	$d0, [&GroupVar], $d0;
	atomic_add_group_rlx_wave_equiv(2)_u64	$d0, [&GroupVar], $d0;
	atomic_add_group_rlx_wave_equiv(255)_u64	$d0, [&GroupVar], $d0;
	// 
	// Next sample
	// 
	atomic_max_rlx_wave_u64	$d0, [$d0+2], $d0;
	// 
	atomic_max_scacq_wave_u64	$d0, [$d0+2], $d0;
	atomic_max_screl_wave_u64	$d0, [$d0+2], $d0;
	atomic_max_scar_wave_u64	$d0, [$d0+2], $d0;
	atomic_max_rlx_wg_u64	$d0, [$d0+2], $d0;
	atomic_max_rlx_agent_u64	$d0, [$d0+2], $d0;
	atomic_max_rlx_system_u64	$d0, [$d0+2], $d0;
	atomic_max_rlx_wave_u64	$d0, [$d0+2], -1;
	atomic_max_rlx_wave_u64	$d0, [$d0+2], WAVESIZE;
	atomic_max_rlx_wave_u64	$d0, [$d0+3], $d0;
	atomic_max_rlx_wave_u64	$d0, [$d0+5], $d0;
	atomic_max_rlx_wave_u64	$d0, [$d0+6], $d0;
	atomic_max_rlx_wave_u64	$d0, [0], $d0;
	atomic_max_rlx_wave_equiv(1)_u64	$d0, [$d0+2], $d0;
	atomic_max_rlx_wave_equiv(2)_u64	$d0, [$d0+2], $d0;
	atomic_max_rlx_wave_equiv(255)_u64	$d0, [$d0+2], $d0;
	// 
	// Next sample
	// 
	atomic_max_global_rlx_wave_u64	$d0, [&GlobalVar], $d0;
	// 
	atomic_max_global_scacq_wave_u64	$d0, [&GlobalVar], $d0;
	atomic_max_global_screl_wave_u64	$d0, [&GlobalVar], $d0;
	atomic_max_global_scar_wave_u64	$d0, [&GlobalVar], $d0;
	atomic_max_global_rlx_wg_u64	$d0, [&GlobalVar], $d0;
	atomic_max_global_rlx_agent_u64	$d0, [&GlobalVar], $d0;
	atomic_max_global_rlx_system_u64	$d0, [&GlobalVar], $d0;
	atomic_max_global_rlx_wave_u64	$d0, [&GlobalVar], -1;
	atomic_max_global_rlx_wave_u64	$d0, [&GlobalVar], WAVESIZE;
	atomic_max_global_rlx_wave_u64	$d0, [&GlobalSig64], $d0;
	atomic_max_global_rlx_wave_u64	$d0, [$d0+2], $d0;
	atomic_max_global_rlx_wave_u64	$d0, [$d0+3], $d0;
	atomic_max_global_rlx_wave_u64	$d0, [$d0+5], $d0;
	atomic_max_global_rlx_wave_u64	$d0, [$d0+6], $d0;
	atomic_max_global_rlx_wave_u64	$d0, [0], $d0;
	atomic_max_global_rlx_wave_equiv(1)_u64	$d0, [&GlobalVar], $d0;
	atomic_max_global_rlx_wave_equiv(2)_u64	$d0, [&GlobalVar], $d0;
	atomic_max_global_rlx_wave_equiv(255)_u64	$d0, [&GlobalVar], $d0;
	// 
	// Next sample
	// 
	atomic_max_group_rlx_wave_u64	$d0, [&GroupVar], $d0;
	// 
	atomic_max_group_scacq_wave_u64	$d0, [&GroupVar], $d0;
	atomic_max_group_screl_wave_u64	$d0, [&GroupVar], $d0;
	atomic_max_group_scar_wave_u64	$d0, [&GroupVar], $d0;
	atomic_max_group_rlx_wg_u64	$d0, [&GroupVar], $d0;
	atomic_max_group_rlx_wave_u64	$d0, [&GroupVar], -1;
	atomic_max_group_rlx_wave_u64	$d0, [&GroupVar], WAVESIZE;
	atomic_max_group_rlx_wave_u64	$d0, [$s0+2], $d0;
	atomic_max_group_rlx_wave_u64	$d0, [$s0+3], $d0;
	atomic_max_group_rlx_wave_u64	$d0, [$s0+5], $d0;
	atomic_max_group_rlx_wave_u64	$d0, [$s0+6], $d0;
	atomic_max_group_rlx_wave_u64	$d0, [0], $d0;
	atomic_max_group_rlx_wave_equiv(1)_u64	$d0, [&GroupVar], $d0;
	atomic_max_group_rlx_wave_equiv(2)_u64	$d0, [&GroupVar], $d0;
	atomic_max_group_rlx_wave_equiv(255)_u64	$d0, [&GroupVar], $d0;
	// 
	// Next sample
	// 
	atomic_min_rlx_wave_u64	$d0, [$d0+2], $d0;
	// 
	atomic_min_scacq_wave_u64	$d0, [$d0+2], $d0;
	atomic_min_screl_wave_u64	$d0, [$d0+2], $d0;
	atomic_min_scar_wave_u64	$d0, [$d0+2], $d0;
	atomic_min_rlx_wg_u64	$d0, [$d0+2], $d0;
	atomic_min_rlx_agent_u64	$d0, [$d0+2], $d0;
	atomic_min_rlx_system_u64	$d0, [$d0+2], $d0;
	atomic_min_rlx_wave_u64	$d0, [$d0+2], -1;
	atomic_min_rlx_wave_u64	$d0, [$d0+2], WAVESIZE;
	atomic_min_rlx_wave_u64	$d0, [$d0+3], $d0;
	atomic_min_rlx_wave_u64	$d0, [$d0+5], $d0;
	atomic_min_rlx_wave_u64	$d0, [$d0+6], $d0;
	atomic_min_rlx_wave_u64	$d0, [0], $d0;
	atomic_min_rlx_wave_equiv(1)_u64	$d0, [$d0+2], $d0;
	atomic_min_rlx_wave_equiv(2)_u64	$d0, [$d0+2], $d0;
	atomic_min_rlx_wave_equiv(255)_u64	$d0, [$d0+2], $d0;
	// 
	// Next sample
	// 
	atomic_min_global_rlx_wave_u64	$d0, [&GlobalVar], $d0;
	// 
	atomic_min_global_scacq_wave_u64	$d0, [&GlobalVar], $d0;
	atomic_min_global_screl_wave_u64	$d0, [&GlobalVar], $d0;
	atomic_min_global_scar_wave_u64	$d0, [&GlobalVar], $d0;
	atomic_min_global_rlx_wg_u64	$d0, [&GlobalVar], $d0;
	atomic_min_global_rlx_agent_u64	$d0, [&GlobalVar], $d0;
	atomic_min_global_rlx_system_u64	$d0, [&GlobalVar], $d0;
	atomic_min_global_rlx_wave_u64	$d0, [&GlobalVar], -1;
	atomic_min_global_rlx_wave_u64	$d0, [&GlobalVar], WAVESIZE;
	atomic_min_global_rlx_wave_u64	$d0, [&GlobalSig64], $d0;
	atomic_min_global_rlx_wave_u64	$d0, [$d0+2], $d0;
	atomic_min_global_rlx_wave_u64	$d0, [$d0+3], $d0;
	atomic_min_global_rlx_wave_u64	$d0, [$d0+5], $d0;
	atomic_min_global_rlx_wave_u64	$d0, [$d0+6], $d0;
	atomic_min_global_rlx_wave_u64	$d0, [0], $d0;
	atomic_min_global_rlx_wave_equiv(1)_u64	$d0, [&GlobalVar], $d0;
	atomic_min_global_rlx_wave_equiv(2)_u64	$d0, [&GlobalVar], $d0;
	atomic_min_global_rlx_wave_equiv(255)_u64	$d0, [&GlobalVar], $d0;
	// 
	// Next sample
	// 
	atomic_min_group_rlx_wave_u64	$d0, [&GroupVar], $d0;
	// 
	atomic_min_group_scacq_wave_u64	$d0, [&GroupVar], $d0;
	atomic_min_group_screl_wave_u64	$d0, [&GroupVar], $d0;
	atomic_min_group_scar_wave_u64	$d0, [&GroupVar], $d0;
	atomic_min_group_rlx_wg_u64	$d0, [&GroupVar], $d0;
	atomic_min_group_rlx_wave_u64	$d0, [&GroupVar], -1;
	atomic_min_group_rlx_wave_u64	$d0, [&GroupVar], WAVESIZE;
	atomic_min_group_rlx_wave_u64	$d0, [$s0+2], $d0;
	atomic_min_group_rlx_wave_u64	$d0, [$s0+3], $d0;
	atomic_min_group_rlx_wave_u64	$d0, [$s0+5], $d0;
	atomic_min_group_rlx_wave_u64	$d0, [$s0+6], $d0;
	atomic_min_group_rlx_wave_u64	$d0, [0], $d0;
	atomic_min_group_rlx_wave_equiv(1)_u64	$d0, [&GroupVar], $d0;
	atomic_min_group_rlx_wave_equiv(2)_u64	$d0, [&GroupVar], $d0;
	atomic_min_group_rlx_wave_equiv(255)_u64	$d0, [&GroupVar], $d0;
	// 
	// Next sample
	// 
	atomic_sub_rlx_wave_u64	$d0, [$d0+2], $d0;
	// 
	atomic_sub_scacq_wave_u64	$d0, [$d0+2], $d0;
	atomic_sub_screl_wave_u64	$d0, [$d0+2], $d0;
	atomic_sub_scar_wave_u64	$d0, [$d0+2], $d0;
	atomic_sub_rlx_wg_u64	$d0, [$d0+2], $d0;
	atomic_sub_rlx_agent_u64	$d0, [$d0+2], $d0;
	atomic_sub_rlx_system_u64	$d0, [$d0+2], $d0;
	atomic_sub_rlx_wave_u64	$d0, [$d0+2], -1;
	atomic_sub_rlx_wave_u64	$d0, [$d0+2], WAVESIZE;
	atomic_sub_rlx_wave_u64	$d0, [$d0+3], $d0;
	atomic_sub_rlx_wave_u64	$d0, [$d0+5], $d0;
	atomic_sub_rlx_wave_u64	$d0, [$d0+6], $d0;
	atomic_sub_rlx_wave_u64	$d0, [0], $d0;
	atomic_sub_rlx_wave_equiv(1)_u64	$d0, [$d0+2], $d0;
	atomic_sub_rlx_wave_equiv(2)_u64	$d0, [$d0+2], $d0;
	atomic_sub_rlx_wave_equiv(255)_u64	$d0, [$d0+2], $d0;
	// 
	// Next sample
	// 
	atomic_sub_global_rlx_wave_u64	$d0, [&GlobalVar], $d0;
	// 
	atomic_sub_global_scacq_wave_u64	$d0, [&GlobalVar], $d0;
	atomic_sub_global_screl_wave_u64	$d0, [&GlobalVar], $d0;
	atomic_sub_global_scar_wave_u64	$d0, [&GlobalVar], $d0;
	atomic_sub_global_rlx_wg_u64	$d0, [&GlobalVar], $d0;
	atomic_sub_global_rlx_agent_u64	$d0, [&GlobalVar], $d0;
	atomic_sub_global_rlx_system_u64	$d0, [&GlobalVar], $d0;
	atomic_sub_global_rlx_wave_u64	$d0, [&GlobalVar], -1;
	atomic_sub_global_rlx_wave_u64	$d0, [&GlobalVar], WAVESIZE;
	atomic_sub_global_rlx_wave_u64	$d0, [&GlobalSig64], $d0;
	atomic_sub_global_rlx_wave_u64	$d0, [$d0+2], $d0;
	atomic_sub_global_rlx_wave_u64	$d0, [$d0+3], $d0;
	atomic_sub_global_rlx_wave_u64	$d0, [$d0+5], $d0;
	atomic_sub_global_rlx_wave_u64	$d0, [$d0+6], $d0;
	atomic_sub_global_rlx_wave_u64	$d0, [0], $d0;
	atomic_sub_global_rlx_wave_equiv(1)_u64	$d0, [&GlobalVar], $d0;
	atomic_sub_global_rlx_wave_equiv(2)_u64	$d0, [&GlobalVar], $d0;
	atomic_sub_global_rlx_wave_equiv(255)_u64	$d0, [&GlobalVar], $d0;
	// 
	// Next sample
	// 
	atomic_sub_group_rlx_wave_u64	$d0, [&GroupVar], $d0;
	// 
	atomic_sub_group_scacq_wave_u64	$d0, [&GroupVar], $d0;
	atomic_sub_group_screl_wave_u64	$d0, [&GroupVar], $d0;
	atomic_sub_group_scar_wave_u64	$d0, [&GroupVar], $d0;
	atomic_sub_group_rlx_wg_u64	$d0, [&GroupVar], $d0;
	atomic_sub_group_rlx_wave_u64	$d0, [&GroupVar], -1;
	atomic_sub_group_rlx_wave_u64	$d0, [&GroupVar], WAVESIZE;
	atomic_sub_group_rlx_wave_u64	$d0, [$s0+2], $d0;
	atomic_sub_group_rlx_wave_u64	$d0, [$s0+3], $d0;
	atomic_sub_group_rlx_wave_u64	$d0, [$s0+5], $d0;
	atomic_sub_group_rlx_wave_u64	$d0, [$s0+6], $d0;
	atomic_sub_group_rlx_wave_u64	$d0, [0], $d0;
	atomic_sub_group_rlx_wave_equiv(1)_u64	$d0, [&GroupVar], $d0;
	atomic_sub_group_rlx_wave_equiv(2)_u64	$d0, [&GroupVar], $d0;
	atomic_sub_group_rlx_wave_equiv(255)_u64	$d0, [&GroupVar], $d0;
	// 
	// Next sample
	// 
	atomic_wrapdec_rlx_wave_u64	$d0, [$d0+2], $d0;
	// 
	atomic_wrapdec_scacq_wave_u64	$d0, [$d0+2], $d0;
	atomic_wrapdec_screl_wave_u64	$d0, [$d0+2], $d0;
	atomic_wrapdec_scar_wave_u64	$d0, [$d0+2], $d0;
	atomic_wrapdec_rlx_wg_u64	$d0, [$d0+2], $d0;
	atomic_wrapdec_rlx_agent_u64	$d0, [$d0+2], $d0;
	atomic_wrapdec_rlx_system_u64	$d0, [$d0+2], $d0;
	atomic_wrapdec_rlx_wave_u64	$d0, [$d0+2], -1;
	atomic_wrapdec_rlx_wave_u64	$d0, [$d0+2], WAVESIZE;
	atomic_wrapdec_rlx_wave_u64	$d0, [$d0+3], $d0;
	atomic_wrapdec_rlx_wave_u64	$d0, [$d0+5], $d0;
	atomic_wrapdec_rlx_wave_u64	$d0, [$d0+6], $d0;
	atomic_wrapdec_rlx_wave_u64	$d0, [0], $d0;
	atomic_wrapdec_rlx_wave_equiv(1)_u64	$d0, [$d0+2], $d0;
	atomic_wrapdec_rlx_wave_equiv(2)_u64	$d0, [$d0+2], $d0;
	atomic_wrapdec_rlx_wave_equiv(255)_u64	$d0, [$d0+2], $d0;
	// 
	// Next sample
	// 
	atomic_wrapdec_global_rlx_wave_u64	$d0, [&GlobalVar], $d0;
	// 
	atomic_wrapdec_global_scacq_wave_u64	$d0, [&GlobalVar], $d0;
	atomic_wrapdec_global_screl_wave_u64	$d0, [&GlobalVar], $d0;
	atomic_wrapdec_global_scar_wave_u64	$d0, [&GlobalVar], $d0;
	atomic_wrapdec_global_rlx_wg_u64	$d0, [&GlobalVar], $d0;
	atomic_wrapdec_global_rlx_agent_u64	$d0, [&GlobalVar], $d0;
	atomic_wrapdec_global_rlx_system_u64	$d0, [&GlobalVar], $d0;
	atomic_wrapdec_global_rlx_wave_u64	$d0, [&GlobalVar], -1;
	atomic_wrapdec_global_rlx_wave_u64	$d0, [&GlobalVar], WAVESIZE;
	atomic_wrapdec_global_rlx_wave_u64	$d0, [&GlobalSig64], $d0;
	atomic_wrapdec_global_rlx_wave_u64	$d0, [$d0+2], $d0;
	atomic_wrapdec_global_rlx_wave_u64	$d0, [$d0+3], $d0;
	atomic_wrapdec_global_rlx_wave_u64	$d0, [$d0+5], $d0;
	atomic_wrapdec_global_rlx_wave_u64	$d0, [$d0+6], $d0;
	atomic_wrapdec_global_rlx_wave_u64	$d0, [0], $d0;
	atomic_wrapdec_global_rlx_wave_equiv(1)_u64	$d0, [&GlobalVar], $d0;
	atomic_wrapdec_global_rlx_wave_equiv(2)_u64	$d0, [&GlobalVar], $d0;
	atomic_wrapdec_global_rlx_wave_equiv(255)_u64	$d0, [&GlobalVar], $d0;
	// 
	// Next sample
	// 
	atomic_wrapdec_group_rlx_wave_u64	$d0, [&GroupVar], $d0;
	// 
	atomic_wrapdec_group_scacq_wave_u64	$d0, [&GroupVar], $d0;
	atomic_wrapdec_group_screl_wave_u64	$d0, [&GroupVar], $d0;
	atomic_wrapdec_group_scar_wave_u64	$d0, [&GroupVar], $d0;
	atomic_wrapdec_group_rlx_wg_u64	$d0, [&GroupVar], $d0;
	atomic_wrapdec_group_rlx_wave_u64	$d0, [&GroupVar], -1;
	atomic_wrapdec_group_rlx_wave_u64	$d0, [&GroupVar], WAVESIZE;
	atomic_wrapdec_group_rlx_wave_u64	$d0, [$s0+2], $d0;
	atomic_wrapdec_group_rlx_wave_u64	$d0, [$s0+3], $d0;
	atomic_wrapdec_group_rlx_wave_u64	$d0, [$s0+5], $d0;
	atomic_wrapdec_group_rlx_wave_u64	$d0, [$s0+6], $d0;
	atomic_wrapdec_group_rlx_wave_u64	$d0, [0], $d0;
	atomic_wrapdec_group_rlx_wave_equiv(1)_u64	$d0, [&GroupVar], $d0;
	atomic_wrapdec_group_rlx_wave_equiv(2)_u64	$d0, [&GroupVar], $d0;
	atomic_wrapdec_group_rlx_wave_equiv(255)_u64	$d0, [&GroupVar], $d0;
	// 
	// Next sample
	// 
	atomic_wrapinc_rlx_wave_u64	$d0, [$d0+2], $d0;
	// 
	atomic_wrapinc_scacq_wave_u64	$d0, [$d0+2], $d0;
	atomic_wrapinc_screl_wave_u64	$d0, [$d0+2], $d0;
	atomic_wrapinc_scar_wave_u64	$d0, [$d0+2], $d0;
	atomic_wrapinc_rlx_wg_u64	$d0, [$d0+2], $d0;
	atomic_wrapinc_rlx_agent_u64	$d0, [$d0+2], $d0;
	atomic_wrapinc_rlx_system_u64	$d0, [$d0+2], $d0;
	atomic_wrapinc_rlx_wave_u64	$d0, [$d0+2], -1;
	atomic_wrapinc_rlx_wave_u64	$d0, [$d0+2], WAVESIZE;
	atomic_wrapinc_rlx_wave_u64	$d0, [$d0+3], $d0;
	atomic_wrapinc_rlx_wave_u64	$d0, [$d0+5], $d0;
	atomic_wrapinc_rlx_wave_u64	$d0, [$d0+6], $d0;
	atomic_wrapinc_rlx_wave_u64	$d0, [0], $d0;
	atomic_wrapinc_rlx_wave_equiv(1)_u64	$d0, [$d0+2], $d0;
	atomic_wrapinc_rlx_wave_equiv(2)_u64	$d0, [$d0+2], $d0;
	atomic_wrapinc_rlx_wave_equiv(255)_u64	$d0, [$d0+2], $d0;
	// 
	// Next sample
	// 
	atomic_wrapinc_global_rlx_wave_u64	$d0, [&GlobalVar], $d0;
	// 
	atomic_wrapinc_global_scacq_wave_u64	$d0, [&GlobalVar], $d0;
	atomic_wrapinc_global_screl_wave_u64	$d0, [&GlobalVar], $d0;
	atomic_wrapinc_global_scar_wave_u64	$d0, [&GlobalVar], $d0;
	atomic_wrapinc_global_rlx_wg_u64	$d0, [&GlobalVar], $d0;
	atomic_wrapinc_global_rlx_agent_u64	$d0, [&GlobalVar], $d0;
	atomic_wrapinc_global_rlx_system_u64	$d0, [&GlobalVar], $d0;
	atomic_wrapinc_global_rlx_wave_u64	$d0, [&GlobalVar], -1;
	atomic_wrapinc_global_rlx_wave_u64	$d0, [&GlobalVar], WAVESIZE;
	atomic_wrapinc_global_rlx_wave_u64	$d0, [&GlobalSig64], $d0;
	atomic_wrapinc_global_rlx_wave_u64	$d0, [$d0+2], $d0;
	atomic_wrapinc_global_rlx_wave_u64	$d0, [$d0+3], $d0;
	atomic_wrapinc_global_rlx_wave_u64	$d0, [$d0+5], $d0;
	atomic_wrapinc_global_rlx_wave_u64	$d0, [$d0+6], $d0;
	atomic_wrapinc_global_rlx_wave_u64	$d0, [0], $d0;
	atomic_wrapinc_global_rlx_wave_equiv(1)_u64	$d0, [&GlobalVar], $d0;
	atomic_wrapinc_global_rlx_wave_equiv(2)_u64	$d0, [&GlobalVar], $d0;
	atomic_wrapinc_global_rlx_wave_equiv(255)_u64	$d0, [&GlobalVar], $d0;
	// 
	// Next sample
	// 
	atomic_wrapinc_group_rlx_wave_u64	$d0, [&GroupVar], $d0;
	// 
	atomic_wrapinc_group_scacq_wave_u64	$d0, [&GroupVar], $d0;
	atomic_wrapinc_group_screl_wave_u64	$d0, [&GroupVar], $d0;
	atomic_wrapinc_group_scar_wave_u64	$d0, [&GroupVar], $d0;
	atomic_wrapinc_group_rlx_wg_u64	$d0, [&GroupVar], $d0;
	atomic_wrapinc_group_rlx_wave_u64	$d0, [&GroupVar], -1;
	atomic_wrapinc_group_rlx_wave_u64	$d0, [&GroupVar], WAVESIZE;
	atomic_wrapinc_group_rlx_wave_u64	$d0, [$s0+2], $d0;
	atomic_wrapinc_group_rlx_wave_u64	$d0, [$s0+3], $d0;
	atomic_wrapinc_group_rlx_wave_u64	$d0, [$s0+5], $d0;
	atomic_wrapinc_group_rlx_wave_u64	$d0, [$s0+6], $d0;
	atomic_wrapinc_group_rlx_wave_u64	$d0, [0], $d0;
	atomic_wrapinc_group_rlx_wave_equiv(1)_u64	$d0, [&GroupVar], $d0;
	atomic_wrapinc_group_rlx_wave_equiv(2)_u64	$d0, [&GroupVar], $d0;
	atomic_wrapinc_group_rlx_wave_equiv(255)_u64	$d0, [&GroupVar], $d0;
	// 
	// Next sample
	// 
	atomic_add_rlx_wave_s32	$s0, [$d0+2], $s0;
	// 
	atomic_add_scacq_wave_s32	$s0, [$d0+2], $s0;
	atomic_add_screl_wave_s32	$s0, [$d0+2], $s0;
	atomic_add_scar_wave_s32	$s0, [$d0+2], $s0;
	atomic_add_rlx_wg_s32	$s0, [$d0+2], $s0;
	atomic_add_rlx_agent_s32	$s0, [$d0+2], $s0;
	atomic_add_rlx_system_s32	$s0, [$d0+2], $s0;
	atomic_add_rlx_wave_s32	$s0, [$d0+2], -1;
	atomic_add_rlx_wave_s32	$s0, [$d0+2], WAVESIZE;
	atomic_add_rlx_wave_s32	$s0, [$d0+3], $s0;
	atomic_add_rlx_wave_s32	$s0, [$d0+5], $s0;
	atomic_add_rlx_wave_s32	$s0, [$d0+6], $s0;
	atomic_add_rlx_wave_s32	$s0, [0], $s0;
	atomic_add_rlx_wave_equiv(1)_s32	$s0, [$d0+2], $s0;
	atomic_add_rlx_wave_equiv(2)_s32	$s0, [$d0+2], $s0;
	atomic_add_rlx_wave_equiv(255)_s32	$s0, [$d0+2], $s0;
	// 
	// Next sample
	// 
	atomic_add_global_rlx_wave_s32	$s0, [&GlobalVar], $s0;
	// 
	atomic_add_global_scacq_wave_s32	$s0, [&GlobalVar], $s0;
	atomic_add_global_screl_wave_s32	$s0, [&GlobalVar], $s0;
	atomic_add_global_scar_wave_s32	$s0, [&GlobalVar], $s0;
	atomic_add_global_rlx_wg_s32	$s0, [&GlobalVar], $s0;
	atomic_add_global_rlx_agent_s32	$s0, [&GlobalVar], $s0;
	atomic_add_global_rlx_system_s32	$s0, [&GlobalVar], $s0;
	atomic_add_global_rlx_wave_s32	$s0, [&GlobalVar], -1;
	atomic_add_global_rlx_wave_s32	$s0, [&GlobalVar], WAVESIZE;
	atomic_add_global_rlx_wave_s32	$s0, [&GlobalSig64], $s0;
	atomic_add_global_rlx_wave_s32	$s0, [$d0+2], $s0;
	atomic_add_global_rlx_wave_s32	$s0, [$d0+3], $s0;
	atomic_add_global_rlx_wave_s32	$s0, [$d0+5], $s0;
	atomic_add_global_rlx_wave_s32	$s0, [$d0+6], $s0;
	atomic_add_global_rlx_wave_s32	$s0, [0], $s0;
	atomic_add_global_rlx_wave_equiv(1)_s32	$s0, [&GlobalVar], $s0;
	atomic_add_global_rlx_wave_equiv(2)_s32	$s0, [&GlobalVar], $s0;
	atomic_add_global_rlx_wave_equiv(255)_s32	$s0, [&GlobalVar], $s0;
	// 
	// Next sample
	// 
	atomic_add_group_rlx_wave_s32	$s0, [&GroupVar], $s0;
	// 
	atomic_add_group_scacq_wave_s32	$s0, [&GroupVar], $s0;
	atomic_add_group_screl_wave_s32	$s0, [&GroupVar], $s0;
	atomic_add_group_scar_wave_s32	$s0, [&GroupVar], $s0;
	atomic_add_group_rlx_wg_s32	$s0, [&GroupVar], $s0;
	atomic_add_group_rlx_wave_s32	$s0, [&GroupVar], -1;
	atomic_add_group_rlx_wave_s32	$s0, [&GroupVar], WAVESIZE;
	atomic_add_group_rlx_wave_s32	$s0, [$s0+2], $s0;
	atomic_add_group_rlx_wave_s32	$s0, [$s0+3], $s0;
	atomic_add_group_rlx_wave_s32	$s0, [$s0+5], $s0;
	atomic_add_group_rlx_wave_s32	$s0, [$s0+6], $s0;
	atomic_add_group_rlx_wave_s32	$s0, [0], $s0;
	atomic_add_group_rlx_wave_equiv(1)_s32	$s0, [&GroupVar], $s0;
	atomic_add_group_rlx_wave_equiv(2)_s32	$s0, [&GroupVar], $s0;
	atomic_add_group_rlx_wave_equiv(255)_s32	$s0, [&GroupVar], $s0;
	// 
	// Next sample
	// 
	atomic_max_rlx_wave_s32	$s0, [$d0+2], $s0;
	// 
	atomic_max_scacq_wave_s32	$s0, [$d0+2], $s0;
	atomic_max_screl_wave_s32	$s0, [$d0+2], $s0;
	atomic_max_scar_wave_s32	$s0, [$d0+2], $s0;
	atomic_max_rlx_wg_s32	$s0, [$d0+2], $s0;
	atomic_max_rlx_agent_s32	$s0, [$d0+2], $s0;
	atomic_max_rlx_system_s32	$s0, [$d0+2], $s0;
	atomic_max_rlx_wave_s32	$s0, [$d0+2], -1;
	atomic_max_rlx_wave_s32	$s0, [$d0+2], WAVESIZE;
	atomic_max_rlx_wave_s32	$s0, [$d0+3], $s0;
	atomic_max_rlx_wave_s32	$s0, [$d0+5], $s0;
	atomic_max_rlx_wave_s32	$s0, [$d0+6], $s0;
	atomic_max_rlx_wave_s32	$s0, [0], $s0;
	atomic_max_rlx_wave_equiv(1)_s32	$s0, [$d0+2], $s0;
	atomic_max_rlx_wave_equiv(2)_s32	$s0, [$d0+2], $s0;
	atomic_max_rlx_wave_equiv(255)_s32	$s0, [$d0+2], $s0;
	// 
	// Next sample
	// 
	atomic_max_global_rlx_wave_s32	$s0, [&GlobalVar], $s0;
	// 
	atomic_max_global_scacq_wave_s32	$s0, [&GlobalVar], $s0;
	atomic_max_global_screl_wave_s32	$s0, [&GlobalVar], $s0;
	atomic_max_global_scar_wave_s32	$s0, [&GlobalVar], $s0;
	atomic_max_global_rlx_wg_s32	$s0, [&GlobalVar], $s0;
	atomic_max_global_rlx_agent_s32	$s0, [&GlobalVar], $s0;
	atomic_max_global_rlx_system_s32	$s0, [&GlobalVar], $s0;
	atomic_max_global_rlx_wave_s32	$s0, [&GlobalVar], -1;
	atomic_max_global_rlx_wave_s32	$s0, [&GlobalVar], WAVESIZE;
	atomic_max_global_rlx_wave_s32	$s0, [&GlobalSig64], $s0;
	atomic_max_global_rlx_wave_s32	$s0, [$d0+2], $s0;
	atomic_max_global_rlx_wave_s32	$s0, [$d0+3], $s0;
	atomic_max_global_rlx_wave_s32	$s0, [$d0+5], $s0;
	atomic_max_global_rlx_wave_s32	$s0, [$d0+6], $s0;
	atomic_max_global_rlx_wave_s32	$s0, [0], $s0;
	atomic_max_global_rlx_wave_equiv(1)_s32	$s0, [&GlobalVar], $s0;
	atomic_max_global_rlx_wave_equiv(2)_s32	$s0, [&GlobalVar], $s0;
	atomic_max_global_rlx_wave_equiv(255)_s32	$s0, [&GlobalVar], $s0;
	// 
	// Next sample
	// 
	atomic_max_group_rlx_wave_s32	$s0, [&GroupVar], $s0;
	// 
	atomic_max_group_scacq_wave_s32	$s0, [&GroupVar], $s0;
	atomic_max_group_screl_wave_s32	$s0, [&GroupVar], $s0;
	atomic_max_group_scar_wave_s32	$s0, [&GroupVar], $s0;
	atomic_max_group_rlx_wg_s32	$s0, [&GroupVar], $s0;
	atomic_max_group_rlx_wave_s32	$s0, [&GroupVar], -1;
	atomic_max_group_rlx_wave_s32	$s0, [&GroupVar], WAVESIZE;
	atomic_max_group_rlx_wave_s32	$s0, [$s0+2], $s0;
	atomic_max_group_rlx_wave_s32	$s0, [$s0+3], $s0;
	atomic_max_group_rlx_wave_s32	$s0, [$s0+5], $s0;
	atomic_max_group_rlx_wave_s32	$s0, [$s0+6], $s0;
	atomic_max_group_rlx_wave_s32	$s0, [0], $s0;
	atomic_max_group_rlx_wave_equiv(1)_s32	$s0, [&GroupVar], $s0;
	atomic_max_group_rlx_wave_equiv(2)_s32	$s0, [&GroupVar], $s0;
	atomic_max_group_rlx_wave_equiv(255)_s32	$s0, [&GroupVar], $s0;
	// 
	// Next sample
	// 
	atomic_min_rlx_wave_s32	$s0, [$d0+2], $s0;
	// 
	atomic_min_scacq_wave_s32	$s0, [$d0+2], $s0;
	atomic_min_screl_wave_s32	$s0, [$d0+2], $s0;
	atomic_min_scar_wave_s32	$s0, [$d0+2], $s0;
	atomic_min_rlx_wg_s32	$s0, [$d0+2], $s0;
	atomic_min_rlx_agent_s32	$s0, [$d0+2], $s0;
	atomic_min_rlx_system_s32	$s0, [$d0+2], $s0;
	atomic_min_rlx_wave_s32	$s0, [$d0+2], -1;
	atomic_min_rlx_wave_s32	$s0, [$d0+2], WAVESIZE;
	atomic_min_rlx_wave_s32	$s0, [$d0+3], $s0;
	atomic_min_rlx_wave_s32	$s0, [$d0+5], $s0;
	atomic_min_rlx_wave_s32	$s0, [$d0+6], $s0;
	atomic_min_rlx_wave_s32	$s0, [0], $s0;
	atomic_min_rlx_wave_equiv(1)_s32	$s0, [$d0+2], $s0;
	atomic_min_rlx_wave_equiv(2)_s32	$s0, [$d0+2], $s0;
	atomic_min_rlx_wave_equiv(255)_s32	$s0, [$d0+2], $s0;
	// 
	// Next sample
	// 
	atomic_min_global_rlx_wave_s32	$s0, [&GlobalVar], $s0;
	// 
	atomic_min_global_scacq_wave_s32	$s0, [&GlobalVar], $s0;
	atomic_min_global_screl_wave_s32	$s0, [&GlobalVar], $s0;
	atomic_min_global_scar_wave_s32	$s0, [&GlobalVar], $s0;
	atomic_min_global_rlx_wg_s32	$s0, [&GlobalVar], $s0;
	atomic_min_global_rlx_agent_s32	$s0, [&GlobalVar], $s0;
	atomic_min_global_rlx_system_s32	$s0, [&GlobalVar], $s0;
	atomic_min_global_rlx_wave_s32	$s0, [&GlobalVar], -1;
	atomic_min_global_rlx_wave_s32	$s0, [&GlobalVar], WAVESIZE;
	atomic_min_global_rlx_wave_s32	$s0, [&GlobalSig64], $s0;
	atomic_min_global_rlx_wave_s32	$s0, [$d0+2], $s0;
	atomic_min_global_rlx_wave_s32	$s0, [$d0+3], $s0;
	atomic_min_global_rlx_wave_s32	$s0, [$d0+5], $s0;
	atomic_min_global_rlx_wave_s32	$s0, [$d0+6], $s0;
	atomic_min_global_rlx_wave_s32	$s0, [0], $s0;
	atomic_min_global_rlx_wave_equiv(1)_s32	$s0, [&GlobalVar], $s0;
	atomic_min_global_rlx_wave_equiv(2)_s32	$s0, [&GlobalVar], $s0;
	atomic_min_global_rlx_wave_equiv(255)_s32	$s0, [&GlobalVar], $s0;
	// 
	// Next sample
	// 
	atomic_min_group_rlx_wave_s32	$s0, [&GroupVar], $s0;
	// 
	atomic_min_group_scacq_wave_s32	$s0, [&GroupVar], $s0;
	atomic_min_group_screl_wave_s32	$s0, [&GroupVar], $s0;
	atomic_min_group_scar_wave_s32	$s0, [&GroupVar], $s0;
	atomic_min_group_rlx_wg_s32	$s0, [&GroupVar], $s0;
	atomic_min_group_rlx_wave_s32	$s0, [&GroupVar], -1;
	atomic_min_group_rlx_wave_s32	$s0, [&GroupVar], WAVESIZE;
	atomic_min_group_rlx_wave_s32	$s0, [$s0+2], $s0;
	atomic_min_group_rlx_wave_s32	$s0, [$s0+3], $s0;
	atomic_min_group_rlx_wave_s32	$s0, [$s0+5], $s0;
	atomic_min_group_rlx_wave_s32	$s0, [$s0+6], $s0;
	atomic_min_group_rlx_wave_s32	$s0, [0], $s0;
	atomic_min_group_rlx_wave_equiv(1)_s32	$s0, [&GroupVar], $s0;
	atomic_min_group_rlx_wave_equiv(2)_s32	$s0, [&GroupVar], $s0;
	atomic_min_group_rlx_wave_equiv(255)_s32	$s0, [&GroupVar], $s0;
	// 
	// Next sample
	// 
	atomic_sub_rlx_wave_s32	$s0, [$d0+2], $s0;
	// 
	atomic_sub_scacq_wave_s32	$s0, [$d0+2], $s0;
	atomic_sub_screl_wave_s32	$s0, [$d0+2], $s0;
	atomic_sub_scar_wave_s32	$s0, [$d0+2], $s0;
	atomic_sub_rlx_wg_s32	$s0, [$d0+2], $s0;
	atomic_sub_rlx_agent_s32	$s0, [$d0+2], $s0;
	atomic_sub_rlx_system_s32	$s0, [$d0+2], $s0;
	atomic_sub_rlx_wave_s32	$s0, [$d0+2], -1;
	atomic_sub_rlx_wave_s32	$s0, [$d0+2], WAVESIZE;
	atomic_sub_rlx_wave_s32	$s0, [$d0+3], $s0;
	atomic_sub_rlx_wave_s32	$s0, [$d0+5], $s0;
	atomic_sub_rlx_wave_s32	$s0, [$d0+6], $s0;
	atomic_sub_rlx_wave_s32	$s0, [0], $s0;
	atomic_sub_rlx_wave_equiv(1)_s32	$s0, [$d0+2], $s0;
	atomic_sub_rlx_wave_equiv(2)_s32	$s0, [$d0+2], $s0;
	atomic_sub_rlx_wave_equiv(255)_s32	$s0, [$d0+2], $s0;
	// 
	// Next sample
	// 
	atomic_sub_global_rlx_wave_s32	$s0, [&GlobalVar], $s0;
	// 
	atomic_sub_global_scacq_wave_s32	$s0, [&GlobalVar], $s0;
	atomic_sub_global_screl_wave_s32	$s0, [&GlobalVar], $s0;
	atomic_sub_global_scar_wave_s32	$s0, [&GlobalVar], $s0;
	atomic_sub_global_rlx_wg_s32	$s0, [&GlobalVar], $s0;
	atomic_sub_global_rlx_agent_s32	$s0, [&GlobalVar], $s0;
	atomic_sub_global_rlx_system_s32	$s0, [&GlobalVar], $s0;
	atomic_sub_global_rlx_wave_s32	$s0, [&GlobalVar], -1;
	atomic_sub_global_rlx_wave_s32	$s0, [&GlobalVar], WAVESIZE;
	atomic_sub_global_rlx_wave_s32	$s0, [&GlobalSig64], $s0;
	atomic_sub_global_rlx_wave_s32	$s0, [$d0+2], $s0;
	atomic_sub_global_rlx_wave_s32	$s0, [$d0+3], $s0;
	atomic_sub_global_rlx_wave_s32	$s0, [$d0+5], $s0;
	atomic_sub_global_rlx_wave_s32	$s0, [$d0+6], $s0;
	atomic_sub_global_rlx_wave_s32	$s0, [0], $s0;
	atomic_sub_global_rlx_wave_equiv(1)_s32	$s0, [&GlobalVar], $s0;
	atomic_sub_global_rlx_wave_equiv(2)_s32	$s0, [&GlobalVar], $s0;
	atomic_sub_global_rlx_wave_equiv(255)_s32	$s0, [&GlobalVar], $s0;
	// 
	// Next sample
	// 
	atomic_sub_group_rlx_wave_s32	$s0, [&GroupVar], $s0;
	// 
	atomic_sub_group_scacq_wave_s32	$s0, [&GroupVar], $s0;
	atomic_sub_group_screl_wave_s32	$s0, [&GroupVar], $s0;
	atomic_sub_group_scar_wave_s32	$s0, [&GroupVar], $s0;
	atomic_sub_group_rlx_wg_s32	$s0, [&GroupVar], $s0;
	atomic_sub_group_rlx_wave_s32	$s0, [&GroupVar], -1;
	atomic_sub_group_rlx_wave_s32	$s0, [&GroupVar], WAVESIZE;
	atomic_sub_group_rlx_wave_s32	$s0, [$s0+2], $s0;
	atomic_sub_group_rlx_wave_s32	$s0, [$s0+3], $s0;
	atomic_sub_group_rlx_wave_s32	$s0, [$s0+5], $s0;
	atomic_sub_group_rlx_wave_s32	$s0, [$s0+6], $s0;
	atomic_sub_group_rlx_wave_s32	$s0, [0], $s0;
	atomic_sub_group_rlx_wave_equiv(1)_s32	$s0, [&GroupVar], $s0;
	atomic_sub_group_rlx_wave_equiv(2)_s32	$s0, [&GroupVar], $s0;
	atomic_sub_group_rlx_wave_equiv(255)_s32	$s0, [&GroupVar], $s0;
	// 
	// Next sample
	// 
	atomic_add_rlx_wave_s64	$d0, [$d0+2], $d0;
	// 
	atomic_add_scacq_wave_s64	$d0, [$d0+2], $d0;
	atomic_add_screl_wave_s64	$d0, [$d0+2], $d0;
	atomic_add_scar_wave_s64	$d0, [$d0+2], $d0;
	atomic_add_rlx_wg_s64	$d0, [$d0+2], $d0;
	atomic_add_rlx_agent_s64	$d0, [$d0+2], $d0;
	atomic_add_rlx_system_s64	$d0, [$d0+2], $d0;
	atomic_add_rlx_wave_s64	$d0, [$d0+2], -1;
	atomic_add_rlx_wave_s64	$d0, [$d0+2], WAVESIZE;
	atomic_add_rlx_wave_s64	$d0, [$d0+3], $d0;
	atomic_add_rlx_wave_s64	$d0, [$d0+5], $d0;
	atomic_add_rlx_wave_s64	$d0, [$d0+6], $d0;
	atomic_add_rlx_wave_s64	$d0, [0], $d0;
	atomic_add_rlx_wave_equiv(1)_s64	$d0, [$d0+2], $d0;
	atomic_add_rlx_wave_equiv(2)_s64	$d0, [$d0+2], $d0;
	atomic_add_rlx_wave_equiv(255)_s64	$d0, [$d0+2], $d0;
	// 
	// Next sample
	// 
	atomic_add_global_rlx_wave_s64	$d0, [&GlobalVar], $d0;
	// 
	atomic_add_global_scacq_wave_s64	$d0, [&GlobalVar], $d0;
	atomic_add_global_screl_wave_s64	$d0, [&GlobalVar], $d0;
	atomic_add_global_scar_wave_s64	$d0, [&GlobalVar], $d0;
	atomic_add_global_rlx_wg_s64	$d0, [&GlobalVar], $d0;
	atomic_add_global_rlx_agent_s64	$d0, [&GlobalVar], $d0;
	atomic_add_global_rlx_system_s64	$d0, [&GlobalVar], $d0;
	atomic_add_global_rlx_wave_s64	$d0, [&GlobalVar], -1;
	atomic_add_global_rlx_wave_s64	$d0, [&GlobalVar], WAVESIZE;
	atomic_add_global_rlx_wave_s64	$d0, [&GlobalSig64], $d0;
	atomic_add_global_rlx_wave_s64	$d0, [$d0+2], $d0;
	atomic_add_global_rlx_wave_s64	$d0, [$d0+3], $d0;
	atomic_add_global_rlx_wave_s64	$d0, [$d0+5], $d0;
	atomic_add_global_rlx_wave_s64	$d0, [$d0+6], $d0;
	atomic_add_global_rlx_wave_s64	$d0, [0], $d0;
	atomic_add_global_rlx_wave_equiv(1)_s64	$d0, [&GlobalVar], $d0;
	atomic_add_global_rlx_wave_equiv(2)_s64	$d0, [&GlobalVar], $d0;
	atomic_add_global_rlx_wave_equiv(255)_s64	$d0, [&GlobalVar], $d0;
	// 
	// Next sample
	// 
	atomic_add_group_rlx_wave_s64	$d0, [&GroupVar], $d0;
	// 
	atomic_add_group_scacq_wave_s64	$d0, [&GroupVar], $d0;
	atomic_add_group_screl_wave_s64	$d0, [&GroupVar], $d0;
	atomic_add_group_scar_wave_s64	$d0, [&GroupVar], $d0;
	atomic_add_group_rlx_wg_s64	$d0, [&GroupVar], $d0;
	atomic_add_group_rlx_wave_s64	$d0, [&GroupVar], -1;
	atomic_add_group_rlx_wave_s64	$d0, [&GroupVar], WAVESIZE;
	atomic_add_group_rlx_wave_s64	$d0, [$s0+2], $d0;
	atomic_add_group_rlx_wave_s64	$d0, [$s0+3], $d0;
	atomic_add_group_rlx_wave_s64	$d0, [$s0+5], $d0;
	atomic_add_group_rlx_wave_s64	$d0, [$s0+6], $d0;
	atomic_add_group_rlx_wave_s64	$d0, [0], $d0;
	atomic_add_group_rlx_wave_equiv(1)_s64	$d0, [&GroupVar], $d0;
	atomic_add_group_rlx_wave_equiv(2)_s64	$d0, [&GroupVar], $d0;
	atomic_add_group_rlx_wave_equiv(255)_s64	$d0, [&GroupVar], $d0;
	// 
	// Next sample
	// 
	atomic_max_rlx_wave_s64	$d0, [$d0+2], $d0;
	// 
	atomic_max_scacq_wave_s64	$d0, [$d0+2], $d0;
	atomic_max_screl_wave_s64	$d0, [$d0+2], $d0;
	atomic_max_scar_wave_s64	$d0, [$d0+2], $d0;
	atomic_max_rlx_wg_s64	$d0, [$d0+2], $d0;
	atomic_max_rlx_agent_s64	$d0, [$d0+2], $d0;
	atomic_max_rlx_system_s64	$d0, [$d0+2], $d0;
	atomic_max_rlx_wave_s64	$d0, [$d0+2], -1;
	atomic_max_rlx_wave_s64	$d0, [$d0+2], WAVESIZE;
	atomic_max_rlx_wave_s64	$d0, [$d0+3], $d0;
	atomic_max_rlx_wave_s64	$d0, [$d0+5], $d0;
	atomic_max_rlx_wave_s64	$d0, [$d0+6], $d0;
	atomic_max_rlx_wave_s64	$d0, [0], $d0;
	atomic_max_rlx_wave_equiv(1)_s64	$d0, [$d0+2], $d0;
	atomic_max_rlx_wave_equiv(2)_s64	$d0, [$d0+2], $d0;
	atomic_max_rlx_wave_equiv(255)_s64	$d0, [$d0+2], $d0;
	// 
	// Next sample
	// 
	atomic_max_global_rlx_wave_s64	$d0, [&GlobalVar], $d0;
	// 
	atomic_max_global_scacq_wave_s64	$d0, [&GlobalVar], $d0;
	atomic_max_global_screl_wave_s64	$d0, [&GlobalVar], $d0;
	atomic_max_global_scar_wave_s64	$d0, [&GlobalVar], $d0;
	atomic_max_global_rlx_wg_s64	$d0, [&GlobalVar], $d0;
	atomic_max_global_rlx_agent_s64	$d0, [&GlobalVar], $d0;
	atomic_max_global_rlx_system_s64	$d0, [&GlobalVar], $d0;
	atomic_max_global_rlx_wave_s64	$d0, [&GlobalVar], -1;
	atomic_max_global_rlx_wave_s64	$d0, [&GlobalVar], WAVESIZE;
	atomic_max_global_rlx_wave_s64	$d0, [&GlobalSig64], $d0;
	atomic_max_global_rlx_wave_s64	$d0, [$d0+2], $d0;
	atomic_max_global_rlx_wave_s64	$d0, [$d0+3], $d0;
	atomic_max_global_rlx_wave_s64	$d0, [$d0+5], $d0;
	atomic_max_global_rlx_wave_s64	$d0, [$d0+6], $d0;
	atomic_max_global_rlx_wave_s64	$d0, [0], $d0;
	atomic_max_global_rlx_wave_equiv(1)_s64	$d0, [&GlobalVar], $d0;
	atomic_max_global_rlx_wave_equiv(2)_s64	$d0, [&GlobalVar], $d0;
	atomic_max_global_rlx_wave_equiv(255)_s64	$d0, [&GlobalVar], $d0;
	// 
	// Next sample
	// 
	atomic_max_group_rlx_wave_s64	$d0, [&GroupVar], $d0;
	// 
	atomic_max_group_scacq_wave_s64	$d0, [&GroupVar], $d0;
	atomic_max_group_screl_wave_s64	$d0, [&GroupVar], $d0;
	atomic_max_group_scar_wave_s64	$d0, [&GroupVar], $d0;
	atomic_max_group_rlx_wg_s64	$d0, [&GroupVar], $d0;
	atomic_max_group_rlx_wave_s64	$d0, [&GroupVar], -1;
	atomic_max_group_rlx_wave_s64	$d0, [&GroupVar], WAVESIZE;
	atomic_max_group_rlx_wave_s64	$d0, [$s0+2], $d0;
	atomic_max_group_rlx_wave_s64	$d0, [$s0+3], $d0;
	atomic_max_group_rlx_wave_s64	$d0, [$s0+5], $d0;
	atomic_max_group_rlx_wave_s64	$d0, [$s0+6], $d0;
	atomic_max_group_rlx_wave_s64	$d0, [0], $d0;
	atomic_max_group_rlx_wave_equiv(1)_s64	$d0, [&GroupVar], $d0;
	atomic_max_group_rlx_wave_equiv(2)_s64	$d0, [&GroupVar], $d0;
	atomic_max_group_rlx_wave_equiv(255)_s64	$d0, [&GroupVar], $d0;
	// 
	// Next sample
	// 
	atomic_min_rlx_wave_s64	$d0, [$d0+2], $d0;
	// 
	atomic_min_scacq_wave_s64	$d0, [$d0+2], $d0;
	atomic_min_screl_wave_s64	$d0, [$d0+2], $d0;
	atomic_min_scar_wave_s64	$d0, [$d0+2], $d0;
	atomic_min_rlx_wg_s64	$d0, [$d0+2], $d0;
	atomic_min_rlx_agent_s64	$d0, [$d0+2], $d0;
	atomic_min_rlx_system_s64	$d0, [$d0+2], $d0;
	atomic_min_rlx_wave_s64	$d0, [$d0+2], -1;
	atomic_min_rlx_wave_s64	$d0, [$d0+2], WAVESIZE;
	atomic_min_rlx_wave_s64	$d0, [$d0+3], $d0;
	atomic_min_rlx_wave_s64	$d0, [$d0+5], $d0;
	atomic_min_rlx_wave_s64	$d0, [$d0+6], $d0;
	atomic_min_rlx_wave_s64	$d0, [0], $d0;
	atomic_min_rlx_wave_equiv(1)_s64	$d0, [$d0+2], $d0;
	atomic_min_rlx_wave_equiv(2)_s64	$d0, [$d0+2], $d0;
	atomic_min_rlx_wave_equiv(255)_s64	$d0, [$d0+2], $d0;
	// 
	// Next sample
	// 
	atomic_min_global_rlx_wave_s64	$d0, [&GlobalVar], $d0;
	// 
	atomic_min_global_scacq_wave_s64	$d0, [&GlobalVar], $d0;
	atomic_min_global_screl_wave_s64	$d0, [&GlobalVar], $d0;
	atomic_min_global_scar_wave_s64	$d0, [&GlobalVar], $d0;
	atomic_min_global_rlx_wg_s64	$d0, [&GlobalVar], $d0;
	atomic_min_global_rlx_agent_s64	$d0, [&GlobalVar], $d0;
	atomic_min_global_rlx_system_s64	$d0, [&GlobalVar], $d0;
	atomic_min_global_rlx_wave_s64	$d0, [&GlobalVar], -1;
	atomic_min_global_rlx_wave_s64	$d0, [&GlobalVar], WAVESIZE;
	atomic_min_global_rlx_wave_s64	$d0, [&GlobalSig64], $d0;
	atomic_min_global_rlx_wave_s64	$d0, [$d0+2], $d0;
	atomic_min_global_rlx_wave_s64	$d0, [$d0+3], $d0;
	atomic_min_global_rlx_wave_s64	$d0, [$d0+5], $d0;
	atomic_min_global_rlx_wave_s64	$d0, [$d0+6], $d0;
	atomic_min_global_rlx_wave_s64	$d0, [0], $d0;
	atomic_min_global_rlx_wave_equiv(1)_s64	$d0, [&GlobalVar], $d0;
	atomic_min_global_rlx_wave_equiv(2)_s64	$d0, [&GlobalVar], $d0;
	atomic_min_global_rlx_wave_equiv(255)_s64	$d0, [&GlobalVar], $d0;
	// 
	// Next sample
	// 
	atomic_min_group_rlx_wave_s64	$d0, [&GroupVar], $d0;
	// 
	atomic_min_group_scacq_wave_s64	$d0, [&GroupVar], $d0;
	atomic_min_group_screl_wave_s64	$d0, [&GroupVar], $d0;
	atomic_min_group_scar_wave_s64	$d0, [&GroupVar], $d0;
	atomic_min_group_rlx_wg_s64	$d0, [&GroupVar], $d0;
	atomic_min_group_rlx_wave_s64	$d0, [&GroupVar], -1;
	atomic_min_group_rlx_wave_s64	$d0, [&GroupVar], WAVESIZE;
	atomic_min_group_rlx_wave_s64	$d0, [$s0+2], $d0;
	atomic_min_group_rlx_wave_s64	$d0, [$s0+3], $d0;
	atomic_min_group_rlx_wave_s64	$d0, [$s0+5], $d0;
	atomic_min_group_rlx_wave_s64	$d0, [$s0+6], $d0;
	atomic_min_group_rlx_wave_s64	$d0, [0], $d0;
	atomic_min_group_rlx_wave_equiv(1)_s64	$d0, [&GroupVar], $d0;
	atomic_min_group_rlx_wave_equiv(2)_s64	$d0, [&GroupVar], $d0;
	atomic_min_group_rlx_wave_equiv(255)_s64	$d0, [&GroupVar], $d0;
	// 
	// Next sample
	// 
	atomic_sub_rlx_wave_s64	$d0, [$d0+2], $d0;
	// 
	atomic_sub_scacq_wave_s64	$d0, [$d0+2], $d0;
	atomic_sub_screl_wave_s64	$d0, [$d0+2], $d0;
	atomic_sub_scar_wave_s64	$d0, [$d0+2], $d0;
	atomic_sub_rlx_wg_s64	$d0, [$d0+2], $d0;
	atomic_sub_rlx_agent_s64	$d0, [$d0+2], $d0;
	atomic_sub_rlx_system_s64	$d0, [$d0+2], $d0;
	atomic_sub_rlx_wave_s64	$d0, [$d0+2], -1;
	atomic_sub_rlx_wave_s64	$d0, [$d0+2], WAVESIZE;
	atomic_sub_rlx_wave_s64	$d0, [$d0+3], $d0;
	atomic_sub_rlx_wave_s64	$d0, [$d0+5], $d0;
	atomic_sub_rlx_wave_s64	$d0, [$d0+6], $d0;
	atomic_sub_rlx_wave_s64	$d0, [0], $d0;
	atomic_sub_rlx_wave_equiv(1)_s64	$d0, [$d0+2], $d0;
	atomic_sub_rlx_wave_equiv(2)_s64	$d0, [$d0+2], $d0;
	atomic_sub_rlx_wave_equiv(255)_s64	$d0, [$d0+2], $d0;
	// 
	// Next sample
	// 
	atomic_sub_global_rlx_wave_s64	$d0, [&GlobalVar], $d0;
	// 
	atomic_sub_global_scacq_wave_s64	$d0, [&GlobalVar], $d0;
	atomic_sub_global_screl_wave_s64	$d0, [&GlobalVar], $d0;
	atomic_sub_global_scar_wave_s64	$d0, [&GlobalVar], $d0;
	atomic_sub_global_rlx_wg_s64	$d0, [&GlobalVar], $d0;
	atomic_sub_global_rlx_agent_s64	$d0, [&GlobalVar], $d0;
	atomic_sub_global_rlx_system_s64	$d0, [&GlobalVar], $d0;
	atomic_sub_global_rlx_wave_s64	$d0, [&GlobalVar], -1;
	atomic_sub_global_rlx_wave_s64	$d0, [&GlobalVar], WAVESIZE;
	atomic_sub_global_rlx_wave_s64	$d0, [&GlobalSig64], $d0;
	atomic_sub_global_rlx_wave_s64	$d0, [$d0+2], $d0;
	atomic_sub_global_rlx_wave_s64	$d0, [$d0+3], $d0;
	atomic_sub_global_rlx_wave_s64	$d0, [$d0+5], $d0;
	atomic_sub_global_rlx_wave_s64	$d0, [$d0+6], $d0;
	atomic_sub_global_rlx_wave_s64	$d0, [0], $d0;
	atomic_sub_global_rlx_wave_equiv(1)_s64	$d0, [&GlobalVar], $d0;
	atomic_sub_global_rlx_wave_equiv(2)_s64	$d0, [&GlobalVar], $d0;
	atomic_sub_global_rlx_wave_equiv(255)_s64	$d0, [&GlobalVar], $d0;
	// 
	// Next sample
	// 
	atomic_sub_group_rlx_wave_s64	$d0, [&GroupVar], $d0;
	// 
	atomic_sub_group_scacq_wave_s64	$d0, [&GroupVar], $d0;
	atomic_sub_group_screl_wave_s64	$d0, [&GroupVar], $d0;
	atomic_sub_group_scar_wave_s64	$d0, [&GroupVar], $d0;
	atomic_sub_group_rlx_wg_s64	$d0, [&GroupVar], $d0;
	atomic_sub_group_rlx_wave_s64	$d0, [&GroupVar], -1;
	atomic_sub_group_rlx_wave_s64	$d0, [&GroupVar], WAVESIZE;
	atomic_sub_group_rlx_wave_s64	$d0, [$s0+2], $d0;
	atomic_sub_group_rlx_wave_s64	$d0, [$s0+3], $d0;
	atomic_sub_group_rlx_wave_s64	$d0, [$s0+5], $d0;
	atomic_sub_group_rlx_wave_s64	$d0, [$s0+6], $d0;
	atomic_sub_group_rlx_wave_s64	$d0, [0], $d0;
	atomic_sub_group_rlx_wave_equiv(1)_s64	$d0, [&GroupVar], $d0;
	atomic_sub_group_rlx_wave_equiv(2)_s64	$d0, [&GroupVar], $d0;
	atomic_sub_group_rlx_wave_equiv(255)_s64	$d0, [&GroupVar], $d0;
	// 
	// Next sample
	// 
	atomic_and_rlx_wave_b32	$s0, [$d0+2], $s0;
	// 
	atomic_and_scacq_wave_b32	$s0, [$d0+2], $s0;
	atomic_and_screl_wave_b32	$s0, [$d0+2], $s0;
	atomic_and_scar_wave_b32	$s0, [$d0+2], $s0;
	atomic_and_rlx_wg_b32	$s0, [$d0+2], $s0;
	atomic_and_rlx_agent_b32	$s0, [$d0+2], $s0;
	atomic_and_rlx_system_b32	$s0, [$d0+2], $s0;
	atomic_and_rlx_wave_b32	$s0, [$d0+2], -1;
	atomic_and_rlx_wave_b32	$s0, [$d0+2], WAVESIZE;
	atomic_and_rlx_wave_b32	$s0, [$d0+3], $s0;
	atomic_and_rlx_wave_b32	$s0, [$d0+5], $s0;
	atomic_and_rlx_wave_b32	$s0, [$d0+6], $s0;
	atomic_and_rlx_wave_b32	$s0, [0], $s0;
	atomic_and_rlx_wave_equiv(1)_b32	$s0, [$d0+2], $s0;
	atomic_and_rlx_wave_equiv(2)_b32	$s0, [$d0+2], $s0;
	atomic_and_rlx_wave_equiv(255)_b32	$s0, [$d0+2], $s0;
	// 
	// Next sample
	// 
	atomic_and_global_rlx_wave_b32	$s0, [&GlobalVar], $s0;
	// 
	atomic_and_global_scacq_wave_b32	$s0, [&GlobalVar], $s0;
	atomic_and_global_screl_wave_b32	$s0, [&GlobalVar], $s0;
	atomic_and_global_scar_wave_b32	$s0, [&GlobalVar], $s0;
	atomic_and_global_rlx_wg_b32	$s0, [&GlobalVar], $s0;
	atomic_and_global_rlx_agent_b32	$s0, [&GlobalVar], $s0;
	atomic_and_global_rlx_system_b32	$s0, [&GlobalVar], $s0;
	atomic_and_global_rlx_wave_b32	$s0, [&GlobalVar], -1;
	atomic_and_global_rlx_wave_b32	$s0, [&GlobalVar], WAVESIZE;
	atomic_and_global_rlx_wave_b32	$s0, [&GlobalSig64], $s0;
	atomic_and_global_rlx_wave_b32	$s0, [$d0+2], $s0;
	atomic_and_global_rlx_wave_b32	$s0, [$d0+3], $s0;
	atomic_and_global_rlx_wave_b32	$s0, [$d0+5], $s0;
	atomic_and_global_rlx_wave_b32	$s0, [$d0+6], $s0;
	atomic_and_global_rlx_wave_b32	$s0, [0], $s0;
	atomic_and_global_rlx_wave_equiv(1)_b32	$s0, [&GlobalVar], $s0;
	atomic_and_global_rlx_wave_equiv(2)_b32	$s0, [&GlobalVar], $s0;
	atomic_and_global_rlx_wave_equiv(255)_b32	$s0, [&GlobalVar], $s0;
	// 
	// Next sample
	// 
	atomic_and_group_rlx_wave_b32	$s0, [&GroupVar], $s0;
	// 
	atomic_and_group_scacq_wave_b32	$s0, [&GroupVar], $s0;
	atomic_and_group_screl_wave_b32	$s0, [&GroupVar], $s0;
	atomic_and_group_scar_wave_b32	$s0, [&GroupVar], $s0;
	atomic_and_group_rlx_wg_b32	$s0, [&GroupVar], $s0;
	atomic_and_group_rlx_wave_b32	$s0, [&GroupVar], -1;
	atomic_and_group_rlx_wave_b32	$s0, [&GroupVar], WAVESIZE;
	atomic_and_group_rlx_wave_b32	$s0, [$s0+2], $s0;
	atomic_and_group_rlx_wave_b32	$s0, [$s0+3], $s0;
	atomic_and_group_rlx_wave_b32	$s0, [$s0+5], $s0;
	atomic_and_group_rlx_wave_b32	$s0, [$s0+6], $s0;
	atomic_and_group_rlx_wave_b32	$s0, [0], $s0;
	atomic_and_group_rlx_wave_equiv(1)_b32	$s0, [&GroupVar], $s0;
	atomic_and_group_rlx_wave_equiv(2)_b32	$s0, [&GroupVar], $s0;
	atomic_and_group_rlx_wave_equiv(255)_b32	$s0, [&GroupVar], $s0;
	// 
	// Next sample
	// 
	atomic_cas_rlx_wave_b32	$s0, [$d0+2], $s0, $s0;
	// 
	atomic_cas_scacq_wave_b32	$s0, [$d0+2], $s0, $s0;
	atomic_cas_screl_wave_b32	$s0, [$d0+2], $s0, $s0;
	atomic_cas_scar_wave_b32	$s0, [$d0+2], $s0, $s0;
	atomic_cas_rlx_wg_b32	$s0, [$d0+2], $s0, $s0;
	atomic_cas_rlx_agent_b32	$s0, [$d0+2], $s0, $s0;
	atomic_cas_rlx_system_b32	$s0, [$d0+2], $s0, $s0;
	atomic_cas_rlx_wave_b32	$s0, [$d0+2], -1, $s0;
	atomic_cas_rlx_wave_b32	$s0, [$d0+2], WAVESIZE, $s0;
	atomic_cas_rlx_wave_b32	$s0, [$d0+2], $s0, -1;
	atomic_cas_rlx_wave_b32	$s0, [$d0+2], $s0, WAVESIZE;
	atomic_cas_rlx_wave_b32	$s0, [$d0+3], $s0, $s0;
	atomic_cas_rlx_wave_b32	$s0, [$d0+5], $s0, $s0;
	atomic_cas_rlx_wave_b32	$s0, [$d0+6], $s0, $s0;
	atomic_cas_rlx_wave_b32	$s0, [0], $s0, $s0;
	atomic_cas_rlx_wave_equiv(1)_b32	$s0, [$d0+2], $s0, $s0;
	atomic_cas_rlx_wave_equiv(2)_b32	$s0, [$d0+2], $s0, $s0;
	atomic_cas_rlx_wave_equiv(255)_b32	$s0, [$d0+2], $s0, $s0;
	// 
	// Next sample
	// 
	atomic_cas_global_rlx_wave_b32	$s0, [&GlobalVar], $s0, $s0;
	// 
	atomic_cas_global_scacq_wave_b32	$s0, [&GlobalVar], $s0, $s0;
	atomic_cas_global_screl_wave_b32	$s0, [&GlobalVar], $s0, $s0;
	atomic_cas_global_scar_wave_b32	$s0, [&GlobalVar], $s0, $s0;
	atomic_cas_global_rlx_wg_b32	$s0, [&GlobalVar], $s0, $s0;
	atomic_cas_global_rlx_agent_b32	$s0, [&GlobalVar], $s0, $s0;
	atomic_cas_global_rlx_system_b32	$s0, [&GlobalVar], $s0, $s0;
	atomic_cas_global_rlx_wave_b32	$s0, [&GlobalVar], -1, $s0;
	atomic_cas_global_rlx_wave_b32	$s0, [&GlobalVar], WAVESIZE, $s0;
	atomic_cas_global_rlx_wave_b32	$s0, [&GlobalVar], $s0, -1;
	atomic_cas_global_rlx_wave_b32	$s0, [&GlobalVar], $s0, WAVESIZE;
	atomic_cas_global_rlx_wave_b32	$s0, [&GlobalSig64], $s0, $s0;
	atomic_cas_global_rlx_wave_b32	$s0, [$d0+2], $s0, $s0;
	atomic_cas_global_rlx_wave_b32	$s0, [$d0+3], $s0, $s0;
	atomic_cas_global_rlx_wave_b32	$s0, [$d0+5], $s0, $s0;
	atomic_cas_global_rlx_wave_b32	$s0, [$d0+6], $s0, $s0;
	atomic_cas_global_rlx_wave_b32	$s0, [0], $s0, $s0;
	atomic_cas_global_rlx_wave_equiv(1)_b32	$s0, [&GlobalVar], $s0, $s0;
	atomic_cas_global_rlx_wave_equiv(2)_b32	$s0, [&GlobalVar], $s0, $s0;
	atomic_cas_global_rlx_wave_equiv(255)_b32	$s0, [&GlobalVar], $s0, $s0;
	// 
	// Next sample
	// 
	atomic_cas_group_rlx_wave_b32	$s0, [&GroupVar], $s0, $s0;
	// 
	atomic_cas_group_scacq_wave_b32	$s0, [&GroupVar], $s0, $s0;
	atomic_cas_group_screl_wave_b32	$s0, [&GroupVar], $s0, $s0;
	atomic_cas_group_scar_wave_b32	$s0, [&GroupVar], $s0, $s0;
	atomic_cas_group_rlx_wg_b32	$s0, [&GroupVar], $s0, $s0;
	atomic_cas_group_rlx_wave_b32	$s0, [&GroupVar], -1, $s0;
	atomic_cas_group_rlx_wave_b32	$s0, [&GroupVar], WAVESIZE, $s0;
	atomic_cas_group_rlx_wave_b32	$s0, [&GroupVar], $s0, -1;
	atomic_cas_group_rlx_wave_b32	$s0, [&GroupVar], $s0, WAVESIZE;
	atomic_cas_group_rlx_wave_b32	$s0, [$s0+2], $s0, $s0;
	atomic_cas_group_rlx_wave_b32	$s0, [$s0+3], $s0, $s0;
	atomic_cas_group_rlx_wave_b32	$s0, [$s0+5], $s0, $s0;
	atomic_cas_group_rlx_wave_b32	$s0, [$s0+6], $s0, $s0;
	atomic_cas_group_rlx_wave_b32	$s0, [0], $s0, $s0;
	atomic_cas_group_rlx_wave_equiv(1)_b32	$s0, [&GroupVar], $s0, $s0;
	atomic_cas_group_rlx_wave_equiv(2)_b32	$s0, [&GroupVar], $s0, $s0;
	atomic_cas_group_rlx_wave_equiv(255)_b32	$s0, [&GroupVar], $s0, $s0;
	// 
	// Next sample
	// 
	atomic_exch_rlx_wave_b32	$s0, [$d0+2], $s0;
	// 
	atomic_exch_scacq_wave_b32	$s0, [$d0+2], $s0;
	atomic_exch_screl_wave_b32	$s0, [$d0+2], $s0;
	atomic_exch_scar_wave_b32	$s0, [$d0+2], $s0;
	atomic_exch_rlx_wg_b32	$s0, [$d0+2], $s0;
	atomic_exch_rlx_agent_b32	$s0, [$d0+2], $s0;
	atomic_exch_rlx_system_b32	$s0, [$d0+2], $s0;
	atomic_exch_rlx_wave_b32	$s0, [$d0+2], -1;
	atomic_exch_rlx_wave_b32	$s0, [$d0+2], WAVESIZE;
	atomic_exch_rlx_wave_b32	$s0, [$d0+3], $s0;
	atomic_exch_rlx_wave_b32	$s0, [$d0+5], $s0;
	atomic_exch_rlx_wave_b32	$s0, [$d0+6], $s0;
	atomic_exch_rlx_wave_b32	$s0, [0], $s0;
	atomic_exch_rlx_wave_equiv(1)_b32	$s0, [$d0+2], $s0;
	atomic_exch_rlx_wave_equiv(2)_b32	$s0, [$d0+2], $s0;
	atomic_exch_rlx_wave_equiv(255)_b32	$s0, [$d0+2], $s0;
	// 
	// Next sample
	// 
	atomic_exch_global_rlx_wave_b32	$s0, [&GlobalVar], $s0;
	// 
	atomic_exch_global_scacq_wave_b32	$s0, [&GlobalVar], $s0;
	atomic_exch_global_screl_wave_b32	$s0, [&GlobalVar], $s0;
	atomic_exch_global_scar_wave_b32	$s0, [&GlobalVar], $s0;
	atomic_exch_global_rlx_wg_b32	$s0, [&GlobalVar], $s0;
	atomic_exch_global_rlx_agent_b32	$s0, [&GlobalVar], $s0;
	atomic_exch_global_rlx_system_b32	$s0, [&GlobalVar], $s0;
	atomic_exch_global_rlx_wave_b32	$s0, [&GlobalVar], -1;
	atomic_exch_global_rlx_wave_b32	$s0, [&GlobalVar], WAVESIZE;
	atomic_exch_global_rlx_wave_b32	$s0, [&GlobalSig64], $s0;
	atomic_exch_global_rlx_wave_b32	$s0, [$d0+2], $s0;
	atomic_exch_global_rlx_wave_b32	$s0, [$d0+3], $s0;
	atomic_exch_global_rlx_wave_b32	$s0, [$d0+5], $s0;
	atomic_exch_global_rlx_wave_b32	$s0, [$d0+6], $s0;
	atomic_exch_global_rlx_wave_b32	$s0, [0], $s0;
	atomic_exch_global_rlx_wave_equiv(1)_b32	$s0, [&GlobalVar], $s0;
	atomic_exch_global_rlx_wave_equiv(2)_b32	$s0, [&GlobalVar], $s0;
	atomic_exch_global_rlx_wave_equiv(255)_b32	$s0, [&GlobalVar], $s0;
	// 
	// Next sample
	// 
	atomic_exch_group_rlx_wave_b32	$s0, [&GroupVar], $s0;
	// 
	atomic_exch_group_scacq_wave_b32	$s0, [&GroupVar], $s0;
	atomic_exch_group_screl_wave_b32	$s0, [&GroupVar], $s0;
	atomic_exch_group_scar_wave_b32	$s0, [&GroupVar], $s0;
	atomic_exch_group_rlx_wg_b32	$s0, [&GroupVar], $s0;
	atomic_exch_group_rlx_wave_b32	$s0, [&GroupVar], -1;
	atomic_exch_group_rlx_wave_b32	$s0, [&GroupVar], WAVESIZE;
	atomic_exch_group_rlx_wave_b32	$s0, [$s0+2], $s0;
	atomic_exch_group_rlx_wave_b32	$s0, [$s0+3], $s0;
	atomic_exch_group_rlx_wave_b32	$s0, [$s0+5], $s0;
	atomic_exch_group_rlx_wave_b32	$s0, [$s0+6], $s0;
	atomic_exch_group_rlx_wave_b32	$s0, [0], $s0;
	atomic_exch_group_rlx_wave_equiv(1)_b32	$s0, [&GroupVar], $s0;
	atomic_exch_group_rlx_wave_equiv(2)_b32	$s0, [&GroupVar], $s0;
	atomic_exch_group_rlx_wave_equiv(255)_b32	$s0, [&GroupVar], $s0;
	// 
	// Next sample
	// 
	atomic_ld_rlx_wave_b32	$s0, [$d0+2];
	// 
	atomic_ld_scacq_wave_b32	$s0, [$d0+2];
	atomic_ld_rlx_wg_b32	$s0, [$d0+2];
	atomic_ld_rlx_agent_b32	$s0, [$d0+2];
	atomic_ld_rlx_system_b32	$s0, [$d0+2];
	atomic_ld_rlx_wave_b32	$s0, [$d0+3];
	atomic_ld_rlx_wave_b32	$s0, [$d0+5];
	atomic_ld_rlx_wave_b32	$s0, [$d0+6];
	atomic_ld_rlx_wave_b32	$s0, [0];
	atomic_ld_rlx_wave_equiv(1)_b32	$s0, [$d0+2];
	atomic_ld_rlx_wave_equiv(2)_b32	$s0, [$d0+2];
	atomic_ld_rlx_wave_equiv(255)_b32	$s0, [$d0+2];
	// 
	// Next sample
	// 
	atomic_ld_global_rlx_wave_b32	$s0, [&GlobalVar];
	// 
	atomic_ld_global_scacq_wave_b32	$s0, [&GlobalVar];
	atomic_ld_global_rlx_wg_b32	$s0, [&GlobalVar];
	atomic_ld_global_rlx_agent_b32	$s0, [&GlobalVar];
	atomic_ld_global_rlx_system_b32	$s0, [&GlobalVar];
	atomic_ld_global_rlx_wave_b32	$s0, [&GlobalSig64];
	atomic_ld_global_rlx_wave_b32	$s0, [$d0+2];
	atomic_ld_global_rlx_wave_b32	$s0, [$d0+3];
	atomic_ld_global_rlx_wave_b32	$s0, [$d0+5];
	atomic_ld_global_rlx_wave_b32	$s0, [$d0+6];
	atomic_ld_global_rlx_wave_b32	$s0, [0];
	atomic_ld_global_rlx_wave_equiv(1)_b32	$s0, [&GlobalVar];
	atomic_ld_global_rlx_wave_equiv(2)_b32	$s0, [&GlobalVar];
	atomic_ld_global_rlx_wave_equiv(255)_b32	$s0, [&GlobalVar];
	// 
	// Next sample
	// 
	atomic_ld_group_rlx_wave_b32	$s0, [&GroupVar];
	// 
	atomic_ld_group_scacq_wave_b32	$s0, [&GroupVar];
	atomic_ld_group_rlx_wg_b32	$s0, [&GroupVar];
	atomic_ld_group_rlx_wave_b32	$s0, [$s0+2];
	atomic_ld_group_rlx_wave_b32	$s0, [$s0+3];
	atomic_ld_group_rlx_wave_b32	$s0, [$s0+5];
	atomic_ld_group_rlx_wave_b32	$s0, [$s0+6];
	atomic_ld_group_rlx_wave_b32	$s0, [0];
	atomic_ld_group_rlx_wave_equiv(1)_b32	$s0, [&GroupVar];
	atomic_ld_group_rlx_wave_equiv(2)_b32	$s0, [&GroupVar];
	atomic_ld_group_rlx_wave_equiv(255)_b32	$s0, [&GroupVar];
	// 
	// Next sample
	// 
	atomic_or_rlx_wave_b32	$s0, [$d0+2], $s0;
	// 
	atomic_or_scacq_wave_b32	$s0, [$d0+2], $s0;
	atomic_or_screl_wave_b32	$s0, [$d0+2], $s0;
	atomic_or_scar_wave_b32	$s0, [$d0+2], $s0;
	atomic_or_rlx_wg_b32	$s0, [$d0+2], $s0;
	atomic_or_rlx_agent_b32	$s0, [$d0+2], $s0;
	atomic_or_rlx_system_b32	$s0, [$d0+2], $s0;
	atomic_or_rlx_wave_b32	$s0, [$d0+2], -1;
	atomic_or_rlx_wave_b32	$s0, [$d0+2], WAVESIZE;
	atomic_or_rlx_wave_b32	$s0, [$d0+3], $s0;
	atomic_or_rlx_wave_b32	$s0, [$d0+5], $s0;
	atomic_or_rlx_wave_b32	$s0, [$d0+6], $s0;
	atomic_or_rlx_wave_b32	$s0, [0], $s0;
	atomic_or_rlx_wave_equiv(1)_b32	$s0, [$d0+2], $s0;
	atomic_or_rlx_wave_equiv(2)_b32	$s0, [$d0+2], $s0;
	atomic_or_rlx_wave_equiv(255)_b32	$s0, [$d0+2], $s0;
	// 
	// Next sample
	// 
	atomic_or_global_rlx_wave_b32	$s0, [&GlobalVar], $s0;
	// 
	atomic_or_global_scacq_wave_b32	$s0, [&GlobalVar], $s0;
	atomic_or_global_screl_wave_b32	$s0, [&GlobalVar], $s0;
	atomic_or_global_scar_wave_b32	$s0, [&GlobalVar], $s0;
	atomic_or_global_rlx_wg_b32	$s0, [&GlobalVar], $s0;
	atomic_or_global_rlx_agent_b32	$s0, [&GlobalVar], $s0;
	atomic_or_global_rlx_system_b32	$s0, [&GlobalVar], $s0;
	atomic_or_global_rlx_wave_b32	$s0, [&GlobalVar], -1;
	atomic_or_global_rlx_wave_b32	$s0, [&GlobalVar], WAVESIZE;
	atomic_or_global_rlx_wave_b32	$s0, [&GlobalSig64], $s0;
	atomic_or_global_rlx_wave_b32	$s0, [$d0+2], $s0;
	atomic_or_global_rlx_wave_b32	$s0, [$d0+3], $s0;
	atomic_or_global_rlx_wave_b32	$s0, [$d0+5], $s0;
	atomic_or_global_rlx_wave_b32	$s0, [$d0+6], $s0;
	atomic_or_global_rlx_wave_b32	$s0, [0], $s0;
	atomic_or_global_rlx_wave_equiv(1)_b32	$s0, [&GlobalVar], $s0;
	atomic_or_global_rlx_wave_equiv(2)_b32	$s0, [&GlobalVar], $s0;
	atomic_or_global_rlx_wave_equiv(255)_b32	$s0, [&GlobalVar], $s0;
	// 
	// Next sample
	// 
	atomic_or_group_rlx_wave_b32	$s0, [&GroupVar], $s0;
	// 
	atomic_or_group_scacq_wave_b32	$s0, [&GroupVar], $s0;
	atomic_or_group_screl_wave_b32	$s0, [&GroupVar], $s0;
	atomic_or_group_scar_wave_b32	$s0, [&GroupVar], $s0;
	atomic_or_group_rlx_wg_b32	$s0, [&GroupVar], $s0;
	atomic_or_group_rlx_wave_b32	$s0, [&GroupVar], -1;
	atomic_or_group_rlx_wave_b32	$s0, [&GroupVar], WAVESIZE;
	atomic_or_group_rlx_wave_b32	$s0, [$s0+2], $s0;
	atomic_or_group_rlx_wave_b32	$s0, [$s0+3], $s0;
	atomic_or_group_rlx_wave_b32	$s0, [$s0+5], $s0;
	atomic_or_group_rlx_wave_b32	$s0, [$s0+6], $s0;
	atomic_or_group_rlx_wave_b32	$s0, [0], $s0;
	atomic_or_group_rlx_wave_equiv(1)_b32	$s0, [&GroupVar], $s0;
	atomic_or_group_rlx_wave_equiv(2)_b32	$s0, [&GroupVar], $s0;
	atomic_or_group_rlx_wave_equiv(255)_b32	$s0, [&GroupVar], $s0;
	// 
	// Next sample
	// 
	atomic_xor_rlx_wave_b32	$s0, [$d0+2], $s0;
	// 
	atomic_xor_scacq_wave_b32	$s0, [$d0+2], $s0;
	atomic_xor_screl_wave_b32	$s0, [$d0+2], $s0;
	atomic_xor_scar_wave_b32	$s0, [$d0+2], $s0;
	atomic_xor_rlx_wg_b32	$s0, [$d0+2], $s0;
	atomic_xor_rlx_agent_b32	$s0, [$d0+2], $s0;
	atomic_xor_rlx_system_b32	$s0, [$d0+2], $s0;
	atomic_xor_rlx_wave_b32	$s0, [$d0+2], -1;
	atomic_xor_rlx_wave_b32	$s0, [$d0+2], WAVESIZE;
	atomic_xor_rlx_wave_b32	$s0, [$d0+3], $s0;
	atomic_xor_rlx_wave_b32	$s0, [$d0+5], $s0;
	atomic_xor_rlx_wave_b32	$s0, [$d0+6], $s0;
	atomic_xor_rlx_wave_b32	$s0, [0], $s0;
	atomic_xor_rlx_wave_equiv(1)_b32	$s0, [$d0+2], $s0;
	atomic_xor_rlx_wave_equiv(2)_b32	$s0, [$d0+2], $s0;
	atomic_xor_rlx_wave_equiv(255)_b32	$s0, [$d0+2], $s0;
	// 
	// Next sample
	// 
	atomic_xor_global_rlx_wave_b32	$s0, [&GlobalVar], $s0;
	// 
	atomic_xor_global_scacq_wave_b32	$s0, [&GlobalVar], $s0;
	atomic_xor_global_screl_wave_b32	$s0, [&GlobalVar], $s0;
	atomic_xor_global_scar_wave_b32	$s0, [&GlobalVar], $s0;
	atomic_xor_global_rlx_wg_b32	$s0, [&GlobalVar], $s0;
	atomic_xor_global_rlx_agent_b32	$s0, [&GlobalVar], $s0;
	atomic_xor_global_rlx_system_b32	$s0, [&GlobalVar], $s0;
	atomic_xor_global_rlx_wave_b32	$s0, [&GlobalVar], -1;
	atomic_xor_global_rlx_wave_b32	$s0, [&GlobalVar], WAVESIZE;
	atomic_xor_global_rlx_wave_b32	$s0, [&GlobalSig64], $s0;
	atomic_xor_global_rlx_wave_b32	$s0, [$d0+2], $s0;
	atomic_xor_global_rlx_wave_b32	$s0, [$d0+3], $s0;
	atomic_xor_global_rlx_wave_b32	$s0, [$d0+5], $s0;
	atomic_xor_global_rlx_wave_b32	$s0, [$d0+6], $s0;
	atomic_xor_global_rlx_wave_b32	$s0, [0], $s0;
	atomic_xor_global_rlx_wave_equiv(1)_b32	$s0, [&GlobalVar], $s0;
	atomic_xor_global_rlx_wave_equiv(2)_b32	$s0, [&GlobalVar], $s0;
	atomic_xor_global_rlx_wave_equiv(255)_b32	$s0, [&GlobalVar], $s0;
	// 
	// Next sample
	// 
	atomic_xor_group_rlx_wave_b32	$s0, [&GroupVar], $s0;
	// 
	atomic_xor_group_scacq_wave_b32	$s0, [&GroupVar], $s0;
	atomic_xor_group_screl_wave_b32	$s0, [&GroupVar], $s0;
	atomic_xor_group_scar_wave_b32	$s0, [&GroupVar], $s0;
	atomic_xor_group_rlx_wg_b32	$s0, [&GroupVar], $s0;
	atomic_xor_group_rlx_wave_b32	$s0, [&GroupVar], -1;
	atomic_xor_group_rlx_wave_b32	$s0, [&GroupVar], WAVESIZE;
	atomic_xor_group_rlx_wave_b32	$s0, [$s0+2], $s0;
	atomic_xor_group_rlx_wave_b32	$s0, [$s0+3], $s0;
	atomic_xor_group_rlx_wave_b32	$s0, [$s0+5], $s0;
	atomic_xor_group_rlx_wave_b32	$s0, [$s0+6], $s0;
	atomic_xor_group_rlx_wave_b32	$s0, [0], $s0;
	atomic_xor_group_rlx_wave_equiv(1)_b32	$s0, [&GroupVar], $s0;
	atomic_xor_group_rlx_wave_equiv(2)_b32	$s0, [&GroupVar], $s0;
	atomic_xor_group_rlx_wave_equiv(255)_b32	$s0, [&GroupVar], $s0;
	// 
	// Next sample
	// 
	atomic_and_rlx_wave_b64	$d0, [$d0+2], $d0;
	// 
	atomic_and_scacq_wave_b64	$d0, [$d0+2], $d0;
	atomic_and_screl_wave_b64	$d0, [$d0+2], $d0;
	atomic_and_scar_wave_b64	$d0, [$d0+2], $d0;
	atomic_and_rlx_wg_b64	$d0, [$d0+2], $d0;
	atomic_and_rlx_agent_b64	$d0, [$d0+2], $d0;
	atomic_and_rlx_system_b64	$d0, [$d0+2], $d0;
	atomic_and_rlx_wave_b64	$d0, [$d0+2], -1;
	atomic_and_rlx_wave_b64	$d0, [$d0+2], WAVESIZE;
	atomic_and_rlx_wave_b64	$d0, [$d0+3], $d0;
	atomic_and_rlx_wave_b64	$d0, [$d0+5], $d0;
	atomic_and_rlx_wave_b64	$d0, [$d0+6], $d0;
	atomic_and_rlx_wave_b64	$d0, [0], $d0;
	atomic_and_rlx_wave_equiv(1)_b64	$d0, [$d0+2], $d0;
	atomic_and_rlx_wave_equiv(2)_b64	$d0, [$d0+2], $d0;
	atomic_and_rlx_wave_equiv(255)_b64	$d0, [$d0+2], $d0;
	// 
	// Next sample
	// 
	atomic_and_global_rlx_wave_b64	$d0, [&GlobalVar], $d0;
	// 
	atomic_and_global_scacq_wave_b64	$d0, [&GlobalVar], $d0;
	atomic_and_global_screl_wave_b64	$d0, [&GlobalVar], $d0;
	atomic_and_global_scar_wave_b64	$d0, [&GlobalVar], $d0;
	atomic_and_global_rlx_wg_b64	$d0, [&GlobalVar], $d0;
	atomic_and_global_rlx_agent_b64	$d0, [&GlobalVar], $d0;
	atomic_and_global_rlx_system_b64	$d0, [&GlobalVar], $d0;
	atomic_and_global_rlx_wave_b64	$d0, [&GlobalVar], -1;
	atomic_and_global_rlx_wave_b64	$d0, [&GlobalVar], WAVESIZE;
	atomic_and_global_rlx_wave_b64	$d0, [&GlobalSig64], $d0;
	atomic_and_global_rlx_wave_b64	$d0, [$d0+2], $d0;
	atomic_and_global_rlx_wave_b64	$d0, [$d0+3], $d0;
	atomic_and_global_rlx_wave_b64	$d0, [$d0+5], $d0;
	atomic_and_global_rlx_wave_b64	$d0, [$d0+6], $d0;
	atomic_and_global_rlx_wave_b64	$d0, [0], $d0;
	atomic_and_global_rlx_wave_equiv(1)_b64	$d0, [&GlobalVar], $d0;
	atomic_and_global_rlx_wave_equiv(2)_b64	$d0, [&GlobalVar], $d0;
	atomic_and_global_rlx_wave_equiv(255)_b64	$d0, [&GlobalVar], $d0;
	// 
	// Next sample
	// 
	atomic_and_group_rlx_wave_b64	$d0, [&GroupVar], $d0;
	// 
	atomic_and_group_scacq_wave_b64	$d0, [&GroupVar], $d0;
	atomic_and_group_screl_wave_b64	$d0, [&GroupVar], $d0;
	atomic_and_group_scar_wave_b64	$d0, [&GroupVar], $d0;
	atomic_and_group_rlx_wg_b64	$d0, [&GroupVar], $d0;
	atomic_and_group_rlx_wave_b64	$d0, [&GroupVar], -1;
	atomic_and_group_rlx_wave_b64	$d0, [&GroupVar], WAVESIZE;
	atomic_and_group_rlx_wave_b64	$d0, [$s0+2], $d0;
	atomic_and_group_rlx_wave_b64	$d0, [$s0+3], $d0;
	atomic_and_group_rlx_wave_b64	$d0, [$s0+5], $d0;
	atomic_and_group_rlx_wave_b64	$d0, [$s0+6], $d0;
	atomic_and_group_rlx_wave_b64	$d0, [0], $d0;
	atomic_and_group_rlx_wave_equiv(1)_b64	$d0, [&GroupVar], $d0;
	atomic_and_group_rlx_wave_equiv(2)_b64	$d0, [&GroupVar], $d0;
	atomic_and_group_rlx_wave_equiv(255)_b64	$d0, [&GroupVar], $d0;
	// 
	// Next sample
	// 
	atomic_cas_rlx_wave_b64	$d0, [$d0+2], $d0, $d0;
	// 
	atomic_cas_scacq_wave_b64	$d0, [$d0+2], $d0, $d0;
	atomic_cas_screl_wave_b64	$d0, [$d0+2], $d0, $d0;
	atomic_cas_scar_wave_b64	$d0, [$d0+2], $d0, $d0;
	atomic_cas_rlx_wg_b64	$d0, [$d0+2], $d0, $d0;
	atomic_cas_rlx_agent_b64	$d0, [$d0+2], $d0, $d0;
	atomic_cas_rlx_system_b64	$d0, [$d0+2], $d0, $d0;
	atomic_cas_rlx_wave_b64	$d0, [$d0+2], -1, $d0;
	atomic_cas_rlx_wave_b64	$d0, [$d0+2], WAVESIZE, $d0;
	atomic_cas_rlx_wave_b64	$d0, [$d0+2], $d0, -1;
	atomic_cas_rlx_wave_b64	$d0, [$d0+2], $d0, WAVESIZE;
	atomic_cas_rlx_wave_b64	$d0, [$d0+3], $d0, $d0;
	atomic_cas_rlx_wave_b64	$d0, [$d0+5], $d0, $d0;
	atomic_cas_rlx_wave_b64	$d0, [$d0+6], $d0, $d0;
	atomic_cas_rlx_wave_b64	$d0, [0], $d0, $d0;
	atomic_cas_rlx_wave_equiv(1)_b64	$d0, [$d0+2], $d0, $d0;
	atomic_cas_rlx_wave_equiv(2)_b64	$d0, [$d0+2], $d0, $d0;
	atomic_cas_rlx_wave_equiv(255)_b64	$d0, [$d0+2], $d0, $d0;
	// 
	// Next sample
	// 
	atomic_cas_global_rlx_wave_b64	$d0, [&GlobalVar], $d0, $d0;
	// 
	atomic_cas_global_scacq_wave_b64	$d0, [&GlobalVar], $d0, $d0;
	atomic_cas_global_screl_wave_b64	$d0, [&GlobalVar], $d0, $d0;
	atomic_cas_global_scar_wave_b64	$d0, [&GlobalVar], $d0, $d0;
	atomic_cas_global_rlx_wg_b64	$d0, [&GlobalVar], $d0, $d0;
	atomic_cas_global_rlx_agent_b64	$d0, [&GlobalVar], $d0, $d0;
	atomic_cas_global_rlx_system_b64	$d0, [&GlobalVar], $d0, $d0;
	atomic_cas_global_rlx_wave_b64	$d0, [&GlobalVar], -1, $d0;
	atomic_cas_global_rlx_wave_b64	$d0, [&GlobalVar], WAVESIZE, $d0;
	atomic_cas_global_rlx_wave_b64	$d0, [&GlobalVar], $d0, -1;
	atomic_cas_global_rlx_wave_b64	$d0, [&GlobalVar], $d0, WAVESIZE;
	atomic_cas_global_rlx_wave_b64	$d0, [&GlobalSig64], $d0, $d0;
	atomic_cas_global_rlx_wave_b64	$d0, [$d0+2], $d0, $d0;
	atomic_cas_global_rlx_wave_b64	$d0, [$d0+3], $d0, $d0;
	atomic_cas_global_rlx_wave_b64	$d0, [$d0+5], $d0, $d0;
	atomic_cas_global_rlx_wave_b64	$d0, [$d0+6], $d0, $d0;
	atomic_cas_global_rlx_wave_b64	$d0, [0], $d0, $d0;
	atomic_cas_global_rlx_wave_equiv(1)_b64	$d0, [&GlobalVar], $d0, $d0;
	atomic_cas_global_rlx_wave_equiv(2)_b64	$d0, [&GlobalVar], $d0, $d0;
	atomic_cas_global_rlx_wave_equiv(255)_b64	$d0, [&GlobalVar], $d0, $d0;
	// 
	// Next sample
	// 
	atomic_cas_group_rlx_wave_b64	$d0, [&GroupVar], $d0, $d0;
	// 
	atomic_cas_group_scacq_wave_b64	$d0, [&GroupVar], $d0, $d0;
	atomic_cas_group_screl_wave_b64	$d0, [&GroupVar], $d0, $d0;
	atomic_cas_group_scar_wave_b64	$d0, [&GroupVar], $d0, $d0;
	atomic_cas_group_rlx_wg_b64	$d0, [&GroupVar], $d0, $d0;
	atomic_cas_group_rlx_wave_b64	$d0, [&GroupVar], -1, $d0;
	atomic_cas_group_rlx_wave_b64	$d0, [&GroupVar], WAVESIZE, $d0;
	atomic_cas_group_rlx_wave_b64	$d0, [&GroupVar], $d0, -1;
	atomic_cas_group_rlx_wave_b64	$d0, [&GroupVar], $d0, WAVESIZE;
	atomic_cas_group_rlx_wave_b64	$d0, [$s0+2], $d0, $d0;
	atomic_cas_group_rlx_wave_b64	$d0, [$s0+3], $d0, $d0;
	atomic_cas_group_rlx_wave_b64	$d0, [$s0+5], $d0, $d0;
	atomic_cas_group_rlx_wave_b64	$d0, [$s0+6], $d0, $d0;
	atomic_cas_group_rlx_wave_b64	$d0, [0], $d0, $d0;
	atomic_cas_group_rlx_wave_equiv(1)_b64	$d0, [&GroupVar], $d0, $d0;
	atomic_cas_group_rlx_wave_equiv(2)_b64	$d0, [&GroupVar], $d0, $d0;
	atomic_cas_group_rlx_wave_equiv(255)_b64	$d0, [&GroupVar], $d0, $d0;
	// 
	// Next sample
	// 
	atomic_exch_rlx_wave_b64	$d0, [$d0+2], $d0;
	// 
	atomic_exch_scacq_wave_b64	$d0, [$d0+2], $d0;
	atomic_exch_screl_wave_b64	$d0, [$d0+2], $d0;
	atomic_exch_scar_wave_b64	$d0, [$d0+2], $d0;
	atomic_exch_rlx_wg_b64	$d0, [$d0+2], $d0;
	atomic_exch_rlx_agent_b64	$d0, [$d0+2], $d0;
	atomic_exch_rlx_system_b64	$d0, [$d0+2], $d0;
	atomic_exch_rlx_wave_b64	$d0, [$d0+2], -1;
	atomic_exch_rlx_wave_b64	$d0, [$d0+2], WAVESIZE;
	atomic_exch_rlx_wave_b64	$d0, [$d0+3], $d0;
	atomic_exch_rlx_wave_b64	$d0, [$d0+5], $d0;
	atomic_exch_rlx_wave_b64	$d0, [$d0+6], $d0;
	atomic_exch_rlx_wave_b64	$d0, [0], $d0;
	atomic_exch_rlx_wave_equiv(1)_b64	$d0, [$d0+2], $d0;
	atomic_exch_rlx_wave_equiv(2)_b64	$d0, [$d0+2], $d0;
	atomic_exch_rlx_wave_equiv(255)_b64	$d0, [$d0+2], $d0;
	// 
	// Next sample
	// 
	atomic_exch_global_rlx_wave_b64	$d0, [&GlobalVar], $d0;
	// 
	atomic_exch_global_scacq_wave_b64	$d0, [&GlobalVar], $d0;
	atomic_exch_global_screl_wave_b64	$d0, [&GlobalVar], $d0;
	atomic_exch_global_scar_wave_b64	$d0, [&GlobalVar], $d0;
	atomic_exch_global_rlx_wg_b64	$d0, [&GlobalVar], $d0;
	atomic_exch_global_rlx_agent_b64	$d0, [&GlobalVar], $d0;
	atomic_exch_global_rlx_system_b64	$d0, [&GlobalVar], $d0;
	atomic_exch_global_rlx_wave_b64	$d0, [&GlobalVar], -1;
	atomic_exch_global_rlx_wave_b64	$d0, [&GlobalVar], WAVESIZE;
	atomic_exch_global_rlx_wave_b64	$d0, [&GlobalSig64], $d0;
	atomic_exch_global_rlx_wave_b64	$d0, [$d0+2], $d0;
	atomic_exch_global_rlx_wave_b64	$d0, [$d0+3], $d0;
	atomic_exch_global_rlx_wave_b64	$d0, [$d0+5], $d0;
	atomic_exch_global_rlx_wave_b64	$d0, [$d0+6], $d0;
	atomic_exch_global_rlx_wave_b64	$d0, [0], $d0;
	atomic_exch_global_rlx_wave_equiv(1)_b64	$d0, [&GlobalVar], $d0;
	atomic_exch_global_rlx_wave_equiv(2)_b64	$d0, [&GlobalVar], $d0;
	atomic_exch_global_rlx_wave_equiv(255)_b64	$d0, [&GlobalVar], $d0;
	// 
	// Next sample
	// 
	atomic_exch_group_rlx_wave_b64	$d0, [&GroupVar], $d0;
	// 
	atomic_exch_group_scacq_wave_b64	$d0, [&GroupVar], $d0;
	atomic_exch_group_screl_wave_b64	$d0, [&GroupVar], $d0;
	atomic_exch_group_scar_wave_b64	$d0, [&GroupVar], $d0;
	atomic_exch_group_rlx_wg_b64	$d0, [&GroupVar], $d0;
	atomic_exch_group_rlx_wave_b64	$d0, [&GroupVar], -1;
	atomic_exch_group_rlx_wave_b64	$d0, [&GroupVar], WAVESIZE;
	atomic_exch_group_rlx_wave_b64	$d0, [$s0+2], $d0;
	atomic_exch_group_rlx_wave_b64	$d0, [$s0+3], $d0;
	atomic_exch_group_rlx_wave_b64	$d0, [$s0+5], $d0;
	atomic_exch_group_rlx_wave_b64	$d0, [$s0+6], $d0;
	atomic_exch_group_rlx_wave_b64	$d0, [0], $d0;
	atomic_exch_group_rlx_wave_equiv(1)_b64	$d0, [&GroupVar], $d0;
	atomic_exch_group_rlx_wave_equiv(2)_b64	$d0, [&GroupVar], $d0;
	atomic_exch_group_rlx_wave_equiv(255)_b64	$d0, [&GroupVar], $d0;
	// 
	// Next sample
	// 
	atomic_ld_rlx_wave_b64	$d0, [$d0+2];
	// 
	atomic_ld_scacq_wave_b64	$d0, [$d0+2];
	atomic_ld_rlx_wg_b64	$d0, [$d0+2];
	atomic_ld_rlx_agent_b64	$d0, [$d0+2];
	atomic_ld_rlx_system_b64	$d0, [$d0+2];
	atomic_ld_rlx_wave_b64	$d0, [$d0+3];
	atomic_ld_rlx_wave_b64	$d0, [$d0+5];
	atomic_ld_rlx_wave_b64	$d0, [$d0+6];
	atomic_ld_rlx_wave_b64	$d0, [0];
	atomic_ld_rlx_wave_equiv(1)_b64	$d0, [$d0+2];
	atomic_ld_rlx_wave_equiv(2)_b64	$d0, [$d0+2];
	atomic_ld_rlx_wave_equiv(255)_b64	$d0, [$d0+2];
	// 
	// Next sample
	// 
	atomic_ld_global_rlx_wave_b64	$d0, [&GlobalVar];
	// 
	atomic_ld_global_scacq_wave_b64	$d0, [&GlobalVar];
	atomic_ld_global_rlx_wg_b64	$d0, [&GlobalVar];
	atomic_ld_global_rlx_agent_b64	$d0, [&GlobalVar];
	atomic_ld_global_rlx_system_b64	$d0, [&GlobalVar];
	atomic_ld_global_rlx_wave_b64	$d0, [&GlobalSig64];
	atomic_ld_global_rlx_wave_b64	$d0, [$d0+2];
	atomic_ld_global_rlx_wave_b64	$d0, [$d0+3];
	atomic_ld_global_rlx_wave_b64	$d0, [$d0+5];
	atomic_ld_global_rlx_wave_b64	$d0, [$d0+6];
	atomic_ld_global_rlx_wave_b64	$d0, [0];
	atomic_ld_global_rlx_wave_equiv(1)_b64	$d0, [&GlobalVar];
	atomic_ld_global_rlx_wave_equiv(2)_b64	$d0, [&GlobalVar];
	atomic_ld_global_rlx_wave_equiv(255)_b64	$d0, [&GlobalVar];
	// 
	// Next sample
	// 
	atomic_ld_group_rlx_wave_b64	$d0, [&GroupVar];
	// 
	atomic_ld_group_scacq_wave_b64	$d0, [&GroupVar];
	atomic_ld_group_rlx_wg_b64	$d0, [&GroupVar];
	atomic_ld_group_rlx_wave_b64	$d0, [$s0+2];
	atomic_ld_group_rlx_wave_b64	$d0, [$s0+3];
	atomic_ld_group_rlx_wave_b64	$d0, [$s0+5];
	atomic_ld_group_rlx_wave_b64	$d0, [$s0+6];
	atomic_ld_group_rlx_wave_b64	$d0, [0];
	atomic_ld_group_rlx_wave_equiv(1)_b64	$d0, [&GroupVar];
	atomic_ld_group_rlx_wave_equiv(2)_b64	$d0, [&GroupVar];
	atomic_ld_group_rlx_wave_equiv(255)_b64	$d0, [&GroupVar];
	// 
	// Next sample
	// 
	atomic_or_rlx_wave_b64	$d0, [$d0+2], $d0;
	// 
	atomic_or_scacq_wave_b64	$d0, [$d0+2], $d0;
	atomic_or_screl_wave_b64	$d0, [$d0+2], $d0;
	atomic_or_scar_wave_b64	$d0, [$d0+2], $d0;
	atomic_or_rlx_wg_b64	$d0, [$d0+2], $d0;
	atomic_or_rlx_agent_b64	$d0, [$d0+2], $d0;
	atomic_or_rlx_system_b64	$d0, [$d0+2], $d0;
	atomic_or_rlx_wave_b64	$d0, [$d0+2], -1;
	atomic_or_rlx_wave_b64	$d0, [$d0+2], WAVESIZE;
	atomic_or_rlx_wave_b64	$d0, [$d0+3], $d0;
	atomic_or_rlx_wave_b64	$d0, [$d0+5], $d0;
	atomic_or_rlx_wave_b64	$d0, [$d0+6], $d0;
	atomic_or_rlx_wave_b64	$d0, [0], $d0;
	atomic_or_rlx_wave_equiv(1)_b64	$d0, [$d0+2], $d0;
	atomic_or_rlx_wave_equiv(2)_b64	$d0, [$d0+2], $d0;
	atomic_or_rlx_wave_equiv(255)_b64	$d0, [$d0+2], $d0;
	// 
	// Next sample
	// 
	atomic_or_global_rlx_wave_b64	$d0, [&GlobalVar], $d0;
	// 
	atomic_or_global_scacq_wave_b64	$d0, [&GlobalVar], $d0;
	atomic_or_global_screl_wave_b64	$d0, [&GlobalVar], $d0;
	atomic_or_global_scar_wave_b64	$d0, [&GlobalVar], $d0;
	atomic_or_global_rlx_wg_b64	$d0, [&GlobalVar], $d0;
	atomic_or_global_rlx_agent_b64	$d0, [&GlobalVar], $d0;
	atomic_or_global_rlx_system_b64	$d0, [&GlobalVar], $d0;
	atomic_or_global_rlx_wave_b64	$d0, [&GlobalVar], -1;
	atomic_or_global_rlx_wave_b64	$d0, [&GlobalVar], WAVESIZE;
	atomic_or_global_rlx_wave_b64	$d0, [&GlobalSig64], $d0;
	atomic_or_global_rlx_wave_b64	$d0, [$d0+2], $d0;
	atomic_or_global_rlx_wave_b64	$d0, [$d0+3], $d0;
	atomic_or_global_rlx_wave_b64	$d0, [$d0+5], $d0;
	atomic_or_global_rlx_wave_b64	$d0, [$d0+6], $d0;
	atomic_or_global_rlx_wave_b64	$d0, [0], $d0;
	atomic_or_global_rlx_wave_equiv(1)_b64	$d0, [&GlobalVar], $d0;
	atomic_or_global_rlx_wave_equiv(2)_b64	$d0, [&GlobalVar], $d0;
	atomic_or_global_rlx_wave_equiv(255)_b64	$d0, [&GlobalVar], $d0;
	// 
	// Next sample
	// 
	atomic_or_group_rlx_wave_b64	$d0, [&GroupVar], $d0;
	// 
	atomic_or_group_scacq_wave_b64	$d0, [&GroupVar], $d0;
	atomic_or_group_screl_wave_b64	$d0, [&GroupVar], $d0;
	atomic_or_group_scar_wave_b64	$d0, [&GroupVar], $d0;
	atomic_or_group_rlx_wg_b64	$d0, [&GroupVar], $d0;
	atomic_or_group_rlx_wave_b64	$d0, [&GroupVar], -1;
	atomic_or_group_rlx_wave_b64	$d0, [&GroupVar], WAVESIZE;
	atomic_or_group_rlx_wave_b64	$d0, [$s0+2], $d0;
	atomic_or_group_rlx_wave_b64	$d0, [$s0+3], $d0;
	atomic_or_group_rlx_wave_b64	$d0, [$s0+5], $d0;
	atomic_or_group_rlx_wave_b64	$d0, [$s0+6], $d0;
	atomic_or_group_rlx_wave_b64	$d0, [0], $d0;
	atomic_or_group_rlx_wave_equiv(1)_b64	$d0, [&GroupVar], $d0;
	atomic_or_group_rlx_wave_equiv(2)_b64	$d0, [&GroupVar], $d0;
	atomic_or_group_rlx_wave_equiv(255)_b64	$d0, [&GroupVar], $d0;
	// 
	// Next sample
	// 
	atomic_xor_rlx_wave_b64	$d0, [$d0+2], $d0;
	// 
	atomic_xor_scacq_wave_b64	$d0, [$d0+2], $d0;
	atomic_xor_screl_wave_b64	$d0, [$d0+2], $d0;
	atomic_xor_scar_wave_b64	$d0, [$d0+2], $d0;
	atomic_xor_rlx_wg_b64	$d0, [$d0+2], $d0;
	atomic_xor_rlx_agent_b64	$d0, [$d0+2], $d0;
	atomic_xor_rlx_system_b64	$d0, [$d0+2], $d0;
	atomic_xor_rlx_wave_b64	$d0, [$d0+2], -1;
	atomic_xor_rlx_wave_b64	$d0, [$d0+2], WAVESIZE;
	atomic_xor_rlx_wave_b64	$d0, [$d0+3], $d0;
	atomic_xor_rlx_wave_b64	$d0, [$d0+5], $d0;
	atomic_xor_rlx_wave_b64	$d0, [$d0+6], $d0;
	atomic_xor_rlx_wave_b64	$d0, [0], $d0;
	atomic_xor_rlx_wave_equiv(1)_b64	$d0, [$d0+2], $d0;
	atomic_xor_rlx_wave_equiv(2)_b64	$d0, [$d0+2], $d0;
	atomic_xor_rlx_wave_equiv(255)_b64	$d0, [$d0+2], $d0;
	// 
	// Next sample
	// 
	atomic_xor_global_rlx_wave_b64	$d0, [&GlobalVar], $d0;
	// 
	atomic_xor_global_scacq_wave_b64	$d0, [&GlobalVar], $d0;
	atomic_xor_global_screl_wave_b64	$d0, [&GlobalVar], $d0;
	atomic_xor_global_scar_wave_b64	$d0, [&GlobalVar], $d0;
	atomic_xor_global_rlx_wg_b64	$d0, [&GlobalVar], $d0;
	atomic_xor_global_rlx_agent_b64	$d0, [&GlobalVar], $d0;
	atomic_xor_global_rlx_system_b64	$d0, [&GlobalVar], $d0;
	atomic_xor_global_rlx_wave_b64	$d0, [&GlobalVar], -1;
	atomic_xor_global_rlx_wave_b64	$d0, [&GlobalVar], WAVESIZE;
	atomic_xor_global_rlx_wave_b64	$d0, [&GlobalSig64], $d0;
	atomic_xor_global_rlx_wave_b64	$d0, [$d0+2], $d0;
	atomic_xor_global_rlx_wave_b64	$d0, [$d0+3], $d0;
	atomic_xor_global_rlx_wave_b64	$d0, [$d0+5], $d0;
	atomic_xor_global_rlx_wave_b64	$d0, [$d0+6], $d0;
	atomic_xor_global_rlx_wave_b64	$d0, [0], $d0;
	atomic_xor_global_rlx_wave_equiv(1)_b64	$d0, [&GlobalVar], $d0;
	atomic_xor_global_rlx_wave_equiv(2)_b64	$d0, [&GlobalVar], $d0;
	atomic_xor_global_rlx_wave_equiv(255)_b64	$d0, [&GlobalVar], $d0;
	// 
	// Next sample
	// 
	atomic_xor_group_rlx_wave_b64	$d0, [&GroupVar], $d0;
	// 
	atomic_xor_group_scacq_wave_b64	$d0, [&GroupVar], $d0;
	atomic_xor_group_screl_wave_b64	$d0, [&GroupVar], $d0;
	atomic_xor_group_scar_wave_b64	$d0, [&GroupVar], $d0;
	atomic_xor_group_rlx_wg_b64	$d0, [&GroupVar], $d0;
	atomic_xor_group_rlx_wave_b64	$d0, [&GroupVar], -1;
	atomic_xor_group_rlx_wave_b64	$d0, [&GroupVar], WAVESIZE;
	atomic_xor_group_rlx_wave_b64	$d0, [$s0+2], $d0;
	atomic_xor_group_rlx_wave_b64	$d0, [$s0+3], $d0;
	atomic_xor_group_rlx_wave_b64	$d0, [$s0+5], $d0;
	atomic_xor_group_rlx_wave_b64	$d0, [$s0+6], $d0;
	atomic_xor_group_rlx_wave_b64	$d0, [0], $d0;
	atomic_xor_group_rlx_wave_equiv(1)_b64	$d0, [&GroupVar], $d0;
	atomic_xor_group_rlx_wave_equiv(2)_b64	$d0, [&GroupVar], $d0;
	atomic_xor_group_rlx_wave_equiv(255)_b64	$d0, [&GroupVar], $d0;
	// 
	// Next sample
	// 
	atomicnoret_add_rlx_wave_u32	[$d0+2], $s0;
	// 
	atomicnoret_add_scacq_wave_u32	[$d0+2], $s0;
	atomicnoret_add_screl_wave_u32	[$d0+2], $s0;
	atomicnoret_add_scar_wave_u32	[$d0+2], $s0;
	atomicnoret_add_rlx_wg_u32	[$d0+2], $s0;
	atomicnoret_add_rlx_agent_u32	[$d0+2], $s0;
	atomicnoret_add_rlx_system_u32	[$d0+2], $s0;
	atomicnoret_add_rlx_wave_u32	[$d0+3], $s0;
	atomicnoret_add_rlx_wave_u32	[$d0+5], $s0;
	atomicnoret_add_rlx_wave_u32	[$d0+6], $s0;
	atomicnoret_add_rlx_wave_u32	[0], $s0;
	atomicnoret_add_rlx_wave_u32	[$d0+2], -1;
	atomicnoret_add_rlx_wave_u32	[$d0+2], WAVESIZE;
	atomicnoret_add_rlx_wave_equiv(1)_u32	[$d0+2], $s0;
	atomicnoret_add_rlx_wave_equiv(2)_u32	[$d0+2], $s0;
	atomicnoret_add_rlx_wave_equiv(255)_u32	[$d0+2], $s0;
	// 
	// Next sample
	// 
	atomicnoret_add_global_rlx_wave_u32	[&GlobalVar], $s0;
	// 
	atomicnoret_add_global_scacq_wave_u32	[&GlobalVar], $s0;
	atomicnoret_add_global_screl_wave_u32	[&GlobalVar], $s0;
	atomicnoret_add_global_scar_wave_u32	[&GlobalVar], $s0;
	atomicnoret_add_global_rlx_wg_u32	[&GlobalVar], $s0;
	atomicnoret_add_global_rlx_agent_u32	[&GlobalVar], $s0;
	atomicnoret_add_global_rlx_system_u32	[&GlobalVar], $s0;
	atomicnoret_add_global_rlx_wave_u32	[&GlobalSig64], $s0;
	atomicnoret_add_global_rlx_wave_u32	[$d0+2], $s0;
	atomicnoret_add_global_rlx_wave_u32	[$d0+3], $s0;
	atomicnoret_add_global_rlx_wave_u32	[$d0+5], $s0;
	atomicnoret_add_global_rlx_wave_u32	[$d0+6], $s0;
	atomicnoret_add_global_rlx_wave_u32	[0], $s0;
	atomicnoret_add_global_rlx_wave_u32	[&GlobalVar], -1;
	atomicnoret_add_global_rlx_wave_u32	[&GlobalVar], WAVESIZE;
	atomicnoret_add_global_rlx_wave_equiv(1)_u32	[&GlobalVar], $s0;
	atomicnoret_add_global_rlx_wave_equiv(2)_u32	[&GlobalVar], $s0;
	atomicnoret_add_global_rlx_wave_equiv(255)_u32	[&GlobalVar], $s0;
	// 
	// Next sample
	// 
	atomicnoret_add_group_rlx_wave_u32	[&GroupVar], $s0;
	// 
	atomicnoret_add_group_scacq_wave_u32	[&GroupVar], $s0;
	atomicnoret_add_group_screl_wave_u32	[&GroupVar], $s0;
	atomicnoret_add_group_scar_wave_u32	[&GroupVar], $s0;
	atomicnoret_add_group_rlx_wg_u32	[&GroupVar], $s0;
	atomicnoret_add_group_rlx_wave_u32	[$s0+2], $s0;
	atomicnoret_add_group_rlx_wave_u32	[$s0+3], $s0;
	atomicnoret_add_group_rlx_wave_u32	[$s0+5], $s0;
	atomicnoret_add_group_rlx_wave_u32	[$s0+6], $s0;
	atomicnoret_add_group_rlx_wave_u32	[0], $s0;
	atomicnoret_add_group_rlx_wave_u32	[&GroupVar], -1;
	atomicnoret_add_group_rlx_wave_u32	[&GroupVar], WAVESIZE;
	atomicnoret_add_group_rlx_wave_equiv(1)_u32	[&GroupVar], $s0;
	atomicnoret_add_group_rlx_wave_equiv(2)_u32	[&GroupVar], $s0;
	atomicnoret_add_group_rlx_wave_equiv(255)_u32	[&GroupVar], $s0;
	// 
	// Next sample
	// 
	atomicnoret_max_rlx_wave_u32	[$d0+2], $s0;
	// 
	atomicnoret_max_scacq_wave_u32	[$d0+2], $s0;
	atomicnoret_max_screl_wave_u32	[$d0+2], $s0;
	atomicnoret_max_scar_wave_u32	[$d0+2], $s0;
	atomicnoret_max_rlx_wg_u32	[$d0+2], $s0;
	atomicnoret_max_rlx_agent_u32	[$d0+2], $s0;
	atomicnoret_max_rlx_system_u32	[$d0+2], $s0;
	atomicnoret_max_rlx_wave_u32	[$d0+3], $s0;
	atomicnoret_max_rlx_wave_u32	[$d0+5], $s0;
	atomicnoret_max_rlx_wave_u32	[$d0+6], $s0;
	atomicnoret_max_rlx_wave_u32	[0], $s0;
	atomicnoret_max_rlx_wave_u32	[$d0+2], -1;
	atomicnoret_max_rlx_wave_u32	[$d0+2], WAVESIZE;
	atomicnoret_max_rlx_wave_equiv(1)_u32	[$d0+2], $s0;
	atomicnoret_max_rlx_wave_equiv(2)_u32	[$d0+2], $s0;
	atomicnoret_max_rlx_wave_equiv(255)_u32	[$d0+2], $s0;
	// 
	// Next sample
	// 
	atomicnoret_max_global_rlx_wave_u32	[&GlobalVar], $s0;
	// 
	atomicnoret_max_global_scacq_wave_u32	[&GlobalVar], $s0;
	atomicnoret_max_global_screl_wave_u32	[&GlobalVar], $s0;
	atomicnoret_max_global_scar_wave_u32	[&GlobalVar], $s0;
	atomicnoret_max_global_rlx_wg_u32	[&GlobalVar], $s0;
	atomicnoret_max_global_rlx_agent_u32	[&GlobalVar], $s0;
	atomicnoret_max_global_rlx_system_u32	[&GlobalVar], $s0;
	atomicnoret_max_global_rlx_wave_u32	[&GlobalSig64], $s0;
	atomicnoret_max_global_rlx_wave_u32	[$d0+2], $s0;
	atomicnoret_max_global_rlx_wave_u32	[$d0+3], $s0;
	atomicnoret_max_global_rlx_wave_u32	[$d0+5], $s0;
	atomicnoret_max_global_rlx_wave_u32	[$d0+6], $s0;
	atomicnoret_max_global_rlx_wave_u32	[0], $s0;
	atomicnoret_max_global_rlx_wave_u32	[&GlobalVar], -1;
	atomicnoret_max_global_rlx_wave_u32	[&GlobalVar], WAVESIZE;
	atomicnoret_max_global_rlx_wave_equiv(1)_u32	[&GlobalVar], $s0;
	atomicnoret_max_global_rlx_wave_equiv(2)_u32	[&GlobalVar], $s0;
	atomicnoret_max_global_rlx_wave_equiv(255)_u32	[&GlobalVar], $s0;
	// 
	// Next sample
	// 
	atomicnoret_max_group_rlx_wave_u32	[&GroupVar], $s0;
	// 
	atomicnoret_max_group_scacq_wave_u32	[&GroupVar], $s0;
	atomicnoret_max_group_screl_wave_u32	[&GroupVar], $s0;
	atomicnoret_max_group_scar_wave_u32	[&GroupVar], $s0;
	atomicnoret_max_group_rlx_wg_u32	[&GroupVar], $s0;
	atomicnoret_max_group_rlx_wave_u32	[$s0+2], $s0;
	atomicnoret_max_group_rlx_wave_u32	[$s0+3], $s0;
	atomicnoret_max_group_rlx_wave_u32	[$s0+5], $s0;
	atomicnoret_max_group_rlx_wave_u32	[$s0+6], $s0;
	atomicnoret_max_group_rlx_wave_u32	[0], $s0;
	atomicnoret_max_group_rlx_wave_u32	[&GroupVar], -1;
	atomicnoret_max_group_rlx_wave_u32	[&GroupVar], WAVESIZE;
	atomicnoret_max_group_rlx_wave_equiv(1)_u32	[&GroupVar], $s0;
	atomicnoret_max_group_rlx_wave_equiv(2)_u32	[&GroupVar], $s0;
	atomicnoret_max_group_rlx_wave_equiv(255)_u32	[&GroupVar], $s0;
	// 
	// Next sample
	// 
	atomicnoret_min_rlx_wave_u32	[$d0+2], $s0;
	// 
	atomicnoret_min_scacq_wave_u32	[$d0+2], $s0;
	atomicnoret_min_screl_wave_u32	[$d0+2], $s0;
	atomicnoret_min_scar_wave_u32	[$d0+2], $s0;
	atomicnoret_min_rlx_wg_u32	[$d0+2], $s0;
	atomicnoret_min_rlx_agent_u32	[$d0+2], $s0;
	atomicnoret_min_rlx_system_u32	[$d0+2], $s0;
	atomicnoret_min_rlx_wave_u32	[$d0+3], $s0;
	atomicnoret_min_rlx_wave_u32	[$d0+5], $s0;
	atomicnoret_min_rlx_wave_u32	[$d0+6], $s0;
	atomicnoret_min_rlx_wave_u32	[0], $s0;
	atomicnoret_min_rlx_wave_u32	[$d0+2], -1;
	atomicnoret_min_rlx_wave_u32	[$d0+2], WAVESIZE;
	atomicnoret_min_rlx_wave_equiv(1)_u32	[$d0+2], $s0;
	atomicnoret_min_rlx_wave_equiv(2)_u32	[$d0+2], $s0;
	atomicnoret_min_rlx_wave_equiv(255)_u32	[$d0+2], $s0;
	// 
	// Next sample
	// 
	atomicnoret_min_global_rlx_wave_u32	[&GlobalVar], $s0;
	// 
	atomicnoret_min_global_scacq_wave_u32	[&GlobalVar], $s0;
	atomicnoret_min_global_screl_wave_u32	[&GlobalVar], $s0;
	atomicnoret_min_global_scar_wave_u32	[&GlobalVar], $s0;
	atomicnoret_min_global_rlx_wg_u32	[&GlobalVar], $s0;
	atomicnoret_min_global_rlx_agent_u32	[&GlobalVar], $s0;
	atomicnoret_min_global_rlx_system_u32	[&GlobalVar], $s0;
	atomicnoret_min_global_rlx_wave_u32	[&GlobalSig64], $s0;
	atomicnoret_min_global_rlx_wave_u32	[$d0+2], $s0;
	atomicnoret_min_global_rlx_wave_u32	[$d0+3], $s0;
	atomicnoret_min_global_rlx_wave_u32	[$d0+5], $s0;
	atomicnoret_min_global_rlx_wave_u32	[$d0+6], $s0;
	atomicnoret_min_global_rlx_wave_u32	[0], $s0;
	atomicnoret_min_global_rlx_wave_u32	[&GlobalVar], -1;
	atomicnoret_min_global_rlx_wave_u32	[&GlobalVar], WAVESIZE;
	atomicnoret_min_global_rlx_wave_equiv(1)_u32	[&GlobalVar], $s0;
	atomicnoret_min_global_rlx_wave_equiv(2)_u32	[&GlobalVar], $s0;
	atomicnoret_min_global_rlx_wave_equiv(255)_u32	[&GlobalVar], $s0;
	// 
	// Next sample
	// 
	atomicnoret_min_group_rlx_wave_u32	[&GroupVar], $s0;
	// 
	atomicnoret_min_group_scacq_wave_u32	[&GroupVar], $s0;
	atomicnoret_min_group_screl_wave_u32	[&GroupVar], $s0;
	atomicnoret_min_group_scar_wave_u32	[&GroupVar], $s0;
	atomicnoret_min_group_rlx_wg_u32	[&GroupVar], $s0;
	atomicnoret_min_group_rlx_wave_u32	[$s0+2], $s0;
	atomicnoret_min_group_rlx_wave_u32	[$s0+3], $s0;
	atomicnoret_min_group_rlx_wave_u32	[$s0+5], $s0;
	atomicnoret_min_group_rlx_wave_u32	[$s0+6], $s0;
	atomicnoret_min_group_rlx_wave_u32	[0], $s0;
	atomicnoret_min_group_rlx_wave_u32	[&GroupVar], -1;
	atomicnoret_min_group_rlx_wave_u32	[&GroupVar], WAVESIZE;
	atomicnoret_min_group_rlx_wave_equiv(1)_u32	[&GroupVar], $s0;
	atomicnoret_min_group_rlx_wave_equiv(2)_u32	[&GroupVar], $s0;
	atomicnoret_min_group_rlx_wave_equiv(255)_u32	[&GroupVar], $s0;
	// 
	// Next sample
	// 
	atomicnoret_sub_rlx_wave_u32	[$d0+2], $s0;
	// 
	atomicnoret_sub_scacq_wave_u32	[$d0+2], $s0;
	atomicnoret_sub_screl_wave_u32	[$d0+2], $s0;
	atomicnoret_sub_scar_wave_u32	[$d0+2], $s0;
	atomicnoret_sub_rlx_wg_u32	[$d0+2], $s0;
	atomicnoret_sub_rlx_agent_u32	[$d0+2], $s0;
	atomicnoret_sub_rlx_system_u32	[$d0+2], $s0;
	atomicnoret_sub_rlx_wave_u32	[$d0+3], $s0;
	atomicnoret_sub_rlx_wave_u32	[$d0+5], $s0;
	atomicnoret_sub_rlx_wave_u32	[$d0+6], $s0;
	atomicnoret_sub_rlx_wave_u32	[0], $s0;
	atomicnoret_sub_rlx_wave_u32	[$d0+2], -1;
	atomicnoret_sub_rlx_wave_u32	[$d0+2], WAVESIZE;
	atomicnoret_sub_rlx_wave_equiv(1)_u32	[$d0+2], $s0;
	atomicnoret_sub_rlx_wave_equiv(2)_u32	[$d0+2], $s0;
	atomicnoret_sub_rlx_wave_equiv(255)_u32	[$d0+2], $s0;
	// 
	// Next sample
	// 
	atomicnoret_sub_global_rlx_wave_u32	[&GlobalVar], $s0;
	// 
	atomicnoret_sub_global_scacq_wave_u32	[&GlobalVar], $s0;
	atomicnoret_sub_global_screl_wave_u32	[&GlobalVar], $s0;
	atomicnoret_sub_global_scar_wave_u32	[&GlobalVar], $s0;
	atomicnoret_sub_global_rlx_wg_u32	[&GlobalVar], $s0;
	atomicnoret_sub_global_rlx_agent_u32	[&GlobalVar], $s0;
	atomicnoret_sub_global_rlx_system_u32	[&GlobalVar], $s0;
	atomicnoret_sub_global_rlx_wave_u32	[&GlobalSig64], $s0;
	atomicnoret_sub_global_rlx_wave_u32	[$d0+2], $s0;
	atomicnoret_sub_global_rlx_wave_u32	[$d0+3], $s0;
	atomicnoret_sub_global_rlx_wave_u32	[$d0+5], $s0;
	atomicnoret_sub_global_rlx_wave_u32	[$d0+6], $s0;
	atomicnoret_sub_global_rlx_wave_u32	[0], $s0;
	atomicnoret_sub_global_rlx_wave_u32	[&GlobalVar], -1;
	atomicnoret_sub_global_rlx_wave_u32	[&GlobalVar], WAVESIZE;
	atomicnoret_sub_global_rlx_wave_equiv(1)_u32	[&GlobalVar], $s0;
	atomicnoret_sub_global_rlx_wave_equiv(2)_u32	[&GlobalVar], $s0;
	atomicnoret_sub_global_rlx_wave_equiv(255)_u32	[&GlobalVar], $s0;
	// 
	// Next sample
	// 
	atomicnoret_sub_group_rlx_wave_u32	[&GroupVar], $s0;
	// 
	atomicnoret_sub_group_scacq_wave_u32	[&GroupVar], $s0;
	atomicnoret_sub_group_screl_wave_u32	[&GroupVar], $s0;
	atomicnoret_sub_group_scar_wave_u32	[&GroupVar], $s0;
	atomicnoret_sub_group_rlx_wg_u32	[&GroupVar], $s0;
	atomicnoret_sub_group_rlx_wave_u32	[$s0+2], $s0;
	atomicnoret_sub_group_rlx_wave_u32	[$s0+3], $s0;
	atomicnoret_sub_group_rlx_wave_u32	[$s0+5], $s0;
	atomicnoret_sub_group_rlx_wave_u32	[$s0+6], $s0;
	atomicnoret_sub_group_rlx_wave_u32	[0], $s0;
	atomicnoret_sub_group_rlx_wave_u32	[&GroupVar], -1;
	atomicnoret_sub_group_rlx_wave_u32	[&GroupVar], WAVESIZE;
	atomicnoret_sub_group_rlx_wave_equiv(1)_u32	[&GroupVar], $s0;
	atomicnoret_sub_group_rlx_wave_equiv(2)_u32	[&GroupVar], $s0;
	atomicnoret_sub_group_rlx_wave_equiv(255)_u32	[&GroupVar], $s0;
	// 
	// Next sample
	// 
	atomicnoret_wrapdec_rlx_wave_u32	[$d0+2], $s0;
	// 
	atomicnoret_wrapdec_scacq_wave_u32	[$d0+2], $s0;
	atomicnoret_wrapdec_screl_wave_u32	[$d0+2], $s0;
	atomicnoret_wrapdec_scar_wave_u32	[$d0+2], $s0;
	atomicnoret_wrapdec_rlx_wg_u32	[$d0+2], $s0;
	atomicnoret_wrapdec_rlx_agent_u32	[$d0+2], $s0;
	atomicnoret_wrapdec_rlx_system_u32	[$d0+2], $s0;
	atomicnoret_wrapdec_rlx_wave_u32	[$d0+3], $s0;
	atomicnoret_wrapdec_rlx_wave_u32	[$d0+5], $s0;
	atomicnoret_wrapdec_rlx_wave_u32	[$d0+6], $s0;
	atomicnoret_wrapdec_rlx_wave_u32	[0], $s0;
	atomicnoret_wrapdec_rlx_wave_u32	[$d0+2], -1;
	atomicnoret_wrapdec_rlx_wave_u32	[$d0+2], WAVESIZE;
	atomicnoret_wrapdec_rlx_wave_equiv(1)_u32	[$d0+2], $s0;
	atomicnoret_wrapdec_rlx_wave_equiv(2)_u32	[$d0+2], $s0;
	atomicnoret_wrapdec_rlx_wave_equiv(255)_u32	[$d0+2], $s0;
	// 
	// Next sample
	// 
	atomicnoret_wrapdec_global_rlx_wave_u32	[&GlobalVar], $s0;
	// 
	atomicnoret_wrapdec_global_scacq_wave_u32	[&GlobalVar], $s0;
	atomicnoret_wrapdec_global_screl_wave_u32	[&GlobalVar], $s0;
	atomicnoret_wrapdec_global_scar_wave_u32	[&GlobalVar], $s0;
	atomicnoret_wrapdec_global_rlx_wg_u32	[&GlobalVar], $s0;
	atomicnoret_wrapdec_global_rlx_agent_u32	[&GlobalVar], $s0;
	atomicnoret_wrapdec_global_rlx_system_u32	[&GlobalVar], $s0;
	atomicnoret_wrapdec_global_rlx_wave_u32	[&GlobalSig64], $s0;
	atomicnoret_wrapdec_global_rlx_wave_u32	[$d0+2], $s0;
	atomicnoret_wrapdec_global_rlx_wave_u32	[$d0+3], $s0;
	atomicnoret_wrapdec_global_rlx_wave_u32	[$d0+5], $s0;
	atomicnoret_wrapdec_global_rlx_wave_u32	[$d0+6], $s0;
	atomicnoret_wrapdec_global_rlx_wave_u32	[0], $s0;
	atomicnoret_wrapdec_global_rlx_wave_u32	[&GlobalVar], -1;
	atomicnoret_wrapdec_global_rlx_wave_u32	[&GlobalVar], WAVESIZE;
	atomicnoret_wrapdec_global_rlx_wave_equiv(1)_u32	[&GlobalVar], $s0;
	atomicnoret_wrapdec_global_rlx_wave_equiv(2)_u32	[&GlobalVar], $s0;
	atomicnoret_wrapdec_global_rlx_wave_equiv(255)_u32	[&GlobalVar], $s0;
	// 
	// Next sample
	// 
	atomicnoret_wrapdec_group_rlx_wave_u32	[&GroupVar], $s0;
	// 
	atomicnoret_wrapdec_group_scacq_wave_u32	[&GroupVar], $s0;
	atomicnoret_wrapdec_group_screl_wave_u32	[&GroupVar], $s0;
	atomicnoret_wrapdec_group_scar_wave_u32	[&GroupVar], $s0;
	atomicnoret_wrapdec_group_rlx_wg_u32	[&GroupVar], $s0;
	atomicnoret_wrapdec_group_rlx_wave_u32	[$s0+2], $s0;
	atomicnoret_wrapdec_group_rlx_wave_u32	[$s0+3], $s0;
	atomicnoret_wrapdec_group_rlx_wave_u32	[$s0+5], $s0;
	atomicnoret_wrapdec_group_rlx_wave_u32	[$s0+6], $s0;
	atomicnoret_wrapdec_group_rlx_wave_u32	[0], $s0;
	atomicnoret_wrapdec_group_rlx_wave_u32	[&GroupVar], -1;
	atomicnoret_wrapdec_group_rlx_wave_u32	[&GroupVar], WAVESIZE;
	atomicnoret_wrapdec_group_rlx_wave_equiv(1)_u32	[&GroupVar], $s0;
	atomicnoret_wrapdec_group_rlx_wave_equiv(2)_u32	[&GroupVar], $s0;
	atomicnoret_wrapdec_group_rlx_wave_equiv(255)_u32	[&GroupVar], $s0;
	// 
	// Next sample
	// 
	atomicnoret_wrapinc_rlx_wave_u32	[$d0+2], $s0;
	// 
	atomicnoret_wrapinc_scacq_wave_u32	[$d0+2], $s0;
	atomicnoret_wrapinc_screl_wave_u32	[$d0+2], $s0;
	atomicnoret_wrapinc_scar_wave_u32	[$d0+2], $s0;
	atomicnoret_wrapinc_rlx_wg_u32	[$d0+2], $s0;
	atomicnoret_wrapinc_rlx_agent_u32	[$d0+2], $s0;
	atomicnoret_wrapinc_rlx_system_u32	[$d0+2], $s0;
	atomicnoret_wrapinc_rlx_wave_u32	[$d0+3], $s0;
	atomicnoret_wrapinc_rlx_wave_u32	[$d0+5], $s0;
	atomicnoret_wrapinc_rlx_wave_u32	[$d0+6], $s0;
	atomicnoret_wrapinc_rlx_wave_u32	[0], $s0;
	atomicnoret_wrapinc_rlx_wave_u32	[$d0+2], -1;
	atomicnoret_wrapinc_rlx_wave_u32	[$d0+2], WAVESIZE;
	atomicnoret_wrapinc_rlx_wave_equiv(1)_u32	[$d0+2], $s0;
	atomicnoret_wrapinc_rlx_wave_equiv(2)_u32	[$d0+2], $s0;
	atomicnoret_wrapinc_rlx_wave_equiv(255)_u32	[$d0+2], $s0;
	// 
	// Next sample
	// 
	atomicnoret_wrapinc_global_rlx_wave_u32	[&GlobalVar], $s0;
	// 
	atomicnoret_wrapinc_global_scacq_wave_u32	[&GlobalVar], $s0;
	atomicnoret_wrapinc_global_screl_wave_u32	[&GlobalVar], $s0;
	atomicnoret_wrapinc_global_scar_wave_u32	[&GlobalVar], $s0;
	atomicnoret_wrapinc_global_rlx_wg_u32	[&GlobalVar], $s0;
	atomicnoret_wrapinc_global_rlx_agent_u32	[&GlobalVar], $s0;
	atomicnoret_wrapinc_global_rlx_system_u32	[&GlobalVar], $s0;
	atomicnoret_wrapinc_global_rlx_wave_u32	[&GlobalSig64], $s0;
	atomicnoret_wrapinc_global_rlx_wave_u32	[$d0+2], $s0;
	atomicnoret_wrapinc_global_rlx_wave_u32	[$d0+3], $s0;
	atomicnoret_wrapinc_global_rlx_wave_u32	[$d0+5], $s0;
	atomicnoret_wrapinc_global_rlx_wave_u32	[$d0+6], $s0;
	atomicnoret_wrapinc_global_rlx_wave_u32	[0], $s0;
	atomicnoret_wrapinc_global_rlx_wave_u32	[&GlobalVar], -1;
	atomicnoret_wrapinc_global_rlx_wave_u32	[&GlobalVar], WAVESIZE;
	atomicnoret_wrapinc_global_rlx_wave_equiv(1)_u32	[&GlobalVar], $s0;
	atomicnoret_wrapinc_global_rlx_wave_equiv(2)_u32	[&GlobalVar], $s0;
	atomicnoret_wrapinc_global_rlx_wave_equiv(255)_u32	[&GlobalVar], $s0;
	// 
	// Next sample
	// 
	atomicnoret_wrapinc_group_rlx_wave_u32	[&GroupVar], $s0;
	// 
	atomicnoret_wrapinc_group_scacq_wave_u32	[&GroupVar], $s0;
	atomicnoret_wrapinc_group_screl_wave_u32	[&GroupVar], $s0;
	atomicnoret_wrapinc_group_scar_wave_u32	[&GroupVar], $s0;
	atomicnoret_wrapinc_group_rlx_wg_u32	[&GroupVar], $s0;
	atomicnoret_wrapinc_group_rlx_wave_u32	[$s0+2], $s0;
	atomicnoret_wrapinc_group_rlx_wave_u32	[$s0+3], $s0;
	atomicnoret_wrapinc_group_rlx_wave_u32	[$s0+5], $s0;
	atomicnoret_wrapinc_group_rlx_wave_u32	[$s0+6], $s0;
	atomicnoret_wrapinc_group_rlx_wave_u32	[0], $s0;
	atomicnoret_wrapinc_group_rlx_wave_u32	[&GroupVar], -1;
	atomicnoret_wrapinc_group_rlx_wave_u32	[&GroupVar], WAVESIZE;
	atomicnoret_wrapinc_group_rlx_wave_equiv(1)_u32	[&GroupVar], $s0;
	atomicnoret_wrapinc_group_rlx_wave_equiv(2)_u32	[&GroupVar], $s0;
	atomicnoret_wrapinc_group_rlx_wave_equiv(255)_u32	[&GroupVar], $s0;
	// 
	// Next sample
	// 
	atomicnoret_add_rlx_wave_u64	[$d0+2], $d0;
	// 
	atomicnoret_add_scacq_wave_u64	[$d0+2], $d0;
	atomicnoret_add_screl_wave_u64	[$d0+2], $d0;
	atomicnoret_add_scar_wave_u64	[$d0+2], $d0;
	atomicnoret_add_rlx_wg_u64	[$d0+2], $d0;
	atomicnoret_add_rlx_agent_u64	[$d0+2], $d0;
	atomicnoret_add_rlx_system_u64	[$d0+2], $d0;
	atomicnoret_add_rlx_wave_u64	[$d0+3], $d0;
	atomicnoret_add_rlx_wave_u64	[$d0+5], $d0;
	atomicnoret_add_rlx_wave_u64	[$d0+6], $d0;
	atomicnoret_add_rlx_wave_u64	[0], $d0;
	atomicnoret_add_rlx_wave_u64	[$d0+2], -1;
	atomicnoret_add_rlx_wave_u64	[$d0+2], WAVESIZE;
	atomicnoret_add_rlx_wave_equiv(1)_u64	[$d0+2], $d0;
	atomicnoret_add_rlx_wave_equiv(2)_u64	[$d0+2], $d0;
	atomicnoret_add_rlx_wave_equiv(255)_u64	[$d0+2], $d0;
	// 
	// Next sample
	// 
	atomicnoret_add_global_rlx_wave_u64	[&GlobalVar], $d0;
	// 
	atomicnoret_add_global_scacq_wave_u64	[&GlobalVar], $d0;
	atomicnoret_add_global_screl_wave_u64	[&GlobalVar], $d0;
	atomicnoret_add_global_scar_wave_u64	[&GlobalVar], $d0;
	atomicnoret_add_global_rlx_wg_u64	[&GlobalVar], $d0;
	atomicnoret_add_global_rlx_agent_u64	[&GlobalVar], $d0;
	atomicnoret_add_global_rlx_system_u64	[&GlobalVar], $d0;
	atomicnoret_add_global_rlx_wave_u64	[&GlobalSig64], $d0;
	atomicnoret_add_global_rlx_wave_u64	[$d0+2], $d0;
	atomicnoret_add_global_rlx_wave_u64	[$d0+3], $d0;
	atomicnoret_add_global_rlx_wave_u64	[$d0+5], $d0;
	atomicnoret_add_global_rlx_wave_u64	[$d0+6], $d0;
	atomicnoret_add_global_rlx_wave_u64	[0], $d0;
	atomicnoret_add_global_rlx_wave_u64	[&GlobalVar], -1;
	atomicnoret_add_global_rlx_wave_u64	[&GlobalVar], WAVESIZE;
	atomicnoret_add_global_rlx_wave_equiv(1)_u64	[&GlobalVar], $d0;
	atomicnoret_add_global_rlx_wave_equiv(2)_u64	[&GlobalVar], $d0;
	atomicnoret_add_global_rlx_wave_equiv(255)_u64	[&GlobalVar], $d0;
	// 
	// Next sample
	// 
	atomicnoret_add_group_rlx_wave_u64	[&GroupVar], $d0;
	// 
	atomicnoret_add_group_scacq_wave_u64	[&GroupVar], $d0;
	atomicnoret_add_group_screl_wave_u64	[&GroupVar], $d0;
	atomicnoret_add_group_scar_wave_u64	[&GroupVar], $d0;
	atomicnoret_add_group_rlx_wg_u64	[&GroupVar], $d0;
	atomicnoret_add_group_rlx_wave_u64	[$s0+2], $d0;
	atomicnoret_add_group_rlx_wave_u64	[$s0+3], $d0;
	atomicnoret_add_group_rlx_wave_u64	[$s0+5], $d0;
	atomicnoret_add_group_rlx_wave_u64	[$s0+6], $d0;
	atomicnoret_add_group_rlx_wave_u64	[0], $d0;
	atomicnoret_add_group_rlx_wave_u64	[&GroupVar], -1;
	atomicnoret_add_group_rlx_wave_u64	[&GroupVar], WAVESIZE;
	atomicnoret_add_group_rlx_wave_equiv(1)_u64	[&GroupVar], $d0;
	atomicnoret_add_group_rlx_wave_equiv(2)_u64	[&GroupVar], $d0;
	atomicnoret_add_group_rlx_wave_equiv(255)_u64	[&GroupVar], $d0;
	// 
	// Next sample
	// 
	atomicnoret_max_rlx_wave_u64	[$d0+2], $d0;
	// 
	atomicnoret_max_scacq_wave_u64	[$d0+2], $d0;
	atomicnoret_max_screl_wave_u64	[$d0+2], $d0;
	atomicnoret_max_scar_wave_u64	[$d0+2], $d0;
	atomicnoret_max_rlx_wg_u64	[$d0+2], $d0;
	atomicnoret_max_rlx_agent_u64	[$d0+2], $d0;
	atomicnoret_max_rlx_system_u64	[$d0+2], $d0;
	atomicnoret_max_rlx_wave_u64	[$d0+3], $d0;
	atomicnoret_max_rlx_wave_u64	[$d0+5], $d0;
	atomicnoret_max_rlx_wave_u64	[$d0+6], $d0;
	atomicnoret_max_rlx_wave_u64	[0], $d0;
	atomicnoret_max_rlx_wave_u64	[$d0+2], -1;
	atomicnoret_max_rlx_wave_u64	[$d0+2], WAVESIZE;
	atomicnoret_max_rlx_wave_equiv(1)_u64	[$d0+2], $d0;
	atomicnoret_max_rlx_wave_equiv(2)_u64	[$d0+2], $d0;
	atomicnoret_max_rlx_wave_equiv(255)_u64	[$d0+2], $d0;
	// 
	// Next sample
	// 
	atomicnoret_max_global_rlx_wave_u64	[&GlobalVar], $d0;
	// 
	atomicnoret_max_global_scacq_wave_u64	[&GlobalVar], $d0;
	atomicnoret_max_global_screl_wave_u64	[&GlobalVar], $d0;
	atomicnoret_max_global_scar_wave_u64	[&GlobalVar], $d0;
	atomicnoret_max_global_rlx_wg_u64	[&GlobalVar], $d0;
	atomicnoret_max_global_rlx_agent_u64	[&GlobalVar], $d0;
	atomicnoret_max_global_rlx_system_u64	[&GlobalVar], $d0;
	atomicnoret_max_global_rlx_wave_u64	[&GlobalSig64], $d0;
	atomicnoret_max_global_rlx_wave_u64	[$d0+2], $d0;
	atomicnoret_max_global_rlx_wave_u64	[$d0+3], $d0;
	atomicnoret_max_global_rlx_wave_u64	[$d0+5], $d0;
	atomicnoret_max_global_rlx_wave_u64	[$d0+6], $d0;
	atomicnoret_max_global_rlx_wave_u64	[0], $d0;
	atomicnoret_max_global_rlx_wave_u64	[&GlobalVar], -1;
	atomicnoret_max_global_rlx_wave_u64	[&GlobalVar], WAVESIZE;
	atomicnoret_max_global_rlx_wave_equiv(1)_u64	[&GlobalVar], $d0;
	atomicnoret_max_global_rlx_wave_equiv(2)_u64	[&GlobalVar], $d0;
	atomicnoret_max_global_rlx_wave_equiv(255)_u64	[&GlobalVar], $d0;
	// 
	// Next sample
	// 
	atomicnoret_max_group_rlx_wave_u64	[&GroupVar], $d0;
	// 
	atomicnoret_max_group_scacq_wave_u64	[&GroupVar], $d0;
	atomicnoret_max_group_screl_wave_u64	[&GroupVar], $d0;
	atomicnoret_max_group_scar_wave_u64	[&GroupVar], $d0;
	atomicnoret_max_group_rlx_wg_u64	[&GroupVar], $d0;
	atomicnoret_max_group_rlx_wave_u64	[$s0+2], $d0;
	atomicnoret_max_group_rlx_wave_u64	[$s0+3], $d0;
	atomicnoret_max_group_rlx_wave_u64	[$s0+5], $d0;
	atomicnoret_max_group_rlx_wave_u64	[$s0+6], $d0;
	atomicnoret_max_group_rlx_wave_u64	[0], $d0;
	atomicnoret_max_group_rlx_wave_u64	[&GroupVar], -1;
	atomicnoret_max_group_rlx_wave_u64	[&GroupVar], WAVESIZE;
	atomicnoret_max_group_rlx_wave_equiv(1)_u64	[&GroupVar], $d0;
	atomicnoret_max_group_rlx_wave_equiv(2)_u64	[&GroupVar], $d0;
	atomicnoret_max_group_rlx_wave_equiv(255)_u64	[&GroupVar], $d0;
	// 
	// Next sample
	// 
	atomicnoret_min_rlx_wave_u64	[$d0+2], $d0;
	// 
	atomicnoret_min_scacq_wave_u64	[$d0+2], $d0;
	atomicnoret_min_screl_wave_u64	[$d0+2], $d0;
	atomicnoret_min_scar_wave_u64	[$d0+2], $d0;
	atomicnoret_min_rlx_wg_u64	[$d0+2], $d0;
	atomicnoret_min_rlx_agent_u64	[$d0+2], $d0;
	atomicnoret_min_rlx_system_u64	[$d0+2], $d0;
	atomicnoret_min_rlx_wave_u64	[$d0+3], $d0;
	atomicnoret_min_rlx_wave_u64	[$d0+5], $d0;
	atomicnoret_min_rlx_wave_u64	[$d0+6], $d0;
	atomicnoret_min_rlx_wave_u64	[0], $d0;
	atomicnoret_min_rlx_wave_u64	[$d0+2], -1;
	atomicnoret_min_rlx_wave_u64	[$d0+2], WAVESIZE;
	atomicnoret_min_rlx_wave_equiv(1)_u64	[$d0+2], $d0;
	atomicnoret_min_rlx_wave_equiv(2)_u64	[$d0+2], $d0;
	atomicnoret_min_rlx_wave_equiv(255)_u64	[$d0+2], $d0;
	// 
	// Next sample
	// 
	atomicnoret_min_global_rlx_wave_u64	[&GlobalVar], $d0;
	// 
	atomicnoret_min_global_scacq_wave_u64	[&GlobalVar], $d0;
	atomicnoret_min_global_screl_wave_u64	[&GlobalVar], $d0;
	atomicnoret_min_global_scar_wave_u64	[&GlobalVar], $d0;
	atomicnoret_min_global_rlx_wg_u64	[&GlobalVar], $d0;
	atomicnoret_min_global_rlx_agent_u64	[&GlobalVar], $d0;
	atomicnoret_min_global_rlx_system_u64	[&GlobalVar], $d0;
	atomicnoret_min_global_rlx_wave_u64	[&GlobalSig64], $d0;
	atomicnoret_min_global_rlx_wave_u64	[$d0+2], $d0;
	atomicnoret_min_global_rlx_wave_u64	[$d0+3], $d0;
	atomicnoret_min_global_rlx_wave_u64	[$d0+5], $d0;
	atomicnoret_min_global_rlx_wave_u64	[$d0+6], $d0;
	atomicnoret_min_global_rlx_wave_u64	[0], $d0;
	atomicnoret_min_global_rlx_wave_u64	[&GlobalVar], -1;
	atomicnoret_min_global_rlx_wave_u64	[&GlobalVar], WAVESIZE;
	atomicnoret_min_global_rlx_wave_equiv(1)_u64	[&GlobalVar], $d0;
	atomicnoret_min_global_rlx_wave_equiv(2)_u64	[&GlobalVar], $d0;
	atomicnoret_min_global_rlx_wave_equiv(255)_u64	[&GlobalVar], $d0;
	// 
	// Next sample
	// 
	atomicnoret_min_group_rlx_wave_u64	[&GroupVar], $d0;
	// 
	atomicnoret_min_group_scacq_wave_u64	[&GroupVar], $d0;
	atomicnoret_min_group_screl_wave_u64	[&GroupVar], $d0;
	atomicnoret_min_group_scar_wave_u64	[&GroupVar], $d0;
	atomicnoret_min_group_rlx_wg_u64	[&GroupVar], $d0;
	atomicnoret_min_group_rlx_wave_u64	[$s0+2], $d0;
	atomicnoret_min_group_rlx_wave_u64	[$s0+3], $d0;
	atomicnoret_min_group_rlx_wave_u64	[$s0+5], $d0;
	atomicnoret_min_group_rlx_wave_u64	[$s0+6], $d0;
	atomicnoret_min_group_rlx_wave_u64	[0], $d0;
	atomicnoret_min_group_rlx_wave_u64	[&GroupVar], -1;
	atomicnoret_min_group_rlx_wave_u64	[&GroupVar], WAVESIZE;
	atomicnoret_min_group_rlx_wave_equiv(1)_u64	[&GroupVar], $d0;
	atomicnoret_min_group_rlx_wave_equiv(2)_u64	[&GroupVar], $d0;
	atomicnoret_min_group_rlx_wave_equiv(255)_u64	[&GroupVar], $d0;
	// 
	// Next sample
	// 
	atomicnoret_sub_rlx_wave_u64	[$d0+2], $d0;
	// 
	atomicnoret_sub_scacq_wave_u64	[$d0+2], $d0;
	atomicnoret_sub_screl_wave_u64	[$d0+2], $d0;
	atomicnoret_sub_scar_wave_u64	[$d0+2], $d0;
	atomicnoret_sub_rlx_wg_u64	[$d0+2], $d0;
	atomicnoret_sub_rlx_agent_u64	[$d0+2], $d0;
	atomicnoret_sub_rlx_system_u64	[$d0+2], $d0;
	atomicnoret_sub_rlx_wave_u64	[$d0+3], $d0;
	atomicnoret_sub_rlx_wave_u64	[$d0+5], $d0;
	atomicnoret_sub_rlx_wave_u64	[$d0+6], $d0;
	atomicnoret_sub_rlx_wave_u64	[0], $d0;
	atomicnoret_sub_rlx_wave_u64	[$d0+2], -1;
	atomicnoret_sub_rlx_wave_u64	[$d0+2], WAVESIZE;
	atomicnoret_sub_rlx_wave_equiv(1)_u64	[$d0+2], $d0;
	atomicnoret_sub_rlx_wave_equiv(2)_u64	[$d0+2], $d0;
	atomicnoret_sub_rlx_wave_equiv(255)_u64	[$d0+2], $d0;
	// 
	// Next sample
	// 
	atomicnoret_sub_global_rlx_wave_u64	[&GlobalVar], $d0;
	// 
	atomicnoret_sub_global_scacq_wave_u64	[&GlobalVar], $d0;
	atomicnoret_sub_global_screl_wave_u64	[&GlobalVar], $d0;
	atomicnoret_sub_global_scar_wave_u64	[&GlobalVar], $d0;
	atomicnoret_sub_global_rlx_wg_u64	[&GlobalVar], $d0;
	atomicnoret_sub_global_rlx_agent_u64	[&GlobalVar], $d0;
	atomicnoret_sub_global_rlx_system_u64	[&GlobalVar], $d0;
	atomicnoret_sub_global_rlx_wave_u64	[&GlobalSig64], $d0;
	atomicnoret_sub_global_rlx_wave_u64	[$d0+2], $d0;
	atomicnoret_sub_global_rlx_wave_u64	[$d0+3], $d0;
	atomicnoret_sub_global_rlx_wave_u64	[$d0+5], $d0;
	atomicnoret_sub_global_rlx_wave_u64	[$d0+6], $d0;
	atomicnoret_sub_global_rlx_wave_u64	[0], $d0;
	atomicnoret_sub_global_rlx_wave_u64	[&GlobalVar], -1;
	atomicnoret_sub_global_rlx_wave_u64	[&GlobalVar], WAVESIZE;
	atomicnoret_sub_global_rlx_wave_equiv(1)_u64	[&GlobalVar], $d0;
	atomicnoret_sub_global_rlx_wave_equiv(2)_u64	[&GlobalVar], $d0;
	atomicnoret_sub_global_rlx_wave_equiv(255)_u64	[&GlobalVar], $d0;
	// 
	// Next sample
	// 
	atomicnoret_sub_group_rlx_wave_u64	[&GroupVar], $d0;
	// 
	atomicnoret_sub_group_scacq_wave_u64	[&GroupVar], $d0;
	atomicnoret_sub_group_screl_wave_u64	[&GroupVar], $d0;
	atomicnoret_sub_group_scar_wave_u64	[&GroupVar], $d0;
	atomicnoret_sub_group_rlx_wg_u64	[&GroupVar], $d0;
	atomicnoret_sub_group_rlx_wave_u64	[$s0+2], $d0;
	atomicnoret_sub_group_rlx_wave_u64	[$s0+3], $d0;
	atomicnoret_sub_group_rlx_wave_u64	[$s0+5], $d0;
	atomicnoret_sub_group_rlx_wave_u64	[$s0+6], $d0;
	atomicnoret_sub_group_rlx_wave_u64	[0], $d0;
	atomicnoret_sub_group_rlx_wave_u64	[&GroupVar], -1;
	atomicnoret_sub_group_rlx_wave_u64	[&GroupVar], WAVESIZE;
	atomicnoret_sub_group_rlx_wave_equiv(1)_u64	[&GroupVar], $d0;
	atomicnoret_sub_group_rlx_wave_equiv(2)_u64	[&GroupVar], $d0;
	atomicnoret_sub_group_rlx_wave_equiv(255)_u64	[&GroupVar], $d0;
	// 
	// Next sample
	// 
	atomicnoret_wrapdec_rlx_wave_u64	[$d0+2], $d0;
	// 
	atomicnoret_wrapdec_scacq_wave_u64	[$d0+2], $d0;
	atomicnoret_wrapdec_screl_wave_u64	[$d0+2], $d0;
	atomicnoret_wrapdec_scar_wave_u64	[$d0+2], $d0;
	atomicnoret_wrapdec_rlx_wg_u64	[$d0+2], $d0;
	atomicnoret_wrapdec_rlx_agent_u64	[$d0+2], $d0;
	atomicnoret_wrapdec_rlx_system_u64	[$d0+2], $d0;
	atomicnoret_wrapdec_rlx_wave_u64	[$d0+3], $d0;
	atomicnoret_wrapdec_rlx_wave_u64	[$d0+5], $d0;
	atomicnoret_wrapdec_rlx_wave_u64	[$d0+6], $d0;
	atomicnoret_wrapdec_rlx_wave_u64	[0], $d0;
	atomicnoret_wrapdec_rlx_wave_u64	[$d0+2], -1;
	atomicnoret_wrapdec_rlx_wave_u64	[$d0+2], WAVESIZE;
	atomicnoret_wrapdec_rlx_wave_equiv(1)_u64	[$d0+2], $d0;
	atomicnoret_wrapdec_rlx_wave_equiv(2)_u64	[$d0+2], $d0;
	atomicnoret_wrapdec_rlx_wave_equiv(255)_u64	[$d0+2], $d0;
	// 
	// Next sample
	// 
	atomicnoret_wrapdec_global_rlx_wave_u64	[&GlobalVar], $d0;
	// 
	atomicnoret_wrapdec_global_scacq_wave_u64	[&GlobalVar], $d0;
	atomicnoret_wrapdec_global_screl_wave_u64	[&GlobalVar], $d0;
	atomicnoret_wrapdec_global_scar_wave_u64	[&GlobalVar], $d0;
	atomicnoret_wrapdec_global_rlx_wg_u64	[&GlobalVar], $d0;
	atomicnoret_wrapdec_global_rlx_agent_u64	[&GlobalVar], $d0;
	atomicnoret_wrapdec_global_rlx_system_u64	[&GlobalVar], $d0;
	atomicnoret_wrapdec_global_rlx_wave_u64	[&GlobalSig64], $d0;
	atomicnoret_wrapdec_global_rlx_wave_u64	[$d0+2], $d0;
	atomicnoret_wrapdec_global_rlx_wave_u64	[$d0+3], $d0;
	atomicnoret_wrapdec_global_rlx_wave_u64	[$d0+5], $d0;
	atomicnoret_wrapdec_global_rlx_wave_u64	[$d0+6], $d0;
	atomicnoret_wrapdec_global_rlx_wave_u64	[0], $d0;
	atomicnoret_wrapdec_global_rlx_wave_u64	[&GlobalVar], -1;
	atomicnoret_wrapdec_global_rlx_wave_u64	[&GlobalVar], WAVESIZE;
	atomicnoret_wrapdec_global_rlx_wave_equiv(1)_u64	[&GlobalVar], $d0;
	atomicnoret_wrapdec_global_rlx_wave_equiv(2)_u64	[&GlobalVar], $d0;
	atomicnoret_wrapdec_global_rlx_wave_equiv(255)_u64	[&GlobalVar], $d0;
	// 
	// Next sample
	// 
	atomicnoret_wrapdec_group_rlx_wave_u64	[&GroupVar], $d0;
	// 
	atomicnoret_wrapdec_group_scacq_wave_u64	[&GroupVar], $d0;
	atomicnoret_wrapdec_group_screl_wave_u64	[&GroupVar], $d0;
	atomicnoret_wrapdec_group_scar_wave_u64	[&GroupVar], $d0;
	atomicnoret_wrapdec_group_rlx_wg_u64	[&GroupVar], $d0;
	atomicnoret_wrapdec_group_rlx_wave_u64	[$s0+2], $d0;
	atomicnoret_wrapdec_group_rlx_wave_u64	[$s0+3], $d0;
	atomicnoret_wrapdec_group_rlx_wave_u64	[$s0+5], $d0;
	atomicnoret_wrapdec_group_rlx_wave_u64	[$s0+6], $d0;
	atomicnoret_wrapdec_group_rlx_wave_u64	[0], $d0;
	atomicnoret_wrapdec_group_rlx_wave_u64	[&GroupVar], -1;
	atomicnoret_wrapdec_group_rlx_wave_u64	[&GroupVar], WAVESIZE;
	atomicnoret_wrapdec_group_rlx_wave_equiv(1)_u64	[&GroupVar], $d0;
	atomicnoret_wrapdec_group_rlx_wave_equiv(2)_u64	[&GroupVar], $d0;
	atomicnoret_wrapdec_group_rlx_wave_equiv(255)_u64	[&GroupVar], $d0;
	// 
	// Next sample
	// 
	atomicnoret_wrapinc_rlx_wave_u64	[$d0+2], $d0;
	// 
	atomicnoret_wrapinc_scacq_wave_u64	[$d0+2], $d0;
	atomicnoret_wrapinc_screl_wave_u64	[$d0+2], $d0;
	atomicnoret_wrapinc_scar_wave_u64	[$d0+2], $d0;
	atomicnoret_wrapinc_rlx_wg_u64	[$d0+2], $d0;
	atomicnoret_wrapinc_rlx_agent_u64	[$d0+2], $d0;
	atomicnoret_wrapinc_rlx_system_u64	[$d0+2], $d0;
	atomicnoret_wrapinc_rlx_wave_u64	[$d0+3], $d0;
	atomicnoret_wrapinc_rlx_wave_u64	[$d0+5], $d0;
	atomicnoret_wrapinc_rlx_wave_u64	[$d0+6], $d0;
	atomicnoret_wrapinc_rlx_wave_u64	[0], $d0;
	atomicnoret_wrapinc_rlx_wave_u64	[$d0+2], -1;
	atomicnoret_wrapinc_rlx_wave_u64	[$d0+2], WAVESIZE;
	atomicnoret_wrapinc_rlx_wave_equiv(1)_u64	[$d0+2], $d0;
	atomicnoret_wrapinc_rlx_wave_equiv(2)_u64	[$d0+2], $d0;
	atomicnoret_wrapinc_rlx_wave_equiv(255)_u64	[$d0+2], $d0;
	// 
	// Next sample
	// 
	atomicnoret_wrapinc_global_rlx_wave_u64	[&GlobalVar], $d0;
	// 
	atomicnoret_wrapinc_global_scacq_wave_u64	[&GlobalVar], $d0;
	atomicnoret_wrapinc_global_screl_wave_u64	[&GlobalVar], $d0;
	atomicnoret_wrapinc_global_scar_wave_u64	[&GlobalVar], $d0;
	atomicnoret_wrapinc_global_rlx_wg_u64	[&GlobalVar], $d0;
	atomicnoret_wrapinc_global_rlx_agent_u64	[&GlobalVar], $d0;
	atomicnoret_wrapinc_global_rlx_system_u64	[&GlobalVar], $d0;
	atomicnoret_wrapinc_global_rlx_wave_u64	[&GlobalSig64], $d0;
	atomicnoret_wrapinc_global_rlx_wave_u64	[$d0+2], $d0;
	atomicnoret_wrapinc_global_rlx_wave_u64	[$d0+3], $d0;
	atomicnoret_wrapinc_global_rlx_wave_u64	[$d0+5], $d0;
	atomicnoret_wrapinc_global_rlx_wave_u64	[$d0+6], $d0;
	atomicnoret_wrapinc_global_rlx_wave_u64	[0], $d0;
	atomicnoret_wrapinc_global_rlx_wave_u64	[&GlobalVar], -1;
	atomicnoret_wrapinc_global_rlx_wave_u64	[&GlobalVar], WAVESIZE;
	atomicnoret_wrapinc_global_rlx_wave_equiv(1)_u64	[&GlobalVar], $d0;
	atomicnoret_wrapinc_global_rlx_wave_equiv(2)_u64	[&GlobalVar], $d0;
	atomicnoret_wrapinc_global_rlx_wave_equiv(255)_u64	[&GlobalVar], $d0;
	// 
	// Next sample
	// 
	atomicnoret_wrapinc_group_rlx_wave_u64	[&GroupVar], $d0;
	// 
	atomicnoret_wrapinc_group_scacq_wave_u64	[&GroupVar], $d0;
	atomicnoret_wrapinc_group_screl_wave_u64	[&GroupVar], $d0;
	atomicnoret_wrapinc_group_scar_wave_u64	[&GroupVar], $d0;
	atomicnoret_wrapinc_group_rlx_wg_u64	[&GroupVar], $d0;
	atomicnoret_wrapinc_group_rlx_wave_u64	[$s0+2], $d0;
	atomicnoret_wrapinc_group_rlx_wave_u64	[$s0+3], $d0;
	atomicnoret_wrapinc_group_rlx_wave_u64	[$s0+5], $d0;
	atomicnoret_wrapinc_group_rlx_wave_u64	[$s0+6], $d0;
	atomicnoret_wrapinc_group_rlx_wave_u64	[0], $d0;
	atomicnoret_wrapinc_group_rlx_wave_u64	[&GroupVar], -1;
	atomicnoret_wrapinc_group_rlx_wave_u64	[&GroupVar], WAVESIZE;
	atomicnoret_wrapinc_group_rlx_wave_equiv(1)_u64	[&GroupVar], $d0;
	atomicnoret_wrapinc_group_rlx_wave_equiv(2)_u64	[&GroupVar], $d0;
	atomicnoret_wrapinc_group_rlx_wave_equiv(255)_u64	[&GroupVar], $d0;
	// 
	// Next sample
	// 
	atomicnoret_add_rlx_wave_s32	[$d0+2], $s0;
	// 
	atomicnoret_add_scacq_wave_s32	[$d0+2], $s0;
	atomicnoret_add_screl_wave_s32	[$d0+2], $s0;
	atomicnoret_add_scar_wave_s32	[$d0+2], $s0;
	atomicnoret_add_rlx_wg_s32	[$d0+2], $s0;
	atomicnoret_add_rlx_agent_s32	[$d0+2], $s0;
	atomicnoret_add_rlx_system_s32	[$d0+2], $s0;
	atomicnoret_add_rlx_wave_s32	[$d0+3], $s0;
	atomicnoret_add_rlx_wave_s32	[$d0+5], $s0;
	atomicnoret_add_rlx_wave_s32	[$d0+6], $s0;
	atomicnoret_add_rlx_wave_s32	[0], $s0;
	atomicnoret_add_rlx_wave_s32	[$d0+2], -1;
	atomicnoret_add_rlx_wave_s32	[$d0+2], WAVESIZE;
	atomicnoret_add_rlx_wave_equiv(1)_s32	[$d0+2], $s0;
	atomicnoret_add_rlx_wave_equiv(2)_s32	[$d0+2], $s0;
	atomicnoret_add_rlx_wave_equiv(255)_s32	[$d0+2], $s0;
	// 
	// Next sample
	// 
	atomicnoret_add_global_rlx_wave_s32	[&GlobalVar], $s0;
	// 
	atomicnoret_add_global_scacq_wave_s32	[&GlobalVar], $s0;
	atomicnoret_add_global_screl_wave_s32	[&GlobalVar], $s0;
	atomicnoret_add_global_scar_wave_s32	[&GlobalVar], $s0;
	atomicnoret_add_global_rlx_wg_s32	[&GlobalVar], $s0;
	atomicnoret_add_global_rlx_agent_s32	[&GlobalVar], $s0;
	atomicnoret_add_global_rlx_system_s32	[&GlobalVar], $s0;
	atomicnoret_add_global_rlx_wave_s32	[&GlobalSig64], $s0;
	atomicnoret_add_global_rlx_wave_s32	[$d0+2], $s0;
	atomicnoret_add_global_rlx_wave_s32	[$d0+3], $s0;
	atomicnoret_add_global_rlx_wave_s32	[$d0+5], $s0;
	atomicnoret_add_global_rlx_wave_s32	[$d0+6], $s0;
	atomicnoret_add_global_rlx_wave_s32	[0], $s0;
	atomicnoret_add_global_rlx_wave_s32	[&GlobalVar], -1;
	atomicnoret_add_global_rlx_wave_s32	[&GlobalVar], WAVESIZE;
	atomicnoret_add_global_rlx_wave_equiv(1)_s32	[&GlobalVar], $s0;
	atomicnoret_add_global_rlx_wave_equiv(2)_s32	[&GlobalVar], $s0;
	atomicnoret_add_global_rlx_wave_equiv(255)_s32	[&GlobalVar], $s0;
	// 
	// Next sample
	// 
	atomicnoret_add_group_rlx_wave_s32	[&GroupVar], $s0;
	// 
	atomicnoret_add_group_scacq_wave_s32	[&GroupVar], $s0;
	atomicnoret_add_group_screl_wave_s32	[&GroupVar], $s0;
	atomicnoret_add_group_scar_wave_s32	[&GroupVar], $s0;
	atomicnoret_add_group_rlx_wg_s32	[&GroupVar], $s0;
	atomicnoret_add_group_rlx_wave_s32	[$s0+2], $s0;
	atomicnoret_add_group_rlx_wave_s32	[$s0+3], $s0;
	atomicnoret_add_group_rlx_wave_s32	[$s0+5], $s0;
	atomicnoret_add_group_rlx_wave_s32	[$s0+6], $s0;
	atomicnoret_add_group_rlx_wave_s32	[0], $s0;
	atomicnoret_add_group_rlx_wave_s32	[&GroupVar], -1;
	atomicnoret_add_group_rlx_wave_s32	[&GroupVar], WAVESIZE;
	atomicnoret_add_group_rlx_wave_equiv(1)_s32	[&GroupVar], $s0;
	atomicnoret_add_group_rlx_wave_equiv(2)_s32	[&GroupVar], $s0;
	atomicnoret_add_group_rlx_wave_equiv(255)_s32	[&GroupVar], $s0;
	// 
	// Next sample
	// 
	atomicnoret_max_rlx_wave_s32	[$d0+2], $s0;
	// 
	atomicnoret_max_scacq_wave_s32	[$d0+2], $s0;
	atomicnoret_max_screl_wave_s32	[$d0+2], $s0;
	atomicnoret_max_scar_wave_s32	[$d0+2], $s0;
	atomicnoret_max_rlx_wg_s32	[$d0+2], $s0;
	atomicnoret_max_rlx_agent_s32	[$d0+2], $s0;
	atomicnoret_max_rlx_system_s32	[$d0+2], $s0;
	atomicnoret_max_rlx_wave_s32	[$d0+3], $s0;
	atomicnoret_max_rlx_wave_s32	[$d0+5], $s0;
	atomicnoret_max_rlx_wave_s32	[$d0+6], $s0;
	atomicnoret_max_rlx_wave_s32	[0], $s0;
	atomicnoret_max_rlx_wave_s32	[$d0+2], -1;
	atomicnoret_max_rlx_wave_s32	[$d0+2], WAVESIZE;
	atomicnoret_max_rlx_wave_equiv(1)_s32	[$d0+2], $s0;
	atomicnoret_max_rlx_wave_equiv(2)_s32	[$d0+2], $s0;
	atomicnoret_max_rlx_wave_equiv(255)_s32	[$d0+2], $s0;
	// 
	// Next sample
	// 
	atomicnoret_max_global_rlx_wave_s32	[&GlobalVar], $s0;
	// 
	atomicnoret_max_global_scacq_wave_s32	[&GlobalVar], $s0;
	atomicnoret_max_global_screl_wave_s32	[&GlobalVar], $s0;
	atomicnoret_max_global_scar_wave_s32	[&GlobalVar], $s0;
	atomicnoret_max_global_rlx_wg_s32	[&GlobalVar], $s0;
	atomicnoret_max_global_rlx_agent_s32	[&GlobalVar], $s0;
	atomicnoret_max_global_rlx_system_s32	[&GlobalVar], $s0;
	atomicnoret_max_global_rlx_wave_s32	[&GlobalSig64], $s0;
	atomicnoret_max_global_rlx_wave_s32	[$d0+2], $s0;
	atomicnoret_max_global_rlx_wave_s32	[$d0+3], $s0;
	atomicnoret_max_global_rlx_wave_s32	[$d0+5], $s0;
	atomicnoret_max_global_rlx_wave_s32	[$d0+6], $s0;
	atomicnoret_max_global_rlx_wave_s32	[0], $s0;
	atomicnoret_max_global_rlx_wave_s32	[&GlobalVar], -1;
	atomicnoret_max_global_rlx_wave_s32	[&GlobalVar], WAVESIZE;
	atomicnoret_max_global_rlx_wave_equiv(1)_s32	[&GlobalVar], $s0;
	atomicnoret_max_global_rlx_wave_equiv(2)_s32	[&GlobalVar], $s0;
	atomicnoret_max_global_rlx_wave_equiv(255)_s32	[&GlobalVar], $s0;
	// 
	// Next sample
	// 
	atomicnoret_max_group_rlx_wave_s32	[&GroupVar], $s0;
	// 
	atomicnoret_max_group_scacq_wave_s32	[&GroupVar], $s0;
	atomicnoret_max_group_screl_wave_s32	[&GroupVar], $s0;
	atomicnoret_max_group_scar_wave_s32	[&GroupVar], $s0;
	atomicnoret_max_group_rlx_wg_s32	[&GroupVar], $s0;
	atomicnoret_max_group_rlx_wave_s32	[$s0+2], $s0;
	atomicnoret_max_group_rlx_wave_s32	[$s0+3], $s0;
	atomicnoret_max_group_rlx_wave_s32	[$s0+5], $s0;
	atomicnoret_max_group_rlx_wave_s32	[$s0+6], $s0;
	atomicnoret_max_group_rlx_wave_s32	[0], $s0;
	atomicnoret_max_group_rlx_wave_s32	[&GroupVar], -1;
	atomicnoret_max_group_rlx_wave_s32	[&GroupVar], WAVESIZE;
	atomicnoret_max_group_rlx_wave_equiv(1)_s32	[&GroupVar], $s0;
	atomicnoret_max_group_rlx_wave_equiv(2)_s32	[&GroupVar], $s0;
	atomicnoret_max_group_rlx_wave_equiv(255)_s32	[&GroupVar], $s0;
	// 
	// Next sample
	// 
	atomicnoret_min_rlx_wave_s32	[$d0+2], $s0;
	// 
	atomicnoret_min_scacq_wave_s32	[$d0+2], $s0;
	atomicnoret_min_screl_wave_s32	[$d0+2], $s0;
	atomicnoret_min_scar_wave_s32	[$d0+2], $s0;
	atomicnoret_min_rlx_wg_s32	[$d0+2], $s0;
	atomicnoret_min_rlx_agent_s32	[$d0+2], $s0;
	atomicnoret_min_rlx_system_s32	[$d0+2], $s0;
	atomicnoret_min_rlx_wave_s32	[$d0+3], $s0;
	atomicnoret_min_rlx_wave_s32	[$d0+5], $s0;
	atomicnoret_min_rlx_wave_s32	[$d0+6], $s0;
	atomicnoret_min_rlx_wave_s32	[0], $s0;
	atomicnoret_min_rlx_wave_s32	[$d0+2], -1;
	atomicnoret_min_rlx_wave_s32	[$d0+2], WAVESIZE;
	atomicnoret_min_rlx_wave_equiv(1)_s32	[$d0+2], $s0;
	atomicnoret_min_rlx_wave_equiv(2)_s32	[$d0+2], $s0;
	atomicnoret_min_rlx_wave_equiv(255)_s32	[$d0+2], $s0;
	// 
	// Next sample
	// 
	atomicnoret_min_global_rlx_wave_s32	[&GlobalVar], $s0;
	// 
	atomicnoret_min_global_scacq_wave_s32	[&GlobalVar], $s0;
	atomicnoret_min_global_screl_wave_s32	[&GlobalVar], $s0;
	atomicnoret_min_global_scar_wave_s32	[&GlobalVar], $s0;
	atomicnoret_min_global_rlx_wg_s32	[&GlobalVar], $s0;
	atomicnoret_min_global_rlx_agent_s32	[&GlobalVar], $s0;
	atomicnoret_min_global_rlx_system_s32	[&GlobalVar], $s0;
	atomicnoret_min_global_rlx_wave_s32	[&GlobalSig64], $s0;
	atomicnoret_min_global_rlx_wave_s32	[$d0+2], $s0;
	atomicnoret_min_global_rlx_wave_s32	[$d0+3], $s0;
	atomicnoret_min_global_rlx_wave_s32	[$d0+5], $s0;
	atomicnoret_min_global_rlx_wave_s32	[$d0+6], $s0;
	atomicnoret_min_global_rlx_wave_s32	[0], $s0;
	atomicnoret_min_global_rlx_wave_s32	[&GlobalVar], -1;
	atomicnoret_min_global_rlx_wave_s32	[&GlobalVar], WAVESIZE;
	atomicnoret_min_global_rlx_wave_equiv(1)_s32	[&GlobalVar], $s0;
	atomicnoret_min_global_rlx_wave_equiv(2)_s32	[&GlobalVar], $s0;
	atomicnoret_min_global_rlx_wave_equiv(255)_s32	[&GlobalVar], $s0;
	// 
	// Next sample
	// 
	atomicnoret_min_group_rlx_wave_s32	[&GroupVar], $s0;
	// 
	atomicnoret_min_group_scacq_wave_s32	[&GroupVar], $s0;
	atomicnoret_min_group_screl_wave_s32	[&GroupVar], $s0;
	atomicnoret_min_group_scar_wave_s32	[&GroupVar], $s0;
	atomicnoret_min_group_rlx_wg_s32	[&GroupVar], $s0;
	atomicnoret_min_group_rlx_wave_s32	[$s0+2], $s0;
	atomicnoret_min_group_rlx_wave_s32	[$s0+3], $s0;
	atomicnoret_min_group_rlx_wave_s32	[$s0+5], $s0;
	atomicnoret_min_group_rlx_wave_s32	[$s0+6], $s0;
	atomicnoret_min_group_rlx_wave_s32	[0], $s0;
	atomicnoret_min_group_rlx_wave_s32	[&GroupVar], -1;
	atomicnoret_min_group_rlx_wave_s32	[&GroupVar], WAVESIZE;
	atomicnoret_min_group_rlx_wave_equiv(1)_s32	[&GroupVar], $s0;
	atomicnoret_min_group_rlx_wave_equiv(2)_s32	[&GroupVar], $s0;
	atomicnoret_min_group_rlx_wave_equiv(255)_s32	[&GroupVar], $s0;
	// 
	// Next sample
	// 
	atomicnoret_sub_rlx_wave_s32	[$d0+2], $s0;
	// 
	atomicnoret_sub_scacq_wave_s32	[$d0+2], $s0;
	atomicnoret_sub_screl_wave_s32	[$d0+2], $s0;
	atomicnoret_sub_scar_wave_s32	[$d0+2], $s0;
	atomicnoret_sub_rlx_wg_s32	[$d0+2], $s0;
	atomicnoret_sub_rlx_agent_s32	[$d0+2], $s0;
	atomicnoret_sub_rlx_system_s32	[$d0+2], $s0;
	atomicnoret_sub_rlx_wave_s32	[$d0+3], $s0;
	atomicnoret_sub_rlx_wave_s32	[$d0+5], $s0;
	atomicnoret_sub_rlx_wave_s32	[$d0+6], $s0;
	atomicnoret_sub_rlx_wave_s32	[0], $s0;
	atomicnoret_sub_rlx_wave_s32	[$d0+2], -1;
	atomicnoret_sub_rlx_wave_s32	[$d0+2], WAVESIZE;
	atomicnoret_sub_rlx_wave_equiv(1)_s32	[$d0+2], $s0;
	atomicnoret_sub_rlx_wave_equiv(2)_s32	[$d0+2], $s0;
	atomicnoret_sub_rlx_wave_equiv(255)_s32	[$d0+2], $s0;
	// 
	// Next sample
	// 
	atomicnoret_sub_global_rlx_wave_s32	[&GlobalVar], $s0;
	// 
	atomicnoret_sub_global_scacq_wave_s32	[&GlobalVar], $s0;
	atomicnoret_sub_global_screl_wave_s32	[&GlobalVar], $s0;
	atomicnoret_sub_global_scar_wave_s32	[&GlobalVar], $s0;
	atomicnoret_sub_global_rlx_wg_s32	[&GlobalVar], $s0;
	atomicnoret_sub_global_rlx_agent_s32	[&GlobalVar], $s0;
	atomicnoret_sub_global_rlx_system_s32	[&GlobalVar], $s0;
	atomicnoret_sub_global_rlx_wave_s32	[&GlobalSig64], $s0;
	atomicnoret_sub_global_rlx_wave_s32	[$d0+2], $s0;
	atomicnoret_sub_global_rlx_wave_s32	[$d0+3], $s0;
	atomicnoret_sub_global_rlx_wave_s32	[$d0+5], $s0;
	atomicnoret_sub_global_rlx_wave_s32	[$d0+6], $s0;
	atomicnoret_sub_global_rlx_wave_s32	[0], $s0;
	atomicnoret_sub_global_rlx_wave_s32	[&GlobalVar], -1;
	atomicnoret_sub_global_rlx_wave_s32	[&GlobalVar], WAVESIZE;
	atomicnoret_sub_global_rlx_wave_equiv(1)_s32	[&GlobalVar], $s0;
	atomicnoret_sub_global_rlx_wave_equiv(2)_s32	[&GlobalVar], $s0;
	atomicnoret_sub_global_rlx_wave_equiv(255)_s32	[&GlobalVar], $s0;
	// 
	// Next sample
	// 
	atomicnoret_sub_group_rlx_wave_s32	[&GroupVar], $s0;
	// 
	atomicnoret_sub_group_scacq_wave_s32	[&GroupVar], $s0;
	atomicnoret_sub_group_screl_wave_s32	[&GroupVar], $s0;
	atomicnoret_sub_group_scar_wave_s32	[&GroupVar], $s0;
	atomicnoret_sub_group_rlx_wg_s32	[&GroupVar], $s0;
	atomicnoret_sub_group_rlx_wave_s32	[$s0+2], $s0;
	atomicnoret_sub_group_rlx_wave_s32	[$s0+3], $s0;
	atomicnoret_sub_group_rlx_wave_s32	[$s0+5], $s0;
	atomicnoret_sub_group_rlx_wave_s32	[$s0+6], $s0;
	atomicnoret_sub_group_rlx_wave_s32	[0], $s0;
	atomicnoret_sub_group_rlx_wave_s32	[&GroupVar], -1;
	atomicnoret_sub_group_rlx_wave_s32	[&GroupVar], WAVESIZE;
	atomicnoret_sub_group_rlx_wave_equiv(1)_s32	[&GroupVar], $s0;
	atomicnoret_sub_group_rlx_wave_equiv(2)_s32	[&GroupVar], $s0;
	atomicnoret_sub_group_rlx_wave_equiv(255)_s32	[&GroupVar], $s0;
	// 
	// Next sample
	// 
	atomicnoret_add_rlx_wave_s64	[$d0+2], $d0;
	// 
	atomicnoret_add_scacq_wave_s64	[$d0+2], $d0;
	atomicnoret_add_screl_wave_s64	[$d0+2], $d0;
	atomicnoret_add_scar_wave_s64	[$d0+2], $d0;
	atomicnoret_add_rlx_wg_s64	[$d0+2], $d0;
	atomicnoret_add_rlx_agent_s64	[$d0+2], $d0;
	atomicnoret_add_rlx_system_s64	[$d0+2], $d0;
	atomicnoret_add_rlx_wave_s64	[$d0+3], $d0;
	atomicnoret_add_rlx_wave_s64	[$d0+5], $d0;
	atomicnoret_add_rlx_wave_s64	[$d0+6], $d0;
	atomicnoret_add_rlx_wave_s64	[0], $d0;
	atomicnoret_add_rlx_wave_s64	[$d0+2], -1;
	atomicnoret_add_rlx_wave_s64	[$d0+2], WAVESIZE;
	atomicnoret_add_rlx_wave_equiv(1)_s64	[$d0+2], $d0;
	atomicnoret_add_rlx_wave_equiv(2)_s64	[$d0+2], $d0;
	atomicnoret_add_rlx_wave_equiv(255)_s64	[$d0+2], $d0;
	// 
	// Next sample
	// 
	atomicnoret_add_global_rlx_wave_s64	[&GlobalVar], $d0;
	// 
	atomicnoret_add_global_scacq_wave_s64	[&GlobalVar], $d0;
	atomicnoret_add_global_screl_wave_s64	[&GlobalVar], $d0;
	atomicnoret_add_global_scar_wave_s64	[&GlobalVar], $d0;
	atomicnoret_add_global_rlx_wg_s64	[&GlobalVar], $d0;
	atomicnoret_add_global_rlx_agent_s64	[&GlobalVar], $d0;
	atomicnoret_add_global_rlx_system_s64	[&GlobalVar], $d0;
	atomicnoret_add_global_rlx_wave_s64	[&GlobalSig64], $d0;
	atomicnoret_add_global_rlx_wave_s64	[$d0+2], $d0;
	atomicnoret_add_global_rlx_wave_s64	[$d0+3], $d0;
	atomicnoret_add_global_rlx_wave_s64	[$d0+5], $d0;
	atomicnoret_add_global_rlx_wave_s64	[$d0+6], $d0;
	atomicnoret_add_global_rlx_wave_s64	[0], $d0;
	atomicnoret_add_global_rlx_wave_s64	[&GlobalVar], -1;
	atomicnoret_add_global_rlx_wave_s64	[&GlobalVar], WAVESIZE;
	atomicnoret_add_global_rlx_wave_equiv(1)_s64	[&GlobalVar], $d0;
	atomicnoret_add_global_rlx_wave_equiv(2)_s64	[&GlobalVar], $d0;
	atomicnoret_add_global_rlx_wave_equiv(255)_s64	[&GlobalVar], $d0;
	// 
	// Next sample
	// 
	atomicnoret_add_group_rlx_wave_s64	[&GroupVar], $d0;
	// 
	atomicnoret_add_group_scacq_wave_s64	[&GroupVar], $d0;
	atomicnoret_add_group_screl_wave_s64	[&GroupVar], $d0;
	atomicnoret_add_group_scar_wave_s64	[&GroupVar], $d0;
	atomicnoret_add_group_rlx_wg_s64	[&GroupVar], $d0;
	atomicnoret_add_group_rlx_wave_s64	[$s0+2], $d0;
	atomicnoret_add_group_rlx_wave_s64	[$s0+3], $d0;
	atomicnoret_add_group_rlx_wave_s64	[$s0+5], $d0;
	atomicnoret_add_group_rlx_wave_s64	[$s0+6], $d0;
	atomicnoret_add_group_rlx_wave_s64	[0], $d0;
	atomicnoret_add_group_rlx_wave_s64	[&GroupVar], -1;
	atomicnoret_add_group_rlx_wave_s64	[&GroupVar], WAVESIZE;
	atomicnoret_add_group_rlx_wave_equiv(1)_s64	[&GroupVar], $d0;
	atomicnoret_add_group_rlx_wave_equiv(2)_s64	[&GroupVar], $d0;
	atomicnoret_add_group_rlx_wave_equiv(255)_s64	[&GroupVar], $d0;
	// 
	// Next sample
	// 
	atomicnoret_max_rlx_wave_s64	[$d0+2], $d0;
	// 
	atomicnoret_max_scacq_wave_s64	[$d0+2], $d0;
	atomicnoret_max_screl_wave_s64	[$d0+2], $d0;
	atomicnoret_max_scar_wave_s64	[$d0+2], $d0;
	atomicnoret_max_rlx_wg_s64	[$d0+2], $d0;
	atomicnoret_max_rlx_agent_s64	[$d0+2], $d0;
	atomicnoret_max_rlx_system_s64	[$d0+2], $d0;
	atomicnoret_max_rlx_wave_s64	[$d0+3], $d0;
	atomicnoret_max_rlx_wave_s64	[$d0+5], $d0;
	atomicnoret_max_rlx_wave_s64	[$d0+6], $d0;
	atomicnoret_max_rlx_wave_s64	[0], $d0;
	atomicnoret_max_rlx_wave_s64	[$d0+2], -1;
	atomicnoret_max_rlx_wave_s64	[$d0+2], WAVESIZE;
	atomicnoret_max_rlx_wave_equiv(1)_s64	[$d0+2], $d0;
	atomicnoret_max_rlx_wave_equiv(2)_s64	[$d0+2], $d0;
	atomicnoret_max_rlx_wave_equiv(255)_s64	[$d0+2], $d0;
	// 
	// Next sample
	// 
	atomicnoret_max_global_rlx_wave_s64	[&GlobalVar], $d0;
	// 
	atomicnoret_max_global_scacq_wave_s64	[&GlobalVar], $d0;
	atomicnoret_max_global_screl_wave_s64	[&GlobalVar], $d0;
	atomicnoret_max_global_scar_wave_s64	[&GlobalVar], $d0;
	atomicnoret_max_global_rlx_wg_s64	[&GlobalVar], $d0;
	atomicnoret_max_global_rlx_agent_s64	[&GlobalVar], $d0;
	atomicnoret_max_global_rlx_system_s64	[&GlobalVar], $d0;
	atomicnoret_max_global_rlx_wave_s64	[&GlobalSig64], $d0;
	atomicnoret_max_global_rlx_wave_s64	[$d0+2], $d0;
	atomicnoret_max_global_rlx_wave_s64	[$d0+3], $d0;
	atomicnoret_max_global_rlx_wave_s64	[$d0+5], $d0;
	atomicnoret_max_global_rlx_wave_s64	[$d0+6], $d0;
	atomicnoret_max_global_rlx_wave_s64	[0], $d0;
	atomicnoret_max_global_rlx_wave_s64	[&GlobalVar], -1;
	atomicnoret_max_global_rlx_wave_s64	[&GlobalVar], WAVESIZE;
	atomicnoret_max_global_rlx_wave_equiv(1)_s64	[&GlobalVar], $d0;
	atomicnoret_max_global_rlx_wave_equiv(2)_s64	[&GlobalVar], $d0;
	atomicnoret_max_global_rlx_wave_equiv(255)_s64	[&GlobalVar], $d0;
	// 
	// Next sample
	// 
	atomicnoret_max_group_rlx_wave_s64	[&GroupVar], $d0;
	// 
	atomicnoret_max_group_scacq_wave_s64	[&GroupVar], $d0;
	atomicnoret_max_group_screl_wave_s64	[&GroupVar], $d0;
	atomicnoret_max_group_scar_wave_s64	[&GroupVar], $d0;
	atomicnoret_max_group_rlx_wg_s64	[&GroupVar], $d0;
	atomicnoret_max_group_rlx_wave_s64	[$s0+2], $d0;
	atomicnoret_max_group_rlx_wave_s64	[$s0+3], $d0;
	atomicnoret_max_group_rlx_wave_s64	[$s0+5], $d0;
	atomicnoret_max_group_rlx_wave_s64	[$s0+6], $d0;
	atomicnoret_max_group_rlx_wave_s64	[0], $d0;
	atomicnoret_max_group_rlx_wave_s64	[&GroupVar], -1;
	atomicnoret_max_group_rlx_wave_s64	[&GroupVar], WAVESIZE;
	atomicnoret_max_group_rlx_wave_equiv(1)_s64	[&GroupVar], $d0;
	atomicnoret_max_group_rlx_wave_equiv(2)_s64	[&GroupVar], $d0;
	atomicnoret_max_group_rlx_wave_equiv(255)_s64	[&GroupVar], $d0;
	// 
	// Next sample
	// 
	atomicnoret_min_rlx_wave_s64	[$d0+2], $d0;
	// 
	atomicnoret_min_scacq_wave_s64	[$d0+2], $d0;
	atomicnoret_min_screl_wave_s64	[$d0+2], $d0;
	atomicnoret_min_scar_wave_s64	[$d0+2], $d0;
	atomicnoret_min_rlx_wg_s64	[$d0+2], $d0;
	atomicnoret_min_rlx_agent_s64	[$d0+2], $d0;
	atomicnoret_min_rlx_system_s64	[$d0+2], $d0;
	atomicnoret_min_rlx_wave_s64	[$d0+3], $d0;
	atomicnoret_min_rlx_wave_s64	[$d0+5], $d0;
	atomicnoret_min_rlx_wave_s64	[$d0+6], $d0;
	atomicnoret_min_rlx_wave_s64	[0], $d0;
	atomicnoret_min_rlx_wave_s64	[$d0+2], -1;
	atomicnoret_min_rlx_wave_s64	[$d0+2], WAVESIZE;
	atomicnoret_min_rlx_wave_equiv(1)_s64	[$d0+2], $d0;
	atomicnoret_min_rlx_wave_equiv(2)_s64	[$d0+2], $d0;
	atomicnoret_min_rlx_wave_equiv(255)_s64	[$d0+2], $d0;
	// 
	// Next sample
	// 
	atomicnoret_min_global_rlx_wave_s64	[&GlobalVar], $d0;
	// 
	atomicnoret_min_global_scacq_wave_s64	[&GlobalVar], $d0;
	atomicnoret_min_global_screl_wave_s64	[&GlobalVar], $d0;
	atomicnoret_min_global_scar_wave_s64	[&GlobalVar], $d0;
	atomicnoret_min_global_rlx_wg_s64	[&GlobalVar], $d0;
	atomicnoret_min_global_rlx_agent_s64	[&GlobalVar], $d0;
	atomicnoret_min_global_rlx_system_s64	[&GlobalVar], $d0;
	atomicnoret_min_global_rlx_wave_s64	[&GlobalSig64], $d0;
	atomicnoret_min_global_rlx_wave_s64	[$d0+2], $d0;
	atomicnoret_min_global_rlx_wave_s64	[$d0+3], $d0;
	atomicnoret_min_global_rlx_wave_s64	[$d0+5], $d0;
	atomicnoret_min_global_rlx_wave_s64	[$d0+6], $d0;
	atomicnoret_min_global_rlx_wave_s64	[0], $d0;
	atomicnoret_min_global_rlx_wave_s64	[&GlobalVar], -1;
	atomicnoret_min_global_rlx_wave_s64	[&GlobalVar], WAVESIZE;
	atomicnoret_min_global_rlx_wave_equiv(1)_s64	[&GlobalVar], $d0;
	atomicnoret_min_global_rlx_wave_equiv(2)_s64	[&GlobalVar], $d0;
	atomicnoret_min_global_rlx_wave_equiv(255)_s64	[&GlobalVar], $d0;
	// 
	// Next sample
	// 
	atomicnoret_min_group_rlx_wave_s64	[&GroupVar], $d0;
	// 
	atomicnoret_min_group_scacq_wave_s64	[&GroupVar], $d0;
	atomicnoret_min_group_screl_wave_s64	[&GroupVar], $d0;
	atomicnoret_min_group_scar_wave_s64	[&GroupVar], $d0;
	atomicnoret_min_group_rlx_wg_s64	[&GroupVar], $d0;
	atomicnoret_min_group_rlx_wave_s64	[$s0+2], $d0;
	atomicnoret_min_group_rlx_wave_s64	[$s0+3], $d0;
	atomicnoret_min_group_rlx_wave_s64	[$s0+5], $d0;
	atomicnoret_min_group_rlx_wave_s64	[$s0+6], $d0;
	atomicnoret_min_group_rlx_wave_s64	[0], $d0;
	atomicnoret_min_group_rlx_wave_s64	[&GroupVar], -1;
	atomicnoret_min_group_rlx_wave_s64	[&GroupVar], WAVESIZE;
	atomicnoret_min_group_rlx_wave_equiv(1)_s64	[&GroupVar], $d0;
	atomicnoret_min_group_rlx_wave_equiv(2)_s64	[&GroupVar], $d0;
	atomicnoret_min_group_rlx_wave_equiv(255)_s64	[&GroupVar], $d0;
	// 
	// Next sample
	// 
	atomicnoret_sub_rlx_wave_s64	[$d0+2], $d0;
	// 
	atomicnoret_sub_scacq_wave_s64	[$d0+2], $d0;
	atomicnoret_sub_screl_wave_s64	[$d0+2], $d0;
	atomicnoret_sub_scar_wave_s64	[$d0+2], $d0;
	atomicnoret_sub_rlx_wg_s64	[$d0+2], $d0;
	atomicnoret_sub_rlx_agent_s64	[$d0+2], $d0;
	atomicnoret_sub_rlx_system_s64	[$d0+2], $d0;
	atomicnoret_sub_rlx_wave_s64	[$d0+3], $d0;
	atomicnoret_sub_rlx_wave_s64	[$d0+5], $d0;
	atomicnoret_sub_rlx_wave_s64	[$d0+6], $d0;
	atomicnoret_sub_rlx_wave_s64	[0], $d0;
	atomicnoret_sub_rlx_wave_s64	[$d0+2], -1;
	atomicnoret_sub_rlx_wave_s64	[$d0+2], WAVESIZE;
	atomicnoret_sub_rlx_wave_equiv(1)_s64	[$d0+2], $d0;
	atomicnoret_sub_rlx_wave_equiv(2)_s64	[$d0+2], $d0;
	atomicnoret_sub_rlx_wave_equiv(255)_s64	[$d0+2], $d0;
	// 
	// Next sample
	// 
	atomicnoret_sub_global_rlx_wave_s64	[&GlobalVar], $d0;
	// 
	atomicnoret_sub_global_scacq_wave_s64	[&GlobalVar], $d0;
	atomicnoret_sub_global_screl_wave_s64	[&GlobalVar], $d0;
	atomicnoret_sub_global_scar_wave_s64	[&GlobalVar], $d0;
	atomicnoret_sub_global_rlx_wg_s64	[&GlobalVar], $d0;
	atomicnoret_sub_global_rlx_agent_s64	[&GlobalVar], $d0;
	atomicnoret_sub_global_rlx_system_s64	[&GlobalVar], $d0;
	atomicnoret_sub_global_rlx_wave_s64	[&GlobalSig64], $d0;
	atomicnoret_sub_global_rlx_wave_s64	[$d0+2], $d0;
	atomicnoret_sub_global_rlx_wave_s64	[$d0+3], $d0;
	atomicnoret_sub_global_rlx_wave_s64	[$d0+5], $d0;
	atomicnoret_sub_global_rlx_wave_s64	[$d0+6], $d0;
	atomicnoret_sub_global_rlx_wave_s64	[0], $d0;
	atomicnoret_sub_global_rlx_wave_s64	[&GlobalVar], -1;
	atomicnoret_sub_global_rlx_wave_s64	[&GlobalVar], WAVESIZE;
	atomicnoret_sub_global_rlx_wave_equiv(1)_s64	[&GlobalVar], $d0;
	atomicnoret_sub_global_rlx_wave_equiv(2)_s64	[&GlobalVar], $d0;
	atomicnoret_sub_global_rlx_wave_equiv(255)_s64	[&GlobalVar], $d0;
	// 
	// Next sample
	// 
	atomicnoret_sub_group_rlx_wave_s64	[&GroupVar], $d0;
	// 
	atomicnoret_sub_group_scacq_wave_s64	[&GroupVar], $d0;
	atomicnoret_sub_group_screl_wave_s64	[&GroupVar], $d0;
	atomicnoret_sub_group_scar_wave_s64	[&GroupVar], $d0;
	atomicnoret_sub_group_rlx_wg_s64	[&GroupVar], $d0;
	atomicnoret_sub_group_rlx_wave_s64	[$s0+2], $d0;
	atomicnoret_sub_group_rlx_wave_s64	[$s0+3], $d0;
	atomicnoret_sub_group_rlx_wave_s64	[$s0+5], $d0;
	atomicnoret_sub_group_rlx_wave_s64	[$s0+6], $d0;
	atomicnoret_sub_group_rlx_wave_s64	[0], $d0;
	atomicnoret_sub_group_rlx_wave_s64	[&GroupVar], -1;
	atomicnoret_sub_group_rlx_wave_s64	[&GroupVar], WAVESIZE;
	atomicnoret_sub_group_rlx_wave_equiv(1)_s64	[&GroupVar], $d0;
	atomicnoret_sub_group_rlx_wave_equiv(2)_s64	[&GroupVar], $d0;
	atomicnoret_sub_group_rlx_wave_equiv(255)_s64	[&GroupVar], $d0;
	// 
	// Next sample
	// 
	atomicnoret_and_rlx_wave_b32	[$d0+2], $s0;
	// 
	atomicnoret_and_scacq_wave_b32	[$d0+2], $s0;
	atomicnoret_and_screl_wave_b32	[$d0+2], $s0;
	atomicnoret_and_scar_wave_b32	[$d0+2], $s0;
	atomicnoret_and_rlx_wg_b32	[$d0+2], $s0;
	atomicnoret_and_rlx_agent_b32	[$d0+2], $s0;
	atomicnoret_and_rlx_system_b32	[$d0+2], $s0;
	atomicnoret_and_rlx_wave_b32	[$d0+3], $s0;
	atomicnoret_and_rlx_wave_b32	[$d0+5], $s0;
	atomicnoret_and_rlx_wave_b32	[$d0+6], $s0;
	atomicnoret_and_rlx_wave_b32	[0], $s0;
	atomicnoret_and_rlx_wave_b32	[$d0+2], -1;
	atomicnoret_and_rlx_wave_b32	[$d0+2], WAVESIZE;
	atomicnoret_and_rlx_wave_equiv(1)_b32	[$d0+2], $s0;
	atomicnoret_and_rlx_wave_equiv(2)_b32	[$d0+2], $s0;
	atomicnoret_and_rlx_wave_equiv(255)_b32	[$d0+2], $s0;
	// 
	// Next sample
	// 
	atomicnoret_and_global_rlx_wave_b32	[&GlobalVar], $s0;
	// 
	atomicnoret_and_global_scacq_wave_b32	[&GlobalVar], $s0;
	atomicnoret_and_global_screl_wave_b32	[&GlobalVar], $s0;
	atomicnoret_and_global_scar_wave_b32	[&GlobalVar], $s0;
	atomicnoret_and_global_rlx_wg_b32	[&GlobalVar], $s0;
	atomicnoret_and_global_rlx_agent_b32	[&GlobalVar], $s0;
	atomicnoret_and_global_rlx_system_b32	[&GlobalVar], $s0;
	atomicnoret_and_global_rlx_wave_b32	[&GlobalSig64], $s0;
	atomicnoret_and_global_rlx_wave_b32	[$d0+2], $s0;
	atomicnoret_and_global_rlx_wave_b32	[$d0+3], $s0;
	atomicnoret_and_global_rlx_wave_b32	[$d0+5], $s0;
	atomicnoret_and_global_rlx_wave_b32	[$d0+6], $s0;
	atomicnoret_and_global_rlx_wave_b32	[0], $s0;
	atomicnoret_and_global_rlx_wave_b32	[&GlobalVar], -1;
	atomicnoret_and_global_rlx_wave_b32	[&GlobalVar], WAVESIZE;
	atomicnoret_and_global_rlx_wave_equiv(1)_b32	[&GlobalVar], $s0;
	atomicnoret_and_global_rlx_wave_equiv(2)_b32	[&GlobalVar], $s0;
	atomicnoret_and_global_rlx_wave_equiv(255)_b32	[&GlobalVar], $s0;
	// 
	// Next sample
	// 
	atomicnoret_and_group_rlx_wave_b32	[&GroupVar], $s0;
	// 
	atomicnoret_and_group_scacq_wave_b32	[&GroupVar], $s0;
	atomicnoret_and_group_screl_wave_b32	[&GroupVar], $s0;
	atomicnoret_and_group_scar_wave_b32	[&GroupVar], $s0;
	atomicnoret_and_group_rlx_wg_b32	[&GroupVar], $s0;
	atomicnoret_and_group_rlx_wave_b32	[$s0+2], $s0;
	atomicnoret_and_group_rlx_wave_b32	[$s0+3], $s0;
	atomicnoret_and_group_rlx_wave_b32	[$s0+5], $s0;
	atomicnoret_and_group_rlx_wave_b32	[$s0+6], $s0;
	atomicnoret_and_group_rlx_wave_b32	[0], $s0;
	atomicnoret_and_group_rlx_wave_b32	[&GroupVar], -1;
	atomicnoret_and_group_rlx_wave_b32	[&GroupVar], WAVESIZE;
	atomicnoret_and_group_rlx_wave_equiv(1)_b32	[&GroupVar], $s0;
	atomicnoret_and_group_rlx_wave_equiv(2)_b32	[&GroupVar], $s0;
	atomicnoret_and_group_rlx_wave_equiv(255)_b32	[&GroupVar], $s0;
	// 
	// Next sample
	// 
	atomicnoret_or_rlx_wave_b32	[$d0+2], $s0;
	// 
	atomicnoret_or_scacq_wave_b32	[$d0+2], $s0;
	atomicnoret_or_screl_wave_b32	[$d0+2], $s0;
	atomicnoret_or_scar_wave_b32	[$d0+2], $s0;
	atomicnoret_or_rlx_wg_b32	[$d0+2], $s0;
	atomicnoret_or_rlx_agent_b32	[$d0+2], $s0;
	atomicnoret_or_rlx_system_b32	[$d0+2], $s0;
	atomicnoret_or_rlx_wave_b32	[$d0+3], $s0;
	atomicnoret_or_rlx_wave_b32	[$d0+5], $s0;
	atomicnoret_or_rlx_wave_b32	[$d0+6], $s0;
	atomicnoret_or_rlx_wave_b32	[0], $s0;
	atomicnoret_or_rlx_wave_b32	[$d0+2], -1;
	atomicnoret_or_rlx_wave_b32	[$d0+2], WAVESIZE;
	atomicnoret_or_rlx_wave_equiv(1)_b32	[$d0+2], $s0;
	atomicnoret_or_rlx_wave_equiv(2)_b32	[$d0+2], $s0;
	atomicnoret_or_rlx_wave_equiv(255)_b32	[$d0+2], $s0;
	// 
	// Next sample
	// 
	atomicnoret_or_global_rlx_wave_b32	[&GlobalVar], $s0;
	// 
	atomicnoret_or_global_scacq_wave_b32	[&GlobalVar], $s0;
	atomicnoret_or_global_screl_wave_b32	[&GlobalVar], $s0;
	atomicnoret_or_global_scar_wave_b32	[&GlobalVar], $s0;
	atomicnoret_or_global_rlx_wg_b32	[&GlobalVar], $s0;
	atomicnoret_or_global_rlx_agent_b32	[&GlobalVar], $s0;
	atomicnoret_or_global_rlx_system_b32	[&GlobalVar], $s0;
	atomicnoret_or_global_rlx_wave_b32	[&GlobalSig64], $s0;
	atomicnoret_or_global_rlx_wave_b32	[$d0+2], $s0;
	atomicnoret_or_global_rlx_wave_b32	[$d0+3], $s0;
	atomicnoret_or_global_rlx_wave_b32	[$d0+5], $s0;
	atomicnoret_or_global_rlx_wave_b32	[$d0+6], $s0;
	atomicnoret_or_global_rlx_wave_b32	[0], $s0;
	atomicnoret_or_global_rlx_wave_b32	[&GlobalVar], -1;
	atomicnoret_or_global_rlx_wave_b32	[&GlobalVar], WAVESIZE;
	atomicnoret_or_global_rlx_wave_equiv(1)_b32	[&GlobalVar], $s0;
	atomicnoret_or_global_rlx_wave_equiv(2)_b32	[&GlobalVar], $s0;
	atomicnoret_or_global_rlx_wave_equiv(255)_b32	[&GlobalVar], $s0;
	// 
	// Next sample
	// 
	atomicnoret_or_group_rlx_wave_b32	[&GroupVar], $s0;
	// 
	atomicnoret_or_group_scacq_wave_b32	[&GroupVar], $s0;
	atomicnoret_or_group_screl_wave_b32	[&GroupVar], $s0;
	atomicnoret_or_group_scar_wave_b32	[&GroupVar], $s0;
	atomicnoret_or_group_rlx_wg_b32	[&GroupVar], $s0;
	atomicnoret_or_group_rlx_wave_b32	[$s0+2], $s0;
	atomicnoret_or_group_rlx_wave_b32	[$s0+3], $s0;
	atomicnoret_or_group_rlx_wave_b32	[$s0+5], $s0;
	atomicnoret_or_group_rlx_wave_b32	[$s0+6], $s0;
	atomicnoret_or_group_rlx_wave_b32	[0], $s0;
	atomicnoret_or_group_rlx_wave_b32	[&GroupVar], -1;
	atomicnoret_or_group_rlx_wave_b32	[&GroupVar], WAVESIZE;
	atomicnoret_or_group_rlx_wave_equiv(1)_b32	[&GroupVar], $s0;
	atomicnoret_or_group_rlx_wave_equiv(2)_b32	[&GroupVar], $s0;
	atomicnoret_or_group_rlx_wave_equiv(255)_b32	[&GroupVar], $s0;
	// 
	// Next sample
	// 
	atomicnoret_st_rlx_wave_b32	[$d0+2], $s0;
	// 
	atomicnoret_st_screl_wave_b32	[$d0+2], $s0;
	atomicnoret_st_rlx_wg_b32	[$d0+2], $s0;
	atomicnoret_st_rlx_agent_b32	[$d0+2], $s0;
	atomicnoret_st_rlx_system_b32	[$d0+2], $s0;
	atomicnoret_st_rlx_wave_b32	[$d0+3], $s0;
	atomicnoret_st_rlx_wave_b32	[$d0+5], $s0;
	atomicnoret_st_rlx_wave_b32	[$d0+6], $s0;
	atomicnoret_st_rlx_wave_b32	[0], $s0;
	atomicnoret_st_rlx_wave_b32	[$d0+2], -1;
	atomicnoret_st_rlx_wave_b32	[$d0+2], WAVESIZE;
	atomicnoret_st_rlx_wave_equiv(1)_b32	[$d0+2], $s0;
	atomicnoret_st_rlx_wave_equiv(2)_b32	[$d0+2], $s0;
	atomicnoret_st_rlx_wave_equiv(255)_b32	[$d0+2], $s0;
	// 
	// Next sample
	// 
	atomicnoret_st_global_rlx_wave_b32	[&GlobalVar], $s0;
	// 
	atomicnoret_st_global_screl_wave_b32	[&GlobalVar], $s0;
	atomicnoret_st_global_rlx_wg_b32	[&GlobalVar], $s0;
	atomicnoret_st_global_rlx_agent_b32	[&GlobalVar], $s0;
	atomicnoret_st_global_rlx_system_b32	[&GlobalVar], $s0;
	atomicnoret_st_global_rlx_wave_b32	[&GlobalSig64], $s0;
	atomicnoret_st_global_rlx_wave_b32	[$d0+2], $s0;
	atomicnoret_st_global_rlx_wave_b32	[$d0+3], $s0;
	atomicnoret_st_global_rlx_wave_b32	[$d0+5], $s0;
	atomicnoret_st_global_rlx_wave_b32	[$d0+6], $s0;
	atomicnoret_st_global_rlx_wave_b32	[0], $s0;
	atomicnoret_st_global_rlx_wave_b32	[&GlobalVar], -1;
	atomicnoret_st_global_rlx_wave_b32	[&GlobalVar], WAVESIZE;
	atomicnoret_st_global_rlx_wave_equiv(1)_b32	[&GlobalVar], $s0;
	atomicnoret_st_global_rlx_wave_equiv(2)_b32	[&GlobalVar], $s0;
	atomicnoret_st_global_rlx_wave_equiv(255)_b32	[&GlobalVar], $s0;
	// 
	// Next sample
	// 
	atomicnoret_st_group_rlx_wave_b32	[&GroupVar], $s0;
	// 
	atomicnoret_st_group_screl_wave_b32	[&GroupVar], $s0;
	atomicnoret_st_group_rlx_wg_b32	[&GroupVar], $s0;
	atomicnoret_st_group_rlx_wave_b32	[$s0+2], $s0;
	atomicnoret_st_group_rlx_wave_b32	[$s0+3], $s0;
	atomicnoret_st_group_rlx_wave_b32	[$s0+5], $s0;
	atomicnoret_st_group_rlx_wave_b32	[$s0+6], $s0;
	atomicnoret_st_group_rlx_wave_b32	[0], $s0;
	atomicnoret_st_group_rlx_wave_b32	[&GroupVar], -1;
	atomicnoret_st_group_rlx_wave_b32	[&GroupVar], WAVESIZE;
	atomicnoret_st_group_rlx_wave_equiv(1)_b32	[&GroupVar], $s0;
	atomicnoret_st_group_rlx_wave_equiv(2)_b32	[&GroupVar], $s0;
	atomicnoret_st_group_rlx_wave_equiv(255)_b32	[&GroupVar], $s0;
	// 
	// Next sample
	// 
	atomicnoret_xor_rlx_wave_b32	[$d0+2], $s0;
	// 
	atomicnoret_xor_scacq_wave_b32	[$d0+2], $s0;
	atomicnoret_xor_screl_wave_b32	[$d0+2], $s0;
	atomicnoret_xor_scar_wave_b32	[$d0+2], $s0;
	atomicnoret_xor_rlx_wg_b32	[$d0+2], $s0;
	atomicnoret_xor_rlx_agent_b32	[$d0+2], $s0;
	atomicnoret_xor_rlx_system_b32	[$d0+2], $s0;
	atomicnoret_xor_rlx_wave_b32	[$d0+3], $s0;
	atomicnoret_xor_rlx_wave_b32	[$d0+5], $s0;
	atomicnoret_xor_rlx_wave_b32	[$d0+6], $s0;
	atomicnoret_xor_rlx_wave_b32	[0], $s0;
	atomicnoret_xor_rlx_wave_b32	[$d0+2], -1;
	atomicnoret_xor_rlx_wave_b32	[$d0+2], WAVESIZE;
	atomicnoret_xor_rlx_wave_equiv(1)_b32	[$d0+2], $s0;
	atomicnoret_xor_rlx_wave_equiv(2)_b32	[$d0+2], $s0;
	atomicnoret_xor_rlx_wave_equiv(255)_b32	[$d0+2], $s0;
	// 
	// Next sample
	// 
	atomicnoret_xor_global_rlx_wave_b32	[&GlobalVar], $s0;
	// 
	atomicnoret_xor_global_scacq_wave_b32	[&GlobalVar], $s0;
	atomicnoret_xor_global_screl_wave_b32	[&GlobalVar], $s0;
	atomicnoret_xor_global_scar_wave_b32	[&GlobalVar], $s0;
	atomicnoret_xor_global_rlx_wg_b32	[&GlobalVar], $s0;
	atomicnoret_xor_global_rlx_agent_b32	[&GlobalVar], $s0;
	atomicnoret_xor_global_rlx_system_b32	[&GlobalVar], $s0;
	atomicnoret_xor_global_rlx_wave_b32	[&GlobalSig64], $s0;
	atomicnoret_xor_global_rlx_wave_b32	[$d0+2], $s0;
	atomicnoret_xor_global_rlx_wave_b32	[$d0+3], $s0;
	atomicnoret_xor_global_rlx_wave_b32	[$d0+5], $s0;
	atomicnoret_xor_global_rlx_wave_b32	[$d0+6], $s0;
	atomicnoret_xor_global_rlx_wave_b32	[0], $s0;
	atomicnoret_xor_global_rlx_wave_b32	[&GlobalVar], -1;
	atomicnoret_xor_global_rlx_wave_b32	[&GlobalVar], WAVESIZE;
	atomicnoret_xor_global_rlx_wave_equiv(1)_b32	[&GlobalVar], $s0;
	atomicnoret_xor_global_rlx_wave_equiv(2)_b32	[&GlobalVar], $s0;
	atomicnoret_xor_global_rlx_wave_equiv(255)_b32	[&GlobalVar], $s0;
	// 
	// Next sample
	// 
	atomicnoret_xor_group_rlx_wave_b32	[&GroupVar], $s0;
	// 
	atomicnoret_xor_group_scacq_wave_b32	[&GroupVar], $s0;
	atomicnoret_xor_group_screl_wave_b32	[&GroupVar], $s0;
	atomicnoret_xor_group_scar_wave_b32	[&GroupVar], $s0;
	atomicnoret_xor_group_rlx_wg_b32	[&GroupVar], $s0;
	atomicnoret_xor_group_rlx_wave_b32	[$s0+2], $s0;
	atomicnoret_xor_group_rlx_wave_b32	[$s0+3], $s0;
	atomicnoret_xor_group_rlx_wave_b32	[$s0+5], $s0;
	atomicnoret_xor_group_rlx_wave_b32	[$s0+6], $s0;
	atomicnoret_xor_group_rlx_wave_b32	[0], $s0;
	atomicnoret_xor_group_rlx_wave_b32	[&GroupVar], -1;
	atomicnoret_xor_group_rlx_wave_b32	[&GroupVar], WAVESIZE;
	atomicnoret_xor_group_rlx_wave_equiv(1)_b32	[&GroupVar], $s0;
	atomicnoret_xor_group_rlx_wave_equiv(2)_b32	[&GroupVar], $s0;
	atomicnoret_xor_group_rlx_wave_equiv(255)_b32	[&GroupVar], $s0;
	// 
	// Next sample
	// 
	atomicnoret_and_rlx_wave_b64	[$d0+2], $d0;
	// 
	atomicnoret_and_scacq_wave_b64	[$d0+2], $d0;
	atomicnoret_and_screl_wave_b64	[$d0+2], $d0;
	atomicnoret_and_scar_wave_b64	[$d0+2], $d0;
	atomicnoret_and_rlx_wg_b64	[$d0+2], $d0;
	atomicnoret_and_rlx_agent_b64	[$d0+2], $d0;
	atomicnoret_and_rlx_system_b64	[$d0+2], $d0;
	atomicnoret_and_rlx_wave_b64	[$d0+3], $d0;
	atomicnoret_and_rlx_wave_b64	[$d0+5], $d0;
	atomicnoret_and_rlx_wave_b64	[$d0+6], $d0;
	atomicnoret_and_rlx_wave_b64	[0], $d0;
	atomicnoret_and_rlx_wave_b64	[$d0+2], -1;
	atomicnoret_and_rlx_wave_b64	[$d0+2], WAVESIZE;
	atomicnoret_and_rlx_wave_equiv(1)_b64	[$d0+2], $d0;
	atomicnoret_and_rlx_wave_equiv(2)_b64	[$d0+2], $d0;
	atomicnoret_and_rlx_wave_equiv(255)_b64	[$d0+2], $d0;
	// 
	// Next sample
	// 
	atomicnoret_and_global_rlx_wave_b64	[&GlobalVar], $d0;
	// 
	atomicnoret_and_global_scacq_wave_b64	[&GlobalVar], $d0;
	atomicnoret_and_global_screl_wave_b64	[&GlobalVar], $d0;
	atomicnoret_and_global_scar_wave_b64	[&GlobalVar], $d0;
	atomicnoret_and_global_rlx_wg_b64	[&GlobalVar], $d0;
	atomicnoret_and_global_rlx_agent_b64	[&GlobalVar], $d0;
	atomicnoret_and_global_rlx_system_b64	[&GlobalVar], $d0;
	atomicnoret_and_global_rlx_wave_b64	[&GlobalSig64], $d0;
	atomicnoret_and_global_rlx_wave_b64	[$d0+2], $d0;
	atomicnoret_and_global_rlx_wave_b64	[$d0+3], $d0;
	atomicnoret_and_global_rlx_wave_b64	[$d0+5], $d0;
	atomicnoret_and_global_rlx_wave_b64	[$d0+6], $d0;
	atomicnoret_and_global_rlx_wave_b64	[0], $d0;
	atomicnoret_and_global_rlx_wave_b64	[&GlobalVar], -1;
	atomicnoret_and_global_rlx_wave_b64	[&GlobalVar], WAVESIZE;
	atomicnoret_and_global_rlx_wave_equiv(1)_b64	[&GlobalVar], $d0;
	atomicnoret_and_global_rlx_wave_equiv(2)_b64	[&GlobalVar], $d0;
	atomicnoret_and_global_rlx_wave_equiv(255)_b64	[&GlobalVar], $d0;
	// 
	// Next sample
	// 
	atomicnoret_and_group_rlx_wave_b64	[&GroupVar], $d0;
	// 
	atomicnoret_and_group_scacq_wave_b64	[&GroupVar], $d0;
	atomicnoret_and_group_screl_wave_b64	[&GroupVar], $d0;
	atomicnoret_and_group_scar_wave_b64	[&GroupVar], $d0;
	atomicnoret_and_group_rlx_wg_b64	[&GroupVar], $d0;
	atomicnoret_and_group_rlx_wave_b64	[$s0+2], $d0;
	atomicnoret_and_group_rlx_wave_b64	[$s0+3], $d0;
	atomicnoret_and_group_rlx_wave_b64	[$s0+5], $d0;
	atomicnoret_and_group_rlx_wave_b64	[$s0+6], $d0;
	atomicnoret_and_group_rlx_wave_b64	[0], $d0;
	atomicnoret_and_group_rlx_wave_b64	[&GroupVar], -1;
	atomicnoret_and_group_rlx_wave_b64	[&GroupVar], WAVESIZE;
	atomicnoret_and_group_rlx_wave_equiv(1)_b64	[&GroupVar], $d0;
	atomicnoret_and_group_rlx_wave_equiv(2)_b64	[&GroupVar], $d0;
	atomicnoret_and_group_rlx_wave_equiv(255)_b64	[&GroupVar], $d0;
	// 
	// Next sample
	// 
	atomicnoret_or_rlx_wave_b64	[$d0+2], $d0;
	// 
	atomicnoret_or_scacq_wave_b64	[$d0+2], $d0;
	atomicnoret_or_screl_wave_b64	[$d0+2], $d0;
	atomicnoret_or_scar_wave_b64	[$d0+2], $d0;
	atomicnoret_or_rlx_wg_b64	[$d0+2], $d0;
	atomicnoret_or_rlx_agent_b64	[$d0+2], $d0;
	atomicnoret_or_rlx_system_b64	[$d0+2], $d0;
	atomicnoret_or_rlx_wave_b64	[$d0+3], $d0;
	atomicnoret_or_rlx_wave_b64	[$d0+5], $d0;
	atomicnoret_or_rlx_wave_b64	[$d0+6], $d0;
	atomicnoret_or_rlx_wave_b64	[0], $d0;
	atomicnoret_or_rlx_wave_b64	[$d0+2], -1;
	atomicnoret_or_rlx_wave_b64	[$d0+2], WAVESIZE;
	atomicnoret_or_rlx_wave_equiv(1)_b64	[$d0+2], $d0;
	atomicnoret_or_rlx_wave_equiv(2)_b64	[$d0+2], $d0;
	atomicnoret_or_rlx_wave_equiv(255)_b64	[$d0+2], $d0;
	// 
	// Next sample
	// 
	atomicnoret_or_global_rlx_wave_b64	[&GlobalVar], $d0;
	// 
	atomicnoret_or_global_scacq_wave_b64	[&GlobalVar], $d0;
	atomicnoret_or_global_screl_wave_b64	[&GlobalVar], $d0;
	atomicnoret_or_global_scar_wave_b64	[&GlobalVar], $d0;
	atomicnoret_or_global_rlx_wg_b64	[&GlobalVar], $d0;
	atomicnoret_or_global_rlx_agent_b64	[&GlobalVar], $d0;
	atomicnoret_or_global_rlx_system_b64	[&GlobalVar], $d0;
	atomicnoret_or_global_rlx_wave_b64	[&GlobalSig64], $d0;
	atomicnoret_or_global_rlx_wave_b64	[$d0+2], $d0;
	atomicnoret_or_global_rlx_wave_b64	[$d0+3], $d0;
	atomicnoret_or_global_rlx_wave_b64	[$d0+5], $d0;
	atomicnoret_or_global_rlx_wave_b64	[$d0+6], $d0;
	atomicnoret_or_global_rlx_wave_b64	[0], $d0;
	atomicnoret_or_global_rlx_wave_b64	[&GlobalVar], -1;
	atomicnoret_or_global_rlx_wave_b64	[&GlobalVar], WAVESIZE;
	atomicnoret_or_global_rlx_wave_equiv(1)_b64	[&GlobalVar], $d0;
	atomicnoret_or_global_rlx_wave_equiv(2)_b64	[&GlobalVar], $d0;
	atomicnoret_or_global_rlx_wave_equiv(255)_b64	[&GlobalVar], $d0;
	// 
	// Next sample
	// 
	atomicnoret_or_group_rlx_wave_b64	[&GroupVar], $d0;
	// 
	atomicnoret_or_group_scacq_wave_b64	[&GroupVar], $d0;
	atomicnoret_or_group_screl_wave_b64	[&GroupVar], $d0;
	atomicnoret_or_group_scar_wave_b64	[&GroupVar], $d0;
	atomicnoret_or_group_rlx_wg_b64	[&GroupVar], $d0;
	atomicnoret_or_group_rlx_wave_b64	[$s0+2], $d0;
	atomicnoret_or_group_rlx_wave_b64	[$s0+3], $d0;
	atomicnoret_or_group_rlx_wave_b64	[$s0+5], $d0;
	atomicnoret_or_group_rlx_wave_b64	[$s0+6], $d0;
	atomicnoret_or_group_rlx_wave_b64	[0], $d0;
	atomicnoret_or_group_rlx_wave_b64	[&GroupVar], -1;
	atomicnoret_or_group_rlx_wave_b64	[&GroupVar], WAVESIZE;
	atomicnoret_or_group_rlx_wave_equiv(1)_b64	[&GroupVar], $d0;
	atomicnoret_or_group_rlx_wave_equiv(2)_b64	[&GroupVar], $d0;
	atomicnoret_or_group_rlx_wave_equiv(255)_b64	[&GroupVar], $d0;
	// 
	// Next sample
	// 
	atomicnoret_st_rlx_wave_b64	[$d0+2], $d0;
	// 
	atomicnoret_st_screl_wave_b64	[$d0+2], $d0;
	atomicnoret_st_rlx_wg_b64	[$d0+2], $d0;
	atomicnoret_st_rlx_agent_b64	[$d0+2], $d0;
	atomicnoret_st_rlx_system_b64	[$d0+2], $d0;
	atomicnoret_st_rlx_wave_b64	[$d0+3], $d0;
	atomicnoret_st_rlx_wave_b64	[$d0+5], $d0;
	atomicnoret_st_rlx_wave_b64	[$d0+6], $d0;
	atomicnoret_st_rlx_wave_b64	[0], $d0;
	atomicnoret_st_rlx_wave_b64	[$d0+2], -1;
	atomicnoret_st_rlx_wave_b64	[$d0+2], WAVESIZE;
	atomicnoret_st_rlx_wave_equiv(1)_b64	[$d0+2], $d0;
	atomicnoret_st_rlx_wave_equiv(2)_b64	[$d0+2], $d0;
	atomicnoret_st_rlx_wave_equiv(255)_b64	[$d0+2], $d0;
	// 
	// Next sample
	// 
	atomicnoret_st_global_rlx_wave_b64	[&GlobalVar], $d0;
	// 
	atomicnoret_st_global_screl_wave_b64	[&GlobalVar], $d0;
	atomicnoret_st_global_rlx_wg_b64	[&GlobalVar], $d0;
	atomicnoret_st_global_rlx_agent_b64	[&GlobalVar], $d0;
	atomicnoret_st_global_rlx_system_b64	[&GlobalVar], $d0;
	atomicnoret_st_global_rlx_wave_b64	[&GlobalSig64], $d0;
	atomicnoret_st_global_rlx_wave_b64	[$d0+2], $d0;
	atomicnoret_st_global_rlx_wave_b64	[$d0+3], $d0;
	atomicnoret_st_global_rlx_wave_b64	[$d0+5], $d0;
	atomicnoret_st_global_rlx_wave_b64	[$d0+6], $d0;
	atomicnoret_st_global_rlx_wave_b64	[0], $d0;
	atomicnoret_st_global_rlx_wave_b64	[&GlobalVar], -1;
	atomicnoret_st_global_rlx_wave_b64	[&GlobalVar], WAVESIZE;
	atomicnoret_st_global_rlx_wave_equiv(1)_b64	[&GlobalVar], $d0;
	atomicnoret_st_global_rlx_wave_equiv(2)_b64	[&GlobalVar], $d0;
	atomicnoret_st_global_rlx_wave_equiv(255)_b64	[&GlobalVar], $d0;
	// 
	// Next sample
	// 
	atomicnoret_st_group_rlx_wave_b64	[&GroupVar], $d0;
	// 
	atomicnoret_st_group_screl_wave_b64	[&GroupVar], $d0;
	atomicnoret_st_group_rlx_wg_b64	[&GroupVar], $d0;
	atomicnoret_st_group_rlx_wave_b64	[$s0+2], $d0;
	atomicnoret_st_group_rlx_wave_b64	[$s0+3], $d0;
	atomicnoret_st_group_rlx_wave_b64	[$s0+5], $d0;
	atomicnoret_st_group_rlx_wave_b64	[$s0+6], $d0;
	atomicnoret_st_group_rlx_wave_b64	[0], $d0;
	atomicnoret_st_group_rlx_wave_b64	[&GroupVar], -1;
	atomicnoret_st_group_rlx_wave_b64	[&GroupVar], WAVESIZE;
	atomicnoret_st_group_rlx_wave_equiv(1)_b64	[&GroupVar], $d0;
	atomicnoret_st_group_rlx_wave_equiv(2)_b64	[&GroupVar], $d0;
	atomicnoret_st_group_rlx_wave_equiv(255)_b64	[&GroupVar], $d0;
	// 
	// Next sample
	// 
	atomicnoret_xor_rlx_wave_b64	[$d0+2], $d0;
	// 
	atomicnoret_xor_scacq_wave_b64	[$d0+2], $d0;
	atomicnoret_xor_screl_wave_b64	[$d0+2], $d0;
	atomicnoret_xor_scar_wave_b64	[$d0+2], $d0;
	atomicnoret_xor_rlx_wg_b64	[$d0+2], $d0;
	atomicnoret_xor_rlx_agent_b64	[$d0+2], $d0;
	atomicnoret_xor_rlx_system_b64	[$d0+2], $d0;
	atomicnoret_xor_rlx_wave_b64	[$d0+3], $d0;
	atomicnoret_xor_rlx_wave_b64	[$d0+5], $d0;
	atomicnoret_xor_rlx_wave_b64	[$d0+6], $d0;
	atomicnoret_xor_rlx_wave_b64	[0], $d0;
	atomicnoret_xor_rlx_wave_b64	[$d0+2], -1;
	atomicnoret_xor_rlx_wave_b64	[$d0+2], WAVESIZE;
	atomicnoret_xor_rlx_wave_equiv(1)_b64	[$d0+2], $d0;
	atomicnoret_xor_rlx_wave_equiv(2)_b64	[$d0+2], $d0;
	atomicnoret_xor_rlx_wave_equiv(255)_b64	[$d0+2], $d0;
	// 
	// Next sample
	// 
	atomicnoret_xor_global_rlx_wave_b64	[&GlobalVar], $d0;
	// 
	atomicnoret_xor_global_scacq_wave_b64	[&GlobalVar], $d0;
	atomicnoret_xor_global_screl_wave_b64	[&GlobalVar], $d0;
	atomicnoret_xor_global_scar_wave_b64	[&GlobalVar], $d0;
	atomicnoret_xor_global_rlx_wg_b64	[&GlobalVar], $d0;
	atomicnoret_xor_global_rlx_agent_b64	[&GlobalVar], $d0;
	atomicnoret_xor_global_rlx_system_b64	[&GlobalVar], $d0;
	atomicnoret_xor_global_rlx_wave_b64	[&GlobalSig64], $d0;
	atomicnoret_xor_global_rlx_wave_b64	[$d0+2], $d0;
	atomicnoret_xor_global_rlx_wave_b64	[$d0+3], $d0;
	atomicnoret_xor_global_rlx_wave_b64	[$d0+5], $d0;
	atomicnoret_xor_global_rlx_wave_b64	[$d0+6], $d0;
	atomicnoret_xor_global_rlx_wave_b64	[0], $d0;
	atomicnoret_xor_global_rlx_wave_b64	[&GlobalVar], -1;
	atomicnoret_xor_global_rlx_wave_b64	[&GlobalVar], WAVESIZE;
	atomicnoret_xor_global_rlx_wave_equiv(1)_b64	[&GlobalVar], $d0;
	atomicnoret_xor_global_rlx_wave_equiv(2)_b64	[&GlobalVar], $d0;
	atomicnoret_xor_global_rlx_wave_equiv(255)_b64	[&GlobalVar], $d0;
	// 
	// Next sample
	// 
	atomicnoret_xor_group_rlx_wave_b64	[&GroupVar], $d0;
	// 
	atomicnoret_xor_group_scacq_wave_b64	[&GroupVar], $d0;
	atomicnoret_xor_group_screl_wave_b64	[&GroupVar], $d0;
	atomicnoret_xor_group_scar_wave_b64	[&GroupVar], $d0;
	atomicnoret_xor_group_rlx_wg_b64	[&GroupVar], $d0;
	atomicnoret_xor_group_rlx_wave_b64	[$s0+2], $d0;
	atomicnoret_xor_group_rlx_wave_b64	[$s0+3], $d0;
	atomicnoret_xor_group_rlx_wave_b64	[$s0+5], $d0;
	atomicnoret_xor_group_rlx_wave_b64	[$s0+6], $d0;
	atomicnoret_xor_group_rlx_wave_b64	[0], $d0;
	atomicnoret_xor_group_rlx_wave_b64	[&GroupVar], -1;
	atomicnoret_xor_group_rlx_wave_b64	[&GroupVar], WAVESIZE;
	atomicnoret_xor_group_rlx_wave_equiv(1)_b64	[&GroupVar], $d0;
	atomicnoret_xor_group_rlx_wave_equiv(2)_b64	[&GroupVar], $d0;
	atomicnoret_xor_group_rlx_wave_equiv(255)_b64	[&GroupVar], $d0;
	// 
	// Next sample
	// 
	signal_add_rlx_u64_sig64	$d0, $d0, $d0;
	// 
	signal_add_scacq_u64_sig64	$d0, $d0, $d0;
	signal_add_screl_u64_sig64	$d0, $d0, $d0;
	signal_add_scar_u64_sig64	$d0, $d0, $d0;
	signal_add_rlx_u64_sig64	$d0, $d0, -1;
	signal_add_rlx_u64_sig64	$d0, $d0, WAVESIZE;
	// 
	// Next sample
	// 
	signal_sub_rlx_u64_sig64	$d0, $d0, $d0;
	// 
	signal_sub_scacq_u64_sig64	$d0, $d0, $d0;
	signal_sub_screl_u64_sig64	$d0, $d0, $d0;
	signal_sub_scar_u64_sig64	$d0, $d0, $d0;
	signal_sub_rlx_u64_sig64	$d0, $d0, -1;
	signal_sub_rlx_u64_sig64	$d0, $d0, WAVESIZE;
	// 
	// Next sample
	// 
	signal_add_rlx_s64_sig64	$d0, $d0, $d0;
	// 
	signal_add_scacq_s64_sig64	$d0, $d0, $d0;
	signal_add_screl_s64_sig64	$d0, $d0, $d0;
	signal_add_scar_s64_sig64	$d0, $d0, $d0;
	signal_add_rlx_s64_sig64	$d0, $d0, -1;
	signal_add_rlx_s64_sig64	$d0, $d0, WAVESIZE;
	// 
	// Next sample
	// 
	signal_sub_rlx_s64_sig64	$d0, $d0, $d0;
	// 
	signal_sub_scacq_s64_sig64	$d0, $d0, $d0;
	signal_sub_screl_s64_sig64	$d0, $d0, $d0;
	signal_sub_scar_s64_sig64	$d0, $d0, $d0;
	signal_sub_rlx_s64_sig64	$d0, $d0, -1;
	signal_sub_rlx_s64_sig64	$d0, $d0, WAVESIZE;
	// 
	// Next sample
	// 
	signal_wait_eq_rlx_s64_sig64	$d0, $d0, $d0;
	// 
	signal_wait_eq_scacq_s64_sig64	$d0, $d0, $d0;
	signal_wait_eq_rlx_s64_sig64	$d0, $d0, -1;
	signal_wait_eq_rlx_s64_sig64	$d0, $d0, WAVESIZE;
	// 
	// Next sample
	// 
	signal_wait_ne_rlx_s64_sig64	$d0, $d0, $d0;
	// 
	signal_wait_ne_scacq_s64_sig64	$d0, $d0, $d0;
	signal_wait_ne_rlx_s64_sig64	$d0, $d0, -1;
	signal_wait_ne_rlx_s64_sig64	$d0, $d0, WAVESIZE;
	// 
	// Next sample
	// 
	signal_wait_lt_rlx_s64_sig64	$d0, $d0, $d0;
	// 
	signal_wait_lt_scacq_s64_sig64	$d0, $d0, $d0;
	signal_wait_lt_rlx_s64_sig64	$d0, $d0, -1;
	signal_wait_lt_rlx_s64_sig64	$d0, $d0, WAVESIZE;
	// 
	// Next sample
	// 
	signal_wait_gte_rlx_s64_sig64	$d0, $d0, $d0;
	// 
	signal_wait_gte_scacq_s64_sig64	$d0, $d0, $d0;
	signal_wait_gte_rlx_s64_sig64	$d0, $d0, -1;
	signal_wait_gte_rlx_s64_sig64	$d0, $d0, WAVESIZE;
	// 
	// Next sample
	// 
	signal_waittimeout_eq_rlx_s64_sig64	$d0, $d0, $d0, $d0;
	// 
	signal_waittimeout_eq_scacq_s64_sig64	$d0, $d0, $d0, $d0;
	signal_waittimeout_eq_rlx_s64_sig64	$d0, $d0, -1, $d0;
	signal_waittimeout_eq_rlx_s64_sig64	$d0, $d0, WAVESIZE, $d0;
	signal_waittimeout_eq_rlx_s64_sig64	$d0, $d0, $d0, -1;
	signal_waittimeout_eq_rlx_s64_sig64	$d0, $d0, $d0, WAVESIZE;
	// 
	// Next sample
	// 
	signal_waittimeout_ne_rlx_s64_sig64	$d0, $d0, $d0, $d0;
	// 
	signal_waittimeout_ne_scacq_s64_sig64	$d0, $d0, $d0, $d0;
	signal_waittimeout_ne_rlx_s64_sig64	$d0, $d0, -1, $d0;
	signal_waittimeout_ne_rlx_s64_sig64	$d0, $d0, WAVESIZE, $d0;
	signal_waittimeout_ne_rlx_s64_sig64	$d0, $d0, $d0, -1;
	signal_waittimeout_ne_rlx_s64_sig64	$d0, $d0, $d0, WAVESIZE;
	// 
	// Next sample
	// 
	signal_waittimeout_lt_rlx_s64_sig64	$d0, $d0, $d0, $d0;
	// 
	signal_waittimeout_lt_scacq_s64_sig64	$d0, $d0, $d0, $d0;
	signal_waittimeout_lt_rlx_s64_sig64	$d0, $d0, -1, $d0;
	signal_waittimeout_lt_rlx_s64_sig64	$d0, $d0, WAVESIZE, $d0;
	signal_waittimeout_lt_rlx_s64_sig64	$d0, $d0, $d0, -1;
	signal_waittimeout_lt_rlx_s64_sig64	$d0, $d0, $d0, WAVESIZE;
	// 
	// Next sample
	// 
	signal_waittimeout_gte_rlx_s64_sig64	$d0, $d0, $d0, $d0;
	// 
	signal_waittimeout_gte_scacq_s64_sig64	$d0, $d0, $d0, $d0;
	signal_waittimeout_gte_rlx_s64_sig64	$d0, $d0, -1, $d0;
	signal_waittimeout_gte_rlx_s64_sig64	$d0, $d0, WAVESIZE, $d0;
	signal_waittimeout_gte_rlx_s64_sig64	$d0, $d0, $d0, -1;
	signal_waittimeout_gte_rlx_s64_sig64	$d0, $d0, $d0, WAVESIZE;
	// 
	// Next sample
	// 
	signal_and_rlx_b64_sig64	$d0, $d0, $d0;
	// 
	signal_and_scacq_b64_sig64	$d0, $d0, $d0;
	signal_and_screl_b64_sig64	$d0, $d0, $d0;
	signal_and_scar_b64_sig64	$d0, $d0, $d0;
	signal_and_rlx_b64_sig64	$d0, $d0, -1;
	signal_and_rlx_b64_sig64	$d0, $d0, WAVESIZE;
	// 
	// Next sample
	// 
	signal_cas_rlx_b64_sig64	$d0, $d0, $d0, $d0;
	// 
	signal_cas_scacq_b64_sig64	$d0, $d0, $d0, $d0;
	signal_cas_screl_b64_sig64	$d0, $d0, $d0, $d0;
	signal_cas_scar_b64_sig64	$d0, $d0, $d0, $d0;
	signal_cas_rlx_b64_sig64	$d0, $d0, -1, $d0;
	signal_cas_rlx_b64_sig64	$d0, $d0, WAVESIZE, $d0;
	signal_cas_rlx_b64_sig64	$d0, $d0, $d0, -1;
	signal_cas_rlx_b64_sig64	$d0, $d0, $d0, WAVESIZE;
	// 
	// Next sample
	// 
	signal_exch_rlx_b64_sig64	$d0, $d0, $d0;
	// 
	signal_exch_scacq_b64_sig64	$d0, $d0, $d0;
	signal_exch_screl_b64_sig64	$d0, $d0, $d0;
	signal_exch_scar_b64_sig64	$d0, $d0, $d0;
	signal_exch_rlx_b64_sig64	$d0, $d0, -1;
	signal_exch_rlx_b64_sig64	$d0, $d0, WAVESIZE;
	// 
	// Next sample
	// 
	signal_ld_rlx_b64_sig64	$d0, $d0;
	// 
	signal_ld_scacq_b64_sig64	$d0, $d0;
	// 
	// Next sample
	// 
	signal_or_rlx_b64_sig64	$d0, $d0, $d0;
	// 
	signal_or_scacq_b64_sig64	$d0, $d0, $d0;
	signal_or_screl_b64_sig64	$d0, $d0, $d0;
	signal_or_scar_b64_sig64	$d0, $d0, $d0;
	signal_or_rlx_b64_sig64	$d0, $d0, -1;
	signal_or_rlx_b64_sig64	$d0, $d0, WAVESIZE;
	// 
	// Next sample
	// 
	signal_xor_rlx_b64_sig64	$d0, $d0, $d0;
	// 
	signal_xor_scacq_b64_sig64	$d0, $d0, $d0;
	signal_xor_screl_b64_sig64	$d0, $d0, $d0;
	signal_xor_scar_b64_sig64	$d0, $d0, $d0;
	signal_xor_rlx_b64_sig64	$d0, $d0, -1;
	signal_xor_rlx_b64_sig64	$d0, $d0, WAVESIZE;
	// 
	// Next sample
	// 
	signalnoret_add_rlx_u64_sig64	$d0, $d0;
	// 
	signalnoret_add_scacq_u64_sig64	$d0, $d0;
	signalnoret_add_screl_u64_sig64	$d0, $d0;
	signalnoret_add_scar_u64_sig64	$d0, $d0;
	signalnoret_add_rlx_u64_sig64	$d0, -1;
	signalnoret_add_rlx_u64_sig64	$d0, WAVESIZE;
	// 
	// Next sample
	// 
	signalnoret_sub_rlx_u64_sig64	$d0, $d0;
	// 
	signalnoret_sub_scacq_u64_sig64	$d0, $d0;
	signalnoret_sub_screl_u64_sig64	$d0, $d0;
	signalnoret_sub_scar_u64_sig64	$d0, $d0;
	signalnoret_sub_rlx_u64_sig64	$d0, -1;
	signalnoret_sub_rlx_u64_sig64	$d0, WAVESIZE;
	// 
	// Next sample
	// 
	signalnoret_add_rlx_s64_sig64	$d0, $d0;
	// 
	signalnoret_add_scacq_s64_sig64	$d0, $d0;
	signalnoret_add_screl_s64_sig64	$d0, $d0;
	signalnoret_add_scar_s64_sig64	$d0, $d0;
	signalnoret_add_rlx_s64_sig64	$d0, -1;
	signalnoret_add_rlx_s64_sig64	$d0, WAVESIZE;
	// 
	// Next sample
	// 
	signalnoret_sub_rlx_s64_sig64	$d0, $d0;
	// 
	signalnoret_sub_scacq_s64_sig64	$d0, $d0;
	signalnoret_sub_screl_s64_sig64	$d0, $d0;
	signalnoret_sub_scar_s64_sig64	$d0, $d0;
	signalnoret_sub_rlx_s64_sig64	$d0, -1;
	signalnoret_sub_rlx_s64_sig64	$d0, WAVESIZE;
	// 
	// Next sample
	// 
	signalnoret_and_rlx_b64_sig64	$d0, $d0;
	// 
	signalnoret_and_scacq_b64_sig64	$d0, $d0;
	signalnoret_and_screl_b64_sig64	$d0, $d0;
	signalnoret_and_scar_b64_sig64	$d0, $d0;
	signalnoret_and_rlx_b64_sig64	$d0, -1;
	signalnoret_and_rlx_b64_sig64	$d0, WAVESIZE;
	// 
	// Next sample
	// 
	signalnoret_or_rlx_b64_sig64	$d0, $d0;
	// 
	signalnoret_or_scacq_b64_sig64	$d0, $d0;
	signalnoret_or_screl_b64_sig64	$d0, $d0;
	signalnoret_or_scar_b64_sig64	$d0, $d0;
	signalnoret_or_rlx_b64_sig64	$d0, -1;
	signalnoret_or_rlx_b64_sig64	$d0, WAVESIZE;
	// 
	// Next sample
	// 
	signalnoret_st_rlx_b64_sig64	$d0, $d0;
	// 
	signalnoret_st_screl_b64_sig64	$d0, $d0;
	signalnoret_st_rlx_b64_sig64	$d0, -1;
	signalnoret_st_rlx_b64_sig64	$d0, WAVESIZE;
	// 
	// Next sample
	// 
	signalnoret_xor_rlx_b64_sig64	$d0, $d0;
	// 
	signalnoret_xor_scacq_b64_sig64	$d0, $d0;
	signalnoret_xor_screl_b64_sig64	$d0, $d0;
	signalnoret_xor_scar_b64_sig64	$d0, $d0;
	signalnoret_xor_rlx_b64_sig64	$d0, -1;
	signalnoret_xor_rlx_b64_sig64	$d0, WAVESIZE;
	// 
	// Next sample
	// 
	br	@TestLabel;

@TestLabel:

@aux_label_3:
	// 
	// 
	// Next sample
	// 
	cbr_b1	$c0, @TestLabel;
	// 
	cbr_b1	1, @TestLabel;
	cbr_b1	WAVESIZE, @TestLabel;
	cbr_width(2)_b1	$c0, @TestLabel;
	cbr_width(4)_b1	$c0, @TestLabel;
	cbr_width(8)_b1	$c0, @TestLabel;
	cbr_width(16)_b1	$c0, @TestLabel;
	cbr_width(32)_b1	$c0, @TestLabel;
	cbr_width(64)_b1	$c0, @TestLabel;
	cbr_width(128)_b1	$c0, @TestLabel;
	cbr_width(256)_b1	$c0, @TestLabel;
	cbr_width(512)_b1	$c0, @TestLabel;
	cbr_width(1024)_b1	$c0, @TestLabel;
	cbr_width(2048)_b1	$c0, @TestLabel;
	cbr_width(4096)_b1	$c0, @TestLabel;
	cbr_width(8192)_b1	$c0, @TestLabel;
	cbr_width(16384)_b1	$c0, @TestLabel;
	cbr_width(32768)_b1	$c0, @TestLabel;
	cbr_width(65536)_b1	$c0, @TestLabel;
	cbr_width(131072)_b1	$c0, @TestLabel;
	cbr_width(262144)_b1	$c0, @TestLabel;
	cbr_width(524288)_b1	$c0, @TestLabel;
	cbr_width(1048576)_b1	$c0, @TestLabel;
	cbr_width(2097152)_b1	$c0, @TestLabel;
	cbr_width(4194304)_b1	$c0, @TestLabel;
	cbr_width(8388608)_b1	$c0, @TestLabel;
	cbr_width(16777216)_b1	$c0, @TestLabel;
	cbr_width(33554432)_b1	$c0, @TestLabel;
	cbr_width(67108864)_b1	$c0, @TestLabel;
	cbr_width(134217728)_b1	$c0, @TestLabel;
	cbr_width(268435456)_b1	$c0, @TestLabel;
	cbr_width(536870912)_b1	$c0, @TestLabel;
	cbr_width(1073741824)_b1	$c0, @TestLabel;
	cbr_width(2147483648)_b1	$c0, @TestLabel;
	cbr_width(WAVESIZE)_b1	$c0, @TestLabel;
	cbr_width(all)_b1	$c0, @TestLabel;
	// 
	// Next sample
	// 
	barrier_width(1);
	// 
	barrier_width(2);
	barrier_width(4);
	barrier_width(8);
	barrier_width(16);
	barrier_width(32);
	barrier_width(64);
	barrier_width(128);
	barrier_width(256);
	barrier_width(512);
	barrier_width(1024);
	barrier_width(2048);
	barrier_width(4096);
	barrier_width(8192);
	barrier_width(16384);
	barrier_width(32768);
	barrier_width(65536);
	barrier_width(131072);
	barrier_width(262144);
	barrier_width(524288);
	barrier_width(1048576);
	barrier_width(2097152);
	barrier_width(4194304);
	barrier_width(8388608);
	barrier_width(16777216);
	barrier_width(33554432);
	barrier_width(67108864);
	barrier_width(134217728);
	barrier_width(268435456);
	barrier_width(536870912);
	barrier_width(1073741824);
	barrier_width(2147483648);
	barrier_width(WAVESIZE);
	barrier;
	// 
	// Next sample
	// 
	wavebarrier;
	// 
	// 
	// Next sample
	// 
	initfbar	$s0;
	// 
	initfbar	&Fbarrier;
	// 
	// Next sample
	// 
	releasefbar	$s0;
	// 
	releasefbar	&Fbarrier;
	// 
	// Next sample
	// 
	joinfbar_width(1)	$s0;
	// 
	joinfbar_width(1)	&Fbarrier;
	joinfbar_width(2)	$s0;
	joinfbar_width(4)	$s0;
	joinfbar_width(8)	$s0;
	joinfbar_width(16)	$s0;
	joinfbar_width(32)	$s0;
	joinfbar_width(64)	$s0;
	joinfbar_width(128)	$s0;
	joinfbar_width(256)	$s0;
	joinfbar_width(512)	$s0;
	joinfbar_width(1024)	$s0;
	joinfbar_width(2048)	$s0;
	joinfbar_width(4096)	$s0;
	joinfbar_width(8192)	$s0;
	joinfbar_width(16384)	$s0;
	joinfbar_width(32768)	$s0;
	joinfbar_width(65536)	$s0;
	joinfbar_width(131072)	$s0;
	joinfbar_width(262144)	$s0;
	joinfbar_width(524288)	$s0;
	joinfbar_width(1048576)	$s0;
	joinfbar_width(2097152)	$s0;
	joinfbar_width(4194304)	$s0;
	joinfbar_width(8388608)	$s0;
	joinfbar_width(16777216)	$s0;
	joinfbar_width(33554432)	$s0;
	joinfbar_width(67108864)	$s0;
	joinfbar_width(134217728)	$s0;
	joinfbar_width(268435456)	$s0;
	joinfbar_width(536870912)	$s0;
	joinfbar_width(1073741824)	$s0;
	joinfbar_width(2147483648)	$s0;
	joinfbar	$s0;
	joinfbar_width(all)	$s0;
	// 
	// Next sample
	// 
	leavefbar_width(1)	$s0;
	// 
	leavefbar_width(1)	&Fbarrier;
	leavefbar_width(2)	$s0;
	leavefbar_width(4)	$s0;
	leavefbar_width(8)	$s0;
	leavefbar_width(16)	$s0;
	leavefbar_width(32)	$s0;
	leavefbar_width(64)	$s0;
	leavefbar_width(128)	$s0;
	leavefbar_width(256)	$s0;
	leavefbar_width(512)	$s0;
	leavefbar_width(1024)	$s0;
	leavefbar_width(2048)	$s0;
	leavefbar_width(4096)	$s0;
	leavefbar_width(8192)	$s0;
	leavefbar_width(16384)	$s0;
	leavefbar_width(32768)	$s0;
	leavefbar_width(65536)	$s0;
	leavefbar_width(131072)	$s0;
	leavefbar_width(262144)	$s0;
	leavefbar_width(524288)	$s0;
	leavefbar_width(1048576)	$s0;
	leavefbar_width(2097152)	$s0;
	leavefbar_width(4194304)	$s0;
	leavefbar_width(8388608)	$s0;
	leavefbar_width(16777216)	$s0;
	leavefbar_width(33554432)	$s0;
	leavefbar_width(67108864)	$s0;
	leavefbar_width(134217728)	$s0;
	leavefbar_width(268435456)	$s0;
	leavefbar_width(536870912)	$s0;
	leavefbar_width(1073741824)	$s0;
	leavefbar_width(2147483648)	$s0;
	leavefbar	$s0;
	leavefbar_width(all)	$s0;
	// 
	// Next sample
	// 
	waitfbar_width(1)	$s0;
	// 
	waitfbar_width(1)	&Fbarrier;
	waitfbar_width(2)	$s0;
	waitfbar_width(4)	$s0;
	waitfbar_width(8)	$s0;
	waitfbar_width(16)	$s0;
	waitfbar_width(32)	$s0;
	waitfbar_width(64)	$s0;
	waitfbar_width(128)	$s0;
	waitfbar_width(256)	$s0;
	waitfbar_width(512)	$s0;
	waitfbar_width(1024)	$s0;
	waitfbar_width(2048)	$s0;
	waitfbar_width(4096)	$s0;
	waitfbar_width(8192)	$s0;
	waitfbar_width(16384)	$s0;
	waitfbar_width(32768)	$s0;
	waitfbar_width(65536)	$s0;
	waitfbar_width(131072)	$s0;
	waitfbar_width(262144)	$s0;
	waitfbar_width(524288)	$s0;
	waitfbar_width(1048576)	$s0;
	waitfbar_width(2097152)	$s0;
	waitfbar_width(4194304)	$s0;
	waitfbar_width(8388608)	$s0;
	waitfbar_width(16777216)	$s0;
	waitfbar_width(33554432)	$s0;
	waitfbar_width(67108864)	$s0;
	waitfbar_width(134217728)	$s0;
	waitfbar_width(268435456)	$s0;
	waitfbar_width(536870912)	$s0;
	waitfbar_width(1073741824)	$s0;
	waitfbar_width(2147483648)	$s0;
	waitfbar	$s0;
	waitfbar_width(all)	$s0;
	// 
	// Next sample
	// 
	arrivefbar_width(1)	$s0;
	// 
	arrivefbar_width(1)	&Fbarrier;
	arrivefbar_width(2)	$s0;
	arrivefbar_width(4)	$s0;
	arrivefbar_width(8)	$s0;
	arrivefbar_width(16)	$s0;
	arrivefbar_width(32)	$s0;
	arrivefbar_width(64)	$s0;
	arrivefbar_width(128)	$s0;
	arrivefbar_width(256)	$s0;
	arrivefbar_width(512)	$s0;
	arrivefbar_width(1024)	$s0;
	arrivefbar_width(2048)	$s0;
	arrivefbar_width(4096)	$s0;
	arrivefbar_width(8192)	$s0;
	arrivefbar_width(16384)	$s0;
	arrivefbar_width(32768)	$s0;
	arrivefbar_width(65536)	$s0;
	arrivefbar_width(131072)	$s0;
	arrivefbar_width(262144)	$s0;
	arrivefbar_width(524288)	$s0;
	arrivefbar_width(1048576)	$s0;
	arrivefbar_width(2097152)	$s0;
	arrivefbar_width(4194304)	$s0;
	arrivefbar_width(8388608)	$s0;
	arrivefbar_width(16777216)	$s0;
	arrivefbar_width(33554432)	$s0;
	arrivefbar_width(67108864)	$s0;
	arrivefbar_width(134217728)	$s0;
	arrivefbar_width(268435456)	$s0;
	arrivefbar_width(536870912)	$s0;
	arrivefbar_width(1073741824)	$s0;
	arrivefbar_width(2147483648)	$s0;
	arrivefbar	$s0;
	arrivefbar_width(all)	$s0;
	// 
	// Next sample
	// 
	ldf_u32	$s0, &Fbarrier;
	// 
	// 
	// Next sample
	// 
	memfence_scacq_wave;
	// 
	memfence_screl_wave;
	memfence_scar_wave;
	// 
	// Next sample
	// 
	memfence_scacq_wg;
	// 
	memfence_screl_wg;
	memfence_scar_wg;
	// 
	// Next sample
	// 
	memfence_scacq_agent;
	// 
	memfence_screl_agent;
	memfence_scar_agent;
	// 
	// Next sample
	// 
	memfence_scacq_system;
	// 
	memfence_screl_system;
	memfence_scar_system;
	// 
	// Next sample
	// 
	activelanemask_v4_b64_b1	($d0, $d1, $d2, $d3), $c0;
	// 
	activelanemask_v4_b64_b1	($d0, $d1, $d2, $d3), 1;
	activelanemask_v4_b64_b1	($d0, $d1, $d2, $d3), WAVESIZE;
	activelanemask_v4_width(2)_b64_b1	($d0, $d1, $d2, $d3), $c0;
	activelanemask_v4_width(4)_b64_b1	($d0, $d1, $d2, $d3), $c0;
	activelanemask_v4_width(8)_b64_b1	($d0, $d1, $d2, $d3), $c0;
	activelanemask_v4_width(16)_b64_b1	($d0, $d1, $d2, $d3), $c0;
	activelanemask_v4_width(32)_b64_b1	($d0, $d1, $d2, $d3), $c0;
	activelanemask_v4_width(64)_b64_b1	($d0, $d1, $d2, $d3), $c0;
	activelanemask_v4_width(128)_b64_b1	($d0, $d1, $d2, $d3), $c0;
	activelanemask_v4_width(256)_b64_b1	($d0, $d1, $d2, $d3), $c0;
	activelanemask_v4_width(512)_b64_b1	($d0, $d1, $d2, $d3), $c0;
	activelanemask_v4_width(1024)_b64_b1	($d0, $d1, $d2, $d3), $c0;
	activelanemask_v4_width(2048)_b64_b1	($d0, $d1, $d2, $d3), $c0;
	activelanemask_v4_width(4096)_b64_b1	($d0, $d1, $d2, $d3), $c0;
	activelanemask_v4_width(8192)_b64_b1	($d0, $d1, $d2, $d3), $c0;
	activelanemask_v4_width(16384)_b64_b1	($d0, $d1, $d2, $d3), $c0;
	activelanemask_v4_width(32768)_b64_b1	($d0, $d1, $d2, $d3), $c0;
	activelanemask_v4_width(65536)_b64_b1	($d0, $d1, $d2, $d3), $c0;
	activelanemask_v4_width(131072)_b64_b1	($d0, $d1, $d2, $d3), $c0;
	activelanemask_v4_width(262144)_b64_b1	($d0, $d1, $d2, $d3), $c0;
	activelanemask_v4_width(524288)_b64_b1	($d0, $d1, $d2, $d3), $c0;
	activelanemask_v4_width(1048576)_b64_b1	($d0, $d1, $d2, $d3), $c0;
	activelanemask_v4_width(2097152)_b64_b1	($d0, $d1, $d2, $d3), $c0;
	activelanemask_v4_width(4194304)_b64_b1	($d0, $d1, $d2, $d3), $c0;
	activelanemask_v4_width(8388608)_b64_b1	($d0, $d1, $d2, $d3), $c0;
	activelanemask_v4_width(16777216)_b64_b1	($d0, $d1, $d2, $d3), $c0;
	activelanemask_v4_width(33554432)_b64_b1	($d0, $d1, $d2, $d3), $c0;
	activelanemask_v4_width(67108864)_b64_b1	($d0, $d1, $d2, $d3), $c0;
	activelanemask_v4_width(134217728)_b64_b1	($d0, $d1, $d2, $d3), $c0;
	activelanemask_v4_width(268435456)_b64_b1	($d0, $d1, $d2, $d3), $c0;
	activelanemask_v4_width(536870912)_b64_b1	($d0, $d1, $d2, $d3), $c0;
	activelanemask_v4_width(1073741824)_b64_b1	($d0, $d1, $d2, $d3), $c0;
	activelanemask_v4_width(2147483648)_b64_b1	($d0, $d1, $d2, $d3), $c0;
	activelanemask_v4_width(WAVESIZE)_b64_b1	($d0, $d1, $d2, $d3), $c0;
	activelanemask_v4_width(all)_b64_b1	($d0, $d1, $d2, $d3), $c0;
	// 
	// Next sample
	// 
	activelanecount_u32_b1	$s0, $c0;
	// 
	activelanecount_u32_b1	$s0, 1;
	activelanecount_u32_b1	$s0, WAVESIZE;
	activelanecount_width(2)_u32_b1	$s0, $c0;
	activelanecount_width(4)_u32_b1	$s0, $c0;
	activelanecount_width(8)_u32_b1	$s0, $c0;
	activelanecount_width(16)_u32_b1	$s0, $c0;
	activelanecount_width(32)_u32_b1	$s0, $c0;
	activelanecount_width(64)_u32_b1	$s0, $c0;
	activelanecount_width(128)_u32_b1	$s0, $c0;
	activelanecount_width(256)_u32_b1	$s0, $c0;
	activelanecount_width(512)_u32_b1	$s0, $c0;
	activelanecount_width(1024)_u32_b1	$s0, $c0;
	activelanecount_width(2048)_u32_b1	$s0, $c0;
	activelanecount_width(4096)_u32_b1	$s0, $c0;
	activelanecount_width(8192)_u32_b1	$s0, $c0;
	activelanecount_width(16384)_u32_b1	$s0, $c0;
	activelanecount_width(32768)_u32_b1	$s0, $c0;
	activelanecount_width(65536)_u32_b1	$s0, $c0;
	activelanecount_width(131072)_u32_b1	$s0, $c0;
	activelanecount_width(262144)_u32_b1	$s0, $c0;
	activelanecount_width(524288)_u32_b1	$s0, $c0;
	activelanecount_width(1048576)_u32_b1	$s0, $c0;
	activelanecount_width(2097152)_u32_b1	$s0, $c0;
	activelanecount_width(4194304)_u32_b1	$s0, $c0;
	activelanecount_width(8388608)_u32_b1	$s0, $c0;
	activelanecount_width(16777216)_u32_b1	$s0, $c0;
	activelanecount_width(33554432)_u32_b1	$s0, $c0;
	activelanecount_width(67108864)_u32_b1	$s0, $c0;
	activelanecount_width(134217728)_u32_b1	$s0, $c0;
	activelanecount_width(268435456)_u32_b1	$s0, $c0;
	activelanecount_width(536870912)_u32_b1	$s0, $c0;
	activelanecount_width(1073741824)_u32_b1	$s0, $c0;
	activelanecount_width(2147483648)_u32_b1	$s0, $c0;
	activelanecount_width(WAVESIZE)_u32_b1	$s0, $c0;
	activelanecount_width(all)_u32_b1	$s0, $c0;
	// 
	// Next sample
	// 
	activelaneid_u32	$s0;
	// 
	activelaneid_width(2)_u32	$s0;
	activelaneid_width(4)_u32	$s0;
	activelaneid_width(8)_u32	$s0;
	activelaneid_width(16)_u32	$s0;
	activelaneid_width(32)_u32	$s0;
	activelaneid_width(64)_u32	$s0;
	activelaneid_width(128)_u32	$s0;
	activelaneid_width(256)_u32	$s0;
	activelaneid_width(512)_u32	$s0;
	activelaneid_width(1024)_u32	$s0;
	activelaneid_width(2048)_u32	$s0;
	activelaneid_width(4096)_u32	$s0;
	activelaneid_width(8192)_u32	$s0;
	activelaneid_width(16384)_u32	$s0;
	activelaneid_width(32768)_u32	$s0;
	activelaneid_width(65536)_u32	$s0;
	activelaneid_width(131072)_u32	$s0;
	activelaneid_width(262144)_u32	$s0;
	activelaneid_width(524288)_u32	$s0;
	activelaneid_width(1048576)_u32	$s0;
	activelaneid_width(2097152)_u32	$s0;
	activelaneid_width(4194304)_u32	$s0;
	activelaneid_width(8388608)_u32	$s0;
	activelaneid_width(16777216)_u32	$s0;
	activelaneid_width(33554432)_u32	$s0;
	activelaneid_width(67108864)_u32	$s0;
	activelaneid_width(134217728)_u32	$s0;
	activelaneid_width(268435456)_u32	$s0;
	activelaneid_width(536870912)_u32	$s0;
	activelaneid_width(1073741824)_u32	$s0;
	activelaneid_width(2147483648)_u32	$s0;
	activelaneid_width(WAVESIZE)_u32	$s0;
	activelaneid_width(all)_u32	$s0;
	// 
	// Next sample
	// 
	activelanepermute_b1	$c0, $c0, $s0, $c0, $c0;
	// 
	activelanepermute_b1	$c0, 1, $s0, $c0, $c0;
	activelanepermute_b1	$c0, WAVESIZE, $s0, $c0, $c0;
	activelanepermute_b1	$c0, $c0, -1, $c0, $c0;
	activelanepermute_b1	$c0, $c0, WAVESIZE, $c0, $c0;
	activelanepermute_b1	$c0, $c0, $s0, 1, $c0;
	activelanepermute_b1	$c0, $c0, $s0, WAVESIZE, $c0;
	activelanepermute_b1	$c0, $c0, $s0, $c0, 1;
	activelanepermute_b1	$c0, $c0, $s0, $c0, WAVESIZE;
	activelanepermute_width(2)_b1	$c0, $c0, $s0, $c0, $c0;
	activelanepermute_width(4)_b1	$c0, $c0, $s0, $c0, $c0;
	activelanepermute_width(8)_b1	$c0, $c0, $s0, $c0, $c0;
	activelanepermute_width(16)_b1	$c0, $c0, $s0, $c0, $c0;
	activelanepermute_width(32)_b1	$c0, $c0, $s0, $c0, $c0;
	activelanepermute_width(64)_b1	$c0, $c0, $s0, $c0, $c0;
	activelanepermute_width(128)_b1	$c0, $c0, $s0, $c0, $c0;
	activelanepermute_width(256)_b1	$c0, $c0, $s0, $c0, $c0;
	activelanepermute_width(512)_b1	$c0, $c0, $s0, $c0, $c0;
	activelanepermute_width(1024)_b1	$c0, $c0, $s0, $c0, $c0;
	activelanepermute_width(2048)_b1	$c0, $c0, $s0, $c0, $c0;
	activelanepermute_width(4096)_b1	$c0, $c0, $s0, $c0, $c0;
	activelanepermute_width(8192)_b1	$c0, $c0, $s0, $c0, $c0;
	activelanepermute_width(16384)_b1	$c0, $c0, $s0, $c0, $c0;
	activelanepermute_width(32768)_b1	$c0, $c0, $s0, $c0, $c0;
	activelanepermute_width(65536)_b1	$c0, $c0, $s0, $c0, $c0;
	activelanepermute_width(131072)_b1	$c0, $c0, $s0, $c0, $c0;
	activelanepermute_width(262144)_b1	$c0, $c0, $s0, $c0, $c0;
	activelanepermute_width(524288)_b1	$c0, $c0, $s0, $c0, $c0;
	activelanepermute_width(1048576)_b1	$c0, $c0, $s0, $c0, $c0;
	activelanepermute_width(2097152)_b1	$c0, $c0, $s0, $c0, $c0;
	activelanepermute_width(4194304)_b1	$c0, $c0, $s0, $c0, $c0;
	activelanepermute_width(8388608)_b1	$c0, $c0, $s0, $c0, $c0;
	activelanepermute_width(16777216)_b1	$c0, $c0, $s0, $c0, $c0;
	activelanepermute_width(33554432)_b1	$c0, $c0, $s0, $c0, $c0;
	activelanepermute_width(67108864)_b1	$c0, $c0, $s0, $c0, $c0;
	activelanepermute_width(134217728)_b1	$c0, $c0, $s0, $c0, $c0;
	activelanepermute_width(268435456)_b1	$c0, $c0, $s0, $c0, $c0;
	activelanepermute_width(536870912)_b1	$c0, $c0, $s0, $c0, $c0;
	activelanepermute_width(1073741824)_b1	$c0, $c0, $s0, $c0, $c0;
	activelanepermute_width(2147483648)_b1	$c0, $c0, $s0, $c0, $c0;
	activelanepermute_width(WAVESIZE)_b1	$c0, $c0, $s0, $c0, $c0;
	activelanepermute_width(all)_b1	$c0, $c0, $s0, $c0, $c0;
	// 
	// Next sample
	// 
	activelanepermute_b32	$s0, $s0, $s0, $s0, $c0;
	// 
	activelanepermute_b32	$s0, -1, $s0, $s0, $c0;
	activelanepermute_b32	$s0, WAVESIZE, $s0, $s0, $c0;
	activelanepermute_b32	$s0, $s0, -1, $s0, $c0;
	activelanepermute_b32	$s0, $s0, WAVESIZE, $s0, $c0;
	activelanepermute_b32	$s0, $s0, $s0, -1, $c0;
	activelanepermute_b32	$s0, $s0, $s0, WAVESIZE, $c0;
	activelanepermute_b32	$s0, $s0, $s0, $s0, 1;
	activelanepermute_b32	$s0, $s0, $s0, $s0, WAVESIZE;
	activelanepermute_width(2)_b32	$s0, $s0, $s0, $s0, $c0;
	activelanepermute_width(4)_b32	$s0, $s0, $s0, $s0, $c0;
	activelanepermute_width(8)_b32	$s0, $s0, $s0, $s0, $c0;
	activelanepermute_width(16)_b32	$s0, $s0, $s0, $s0, $c0;
	activelanepermute_width(32)_b32	$s0, $s0, $s0, $s0, $c0;
	activelanepermute_width(64)_b32	$s0, $s0, $s0, $s0, $c0;
	activelanepermute_width(128)_b32	$s0, $s0, $s0, $s0, $c0;
	activelanepermute_width(256)_b32	$s0, $s0, $s0, $s0, $c0;
	activelanepermute_width(512)_b32	$s0, $s0, $s0, $s0, $c0;
	activelanepermute_width(1024)_b32	$s0, $s0, $s0, $s0, $c0;
	activelanepermute_width(2048)_b32	$s0, $s0, $s0, $s0, $c0;
	activelanepermute_width(4096)_b32	$s0, $s0, $s0, $s0, $c0;
	activelanepermute_width(8192)_b32	$s0, $s0, $s0, $s0, $c0;
	activelanepermute_width(16384)_b32	$s0, $s0, $s0, $s0, $c0;
	activelanepermute_width(32768)_b32	$s0, $s0, $s0, $s0, $c0;
	activelanepermute_width(65536)_b32	$s0, $s0, $s0, $s0, $c0;
	activelanepermute_width(131072)_b32	$s0, $s0, $s0, $s0, $c0;
	activelanepermute_width(262144)_b32	$s0, $s0, $s0, $s0, $c0;
	activelanepermute_width(524288)_b32	$s0, $s0, $s0, $s0, $c0;
	activelanepermute_width(1048576)_b32	$s0, $s0, $s0, $s0, $c0;
	activelanepermute_width(2097152)_b32	$s0, $s0, $s0, $s0, $c0;
	activelanepermute_width(4194304)_b32	$s0, $s0, $s0, $s0, $c0;
	activelanepermute_width(8388608)_b32	$s0, $s0, $s0, $s0, $c0;
	activelanepermute_width(16777216)_b32	$s0, $s0, $s0, $s0, $c0;
	activelanepermute_width(33554432)_b32	$s0, $s0, $s0, $s0, $c0;
	activelanepermute_width(67108864)_b32	$s0, $s0, $s0, $s0, $c0;
	activelanepermute_width(134217728)_b32	$s0, $s0, $s0, $s0, $c0;
	activelanepermute_width(268435456)_b32	$s0, $s0, $s0, $s0, $c0;
	activelanepermute_width(536870912)_b32	$s0, $s0, $s0, $s0, $c0;
	activelanepermute_width(1073741824)_b32	$s0, $s0, $s0, $s0, $c0;
	activelanepermute_width(2147483648)_b32	$s0, $s0, $s0, $s0, $c0;
	activelanepermute_width(WAVESIZE)_b32	$s0, $s0, $s0, $s0, $c0;
	activelanepermute_width(all)_b32	$s0, $s0, $s0, $s0, $c0;
	// 
	// Next sample
	// 
	activelanepermute_b64	$d0, $d0, $s0, $d0, $c0;
	// 
	activelanepermute_b64	$d0, -1, $s0, $d0, $c0;
	activelanepermute_b64	$d0, WAVESIZE, $s0, $d0, $c0;
	activelanepermute_b64	$d0, $d0, -1, $d0, $c0;
	activelanepermute_b64	$d0, $d0, WAVESIZE, $d0, $c0;
	activelanepermute_b64	$d0, $d0, $s0, -1, $c0;
	activelanepermute_b64	$d0, $d0, $s0, WAVESIZE, $c0;
	activelanepermute_b64	$d0, $d0, $s0, $d0, 1;
	activelanepermute_b64	$d0, $d0, $s0, $d0, WAVESIZE;
	activelanepermute_width(2)_b64	$d0, $d0, $s0, $d0, $c0;
	activelanepermute_width(4)_b64	$d0, $d0, $s0, $d0, $c0;
	activelanepermute_width(8)_b64	$d0, $d0, $s0, $d0, $c0;
	activelanepermute_width(16)_b64	$d0, $d0, $s0, $d0, $c0;
	activelanepermute_width(32)_b64	$d0, $d0, $s0, $d0, $c0;
	activelanepermute_width(64)_b64	$d0, $d0, $s0, $d0, $c0;
	activelanepermute_width(128)_b64	$d0, $d0, $s0, $d0, $c0;
	activelanepermute_width(256)_b64	$d0, $d0, $s0, $d0, $c0;
	activelanepermute_width(512)_b64	$d0, $d0, $s0, $d0, $c0;
	activelanepermute_width(1024)_b64	$d0, $d0, $s0, $d0, $c0;
	activelanepermute_width(2048)_b64	$d0, $d0, $s0, $d0, $c0;
	activelanepermute_width(4096)_b64	$d0, $d0, $s0, $d0, $c0;
	activelanepermute_width(8192)_b64	$d0, $d0, $s0, $d0, $c0;
	activelanepermute_width(16384)_b64	$d0, $d0, $s0, $d0, $c0;
	activelanepermute_width(32768)_b64	$d0, $d0, $s0, $d0, $c0;
	activelanepermute_width(65536)_b64	$d0, $d0, $s0, $d0, $c0;
	activelanepermute_width(131072)_b64	$d0, $d0, $s0, $d0, $c0;
	activelanepermute_width(262144)_b64	$d0, $d0, $s0, $d0, $c0;
	activelanepermute_width(524288)_b64	$d0, $d0, $s0, $d0, $c0;
	activelanepermute_width(1048576)_b64	$d0, $d0, $s0, $d0, $c0;
	activelanepermute_width(2097152)_b64	$d0, $d0, $s0, $d0, $c0;
	activelanepermute_width(4194304)_b64	$d0, $d0, $s0, $d0, $c0;
	activelanepermute_width(8388608)_b64	$d0, $d0, $s0, $d0, $c0;
	activelanepermute_width(16777216)_b64	$d0, $d0, $s0, $d0, $c0;
	activelanepermute_width(33554432)_b64	$d0, $d0, $s0, $d0, $c0;
	activelanepermute_width(67108864)_b64	$d0, $d0, $s0, $d0, $c0;
	activelanepermute_width(134217728)_b64	$d0, $d0, $s0, $d0, $c0;
	activelanepermute_width(268435456)_b64	$d0, $d0, $s0, $d0, $c0;
	activelanepermute_width(536870912)_b64	$d0, $d0, $s0, $d0, $c0;
	activelanepermute_width(1073741824)_b64	$d0, $d0, $s0, $d0, $c0;
	activelanepermute_width(2147483648)_b64	$d0, $d0, $s0, $d0, $c0;
	activelanepermute_width(WAVESIZE)_b64	$d0, $d0, $s0, $d0, $c0;
	activelanepermute_width(all)_b64	$d0, $d0, $s0, $d0, $c0;
	// 
	// Next sample
	// 
	activelanepermute_b128	$q0, $q0, $s0, $q0, $c0;
	// 
	activelanepermute_b128	$q0, u8x16(0,0,0,0,0,0,0,0,107,240,55,174,50,95,28,113), $s0, $q0, $c0;
	activelanepermute_b128	$q0, $q0, -1, $q0, $c0;
	activelanepermute_b128	$q0, $q0, WAVESIZE, $q0, $c0;
	activelanepermute_b128	$q0, $q0, $s0, u8x16(0,0,0,0,0,0,0,0,107,240,55,174,50,95,28,113), $c0;
	activelanepermute_b128	$q0, $q0, $s0, $q0, 1;
	activelanepermute_b128	$q0, $q0, $s0, $q0, WAVESIZE;
	activelanepermute_width(2)_b128	$q0, $q0, $s0, $q0, $c0;
	activelanepermute_width(4)_b128	$q0, $q0, $s0, $q0, $c0;
	activelanepermute_width(8)_b128	$q0, $q0, $s0, $q0, $c0;
	activelanepermute_width(16)_b128	$q0, $q0, $s0, $q0, $c0;
	activelanepermute_width(32)_b128	$q0, $q0, $s0, $q0, $c0;
	activelanepermute_width(64)_b128	$q0, $q0, $s0, $q0, $c0;
	activelanepermute_width(128)_b128	$q0, $q0, $s0, $q0, $c0;
	activelanepermute_width(256)_b128	$q0, $q0, $s0, $q0, $c0;
	activelanepermute_width(512)_b128	$q0, $q0, $s0, $q0, $c0;
	activelanepermute_width(1024)_b128	$q0, $q0, $s0, $q0, $c0;
	activelanepermute_width(2048)_b128	$q0, $q0, $s0, $q0, $c0;
	activelanepermute_width(4096)_b128	$q0, $q0, $s0, $q0, $c0;
	activelanepermute_width(8192)_b128	$q0, $q0, $s0, $q0, $c0;
	activelanepermute_width(16384)_b128	$q0, $q0, $s0, $q0, $c0;
	activelanepermute_width(32768)_b128	$q0, $q0, $s0, $q0, $c0;
	activelanepermute_width(65536)_b128	$q0, $q0, $s0, $q0, $c0;
	activelanepermute_width(131072)_b128	$q0, $q0, $s0, $q0, $c0;
	activelanepermute_width(262144)_b128	$q0, $q0, $s0, $q0, $c0;
	activelanepermute_width(524288)_b128	$q0, $q0, $s0, $q0, $c0;
	activelanepermute_width(1048576)_b128	$q0, $q0, $s0, $q0, $c0;
	activelanepermute_width(2097152)_b128	$q0, $q0, $s0, $q0, $c0;
	activelanepermute_width(4194304)_b128	$q0, $q0, $s0, $q0, $c0;
	activelanepermute_width(8388608)_b128	$q0, $q0, $s0, $q0, $c0;
	activelanepermute_width(16777216)_b128	$q0, $q0, $s0, $q0, $c0;
	activelanepermute_width(33554432)_b128	$q0, $q0, $s0, $q0, $c0;
	activelanepermute_width(67108864)_b128	$q0, $q0, $s0, $q0, $c0;
	activelanepermute_width(134217728)_b128	$q0, $q0, $s0, $q0, $c0;
	activelanepermute_width(268435456)_b128	$q0, $q0, $s0, $q0, $c0;
	activelanepermute_width(536870912)_b128	$q0, $q0, $s0, $q0, $c0;
	activelanepermute_width(1073741824)_b128	$q0, $q0, $s0, $q0, $c0;
	activelanepermute_width(2147483648)_b128	$q0, $q0, $s0, $q0, $c0;
	activelanepermute_width(WAVESIZE)_b128	$q0, $q0, $s0, $q0, $c0;
	activelanepermute_width(all)_b128	$q0, $q0, $s0, $q0, $c0;
	// 
	// Next sample
	// 
	ret;

@aux_label_4:
	// 
	// 
	// Next sample
	// 
	alloca_u32	$s0, $s0;
	// 
	alloca_u32	$s0, -1;
	alloca_u32	$s0, WAVESIZE;
	alloca_align(2)_u32	$s0, $s0;
	alloca_align(4)_u32	$s0, $s0;
	alloca_align(8)_u32	$s0, $s0;
	alloca_align(16)_u32	$s0, $s0;
	alloca_align(32)_u32	$s0, $s0;
	alloca_align(64)_u32	$s0, $s0;
	alloca_align(128)_u32	$s0, $s0;
	alloca_align(256)_u32	$s0, $s0;
	// 
	// Next sample
	// 
	cuid_u32	$s0;
	// 
	// 
	// Next sample
	// 
	dim_u32	$s0;
	// 
	// 
	// Next sample
	// 
	currentworkitemflatid_u32	$s0;
	// 
	// 
	// Next sample
	// 
	getdetectexcept_u32	$s0;
	// 
	// 
	// Next sample
	// 
	laneid_u32	$s0;
	// 
	// 
	// Next sample
	// 
	maxcuid_u32	$s0;
	// 
	// 
	// Next sample
	// 
	maxwaveid_u32	$s0;
	// 
	// 
	// Next sample
	// 
	waveid_u32	$s0;
	// 
	// 
	// Next sample
	// 
	workitemflatid_u32	$s0;
	// 
	// 
	// Next sample
	// 
	groupbaseptr_u32	$s0;
	// 
	// 
	// Next sample
	// 
	workitemflatabsid_u32	$s0;
	// 
	// 
	// Next sample
	// 
	workitemflatabsid_u64	$d0;
	// 
	// 
	// Next sample
	// 
	currentworkgroupsize_u32	$s0, 0;
	// 
	currentworkgroupsize_u32	$s0, 1;
	currentworkgroupsize_u32	$s0, 2;
	// 
	// Next sample
	// 
	gridgroups_u32	$s0, 0;
	// 
	gridgroups_u32	$s0, 1;
	gridgroups_u32	$s0, 2;
	// 
	// Next sample
	// 
	workgroupid_u32	$s0, 0;
	// 
	workgroupid_u32	$s0, 1;
	workgroupid_u32	$s0, 2;
	// 
	// Next sample
	// 
	workgroupsize_u32	$s0, 0;
	// 
	workgroupsize_u32	$s0, 1;
	workgroupsize_u32	$s0, 2;
	// 
	// Next sample
	// 
	workitemid_u32	$s0, 0;
	// 
	workitemid_u32	$s0, 1;
	workitemid_u32	$s0, 2;
	// 
	// Next sample
	// 
	gridsize_u32	$s0, 0;
	// 
	gridsize_u32	$s0, 1;
	gridsize_u32	$s0, 2;
	// 
	// Next sample
	// 
	gridsize_u64	$d0, 0;
	// 
	gridsize_u64	$d0, 1;
	gridsize_u64	$d0, 2;
	// 
	// Next sample
	// 
	workitemabsid_u32	$s0, 0;
	// 
	workitemabsid_u32	$s0, 1;
	workitemabsid_u32	$s0, 2;
	// 
	// Next sample
	// 
	workitemabsid_u64	$d0, 0;
	// 
	workitemabsid_u64	$d0, 1;
	workitemabsid_u64	$d0, 2;
	// 
	// Next sample
	// 
	cleardetectexcept_u32	-1;
	// 
	// 
	// Next sample
	// 
	setdetectexcept_u32	-1;
	// 
	// 
	// Next sample
	// 
	clock_u64	$d0;
	// 
	// 
	// Next sample
	// 
	packetid_u64	$d0;
	// 
	// 
	// Next sample
	// 
	packetcompletionsig_sig64	$d0;
	// 
	// 
	// Next sample
	// 
	nop;
	// 
	// 
	// Next sample
	// 
	kernargbaseptr_u64	$d0;
	// 
	// 
	// Next sample
	// 
	nullptr_group_u32	$s0;
	// 
	// 
	// Next sample
	// 
	nullptr_private_u32	$s0;
	// 
	// 
	// Next sample
	// 
	nullptr_u64	$d0;
	// 
	// 
	// Next sample
	// 
	nullptr_kernarg_u64	$d0;
	// 
	// 
	// Next sample
	// 
	addqueuewriteindex_rlx_u64	$d0, [$d0+2], $d0;
	// 
	addqueuewriteindex_rlx_u64	$d0, [$d0+3], $d0;
	addqueuewriteindex_rlx_u64	$d0, [$d0+5], $d0;
	addqueuewriteindex_rlx_u64	$d0, [$d0+6], $d0;
	addqueuewriteindex_rlx_u64	$d0, [0], $d0;
	addqueuewriteindex_rlx_u64	$d0, [$d0+2], -1;
	addqueuewriteindex_rlx_u64	$d0, [$d0+2], WAVESIZE;
	addqueuewriteindex_scacq_u64	$d0, [$d0+2], $d0;
	addqueuewriteindex_screl_u64	$d0, [$d0+2], $d0;
	addqueuewriteindex_scar_u64	$d0, [$d0+2], $d0;
	// 
	// Next sample
	// 
	addqueuewriteindex_global_rlx_u64	$d0, [&GlobalVar], $d0;
	// 
	addqueuewriteindex_global_rlx_u64	$d0, [&GlobalSig64], $d0;
	addqueuewriteindex_global_rlx_u64	$d0, [$d0+2], $d0;
	addqueuewriteindex_global_rlx_u64	$d0, [$d0+3], $d0;
	addqueuewriteindex_global_rlx_u64	$d0, [$d0+5], $d0;
	addqueuewriteindex_global_rlx_u64	$d0, [$d0+6], $d0;
	addqueuewriteindex_global_rlx_u64	$d0, [0], $d0;
	addqueuewriteindex_global_rlx_u64	$d0, [&GlobalVar], -1;
	addqueuewriteindex_global_rlx_u64	$d0, [&GlobalVar], WAVESIZE;
	addqueuewriteindex_global_scacq_u64	$d0, [&GlobalVar], $d0;
	addqueuewriteindex_global_screl_u64	$d0, [&GlobalVar], $d0;
	addqueuewriteindex_global_scar_u64	$d0, [&GlobalVar], $d0;
	// 
	// Next sample
	// 
	casqueuewriteindex_rlx_u64	$d0, [$d0+2], $d0, $d0;
	// 
	casqueuewriteindex_rlx_u64	$d0, [$d0+3], $d0, $d0;
	casqueuewriteindex_rlx_u64	$d0, [$d0+5], $d0, $d0;
	casqueuewriteindex_rlx_u64	$d0, [$d0+6], $d0, $d0;
	casqueuewriteindex_rlx_u64	$d0, [0], $d0, $d0;
	casqueuewriteindex_rlx_u64	$d0, [$d0+2], -1, $d0;
	casqueuewriteindex_rlx_u64	$d0, [$d0+2], WAVESIZE, $d0;
	casqueuewriteindex_rlx_u64	$d0, [$d0+2], $d0, -1;
	casqueuewriteindex_rlx_u64	$d0, [$d0+2], $d0, WAVESIZE;
	casqueuewriteindex_scacq_u64	$d0, [$d0+2], $d0, $d0;
	casqueuewriteindex_screl_u64	$d0, [$d0+2], $d0, $d0;
	casqueuewriteindex_scar_u64	$d0, [$d0+2], $d0, $d0;
	// 
	// Next sample
	// 
	casqueuewriteindex_global_rlx_u64	$d0, [&GlobalVar], $d0, $d0;
	// 
	casqueuewriteindex_global_rlx_u64	$d0, [&GlobalSig64], $d0, $d0;
	casqueuewriteindex_global_rlx_u64	$d0, [$d0+2], $d0, $d0;
	casqueuewriteindex_global_rlx_u64	$d0, [$d0+3], $d0, $d0;
	casqueuewriteindex_global_rlx_u64	$d0, [$d0+5], $d0, $d0;
	casqueuewriteindex_global_rlx_u64	$d0, [$d0+6], $d0, $d0;
	casqueuewriteindex_global_rlx_u64	$d0, [0], $d0, $d0;
	casqueuewriteindex_global_rlx_u64	$d0, [&GlobalVar], -1, $d0;
	casqueuewriteindex_global_rlx_u64	$d0, [&GlobalVar], WAVESIZE, $d0;
	casqueuewriteindex_global_rlx_u64	$d0, [&GlobalVar], $d0, -1;
	casqueuewriteindex_global_rlx_u64	$d0, [&GlobalVar], $d0, WAVESIZE;
	casqueuewriteindex_global_scacq_u64	$d0, [&GlobalVar], $d0, $d0;
	casqueuewriteindex_global_screl_u64	$d0, [&GlobalVar], $d0, $d0;
	casqueuewriteindex_global_scar_u64	$d0, [&GlobalVar], $d0, $d0;
	// 
	// Next sample
	// 
	ldqueuereadindex_rlx_u64	$d0, [$d0+2];
	// 
	ldqueuereadindex_rlx_u64	$d0, [$d0+3];
	ldqueuereadindex_rlx_u64	$d0, [$d0+5];
	ldqueuereadindex_rlx_u64	$d0, [$d0+6];
	ldqueuereadindex_rlx_u64	$d0, [0];
	ldqueuereadindex_scacq_u64	$d0, [$d0+2];
	// 
	// Next sample
	// 
	ldqueuereadindex_global_rlx_u64	$d0, [&GlobalVar];
	// 
	ldqueuereadindex_global_rlx_u64	$d0, [&GlobalSig64];
	ldqueuereadindex_global_rlx_u64	$d0, [$d0+2];
	ldqueuereadindex_global_rlx_u64	$d0, [$d0+3];
	ldqueuereadindex_global_rlx_u64	$d0, [$d0+5];
	ldqueuereadindex_global_rlx_u64	$d0, [$d0+6];
	ldqueuereadindex_global_rlx_u64	$d0, [0];
	ldqueuereadindex_global_scacq_u64	$d0, [&GlobalVar];
	// 
	// Next sample
	// 
	ldqueuewriteindex_rlx_u64	$d0, [$d0+2];
	// 
	ldqueuewriteindex_rlx_u64	$d0, [$d0+3];
	ldqueuewriteindex_rlx_u64	$d0, [$d0+5];
	ldqueuewriteindex_rlx_u64	$d0, [$d0+6];
	ldqueuewriteindex_rlx_u64	$d0, [0];
	ldqueuewriteindex_scacq_u64	$d0, [$d0+2];
	// 
	// Next sample
	// 
	ldqueuewriteindex_global_rlx_u64	$d0, [&GlobalVar];
	// 
	ldqueuewriteindex_global_rlx_u64	$d0, [&GlobalSig64];
	ldqueuewriteindex_global_rlx_u64	$d0, [$d0+2];
	ldqueuewriteindex_global_rlx_u64	$d0, [$d0+3];
	ldqueuewriteindex_global_rlx_u64	$d0, [$d0+5];
	ldqueuewriteindex_global_rlx_u64	$d0, [$d0+6];
	ldqueuewriteindex_global_rlx_u64	$d0, [0];
	ldqueuewriteindex_global_scacq_u64	$d0, [&GlobalVar];
	// 
	// Next sample
	// 
	stqueuereadindex_rlx_u64	[$d0+2], $d0;
	// 
	stqueuereadindex_rlx_u64	[$d0+3], $d0;
	stqueuereadindex_rlx_u64	[$d0+5], $d0;
	stqueuereadindex_rlx_u64	[$d0+6], $d0;
	stqueuereadindex_rlx_u64	[0], $d0;
	stqueuereadindex_rlx_u64	[$d0+2], -1;
	stqueuereadindex_rlx_u64	[$d0+2], WAVESIZE;
	stqueuereadindex_screl_u64	[$d0+2], $d0;
	// 
	// Next sample
	// 
	stqueuereadindex_global_rlx_u64	[&GlobalVar], $d0;
	// 
	stqueuereadindex_global_rlx_u64	[&GlobalSig64], $d0;
	stqueuereadindex_global_rlx_u64	[$d0+2], $d0;
	stqueuereadindex_global_rlx_u64	[$d0+3], $d0;
	stqueuereadindex_global_rlx_u64	[$d0+5], $d0;
	stqueuereadindex_global_rlx_u64	[$d0+6], $d0;
	stqueuereadindex_global_rlx_u64	[0], $d0;
	stqueuereadindex_global_rlx_u64	[&GlobalVar], -1;
	stqueuereadindex_global_rlx_u64	[&GlobalVar], WAVESIZE;
	stqueuereadindex_global_screl_u64	[&GlobalVar], $d0;
	// 
	// Next sample
	// 
	stqueuewriteindex_rlx_u64	[$d0+2], $d0;
	// 
	stqueuewriteindex_rlx_u64	[$d0+3], $d0;
	stqueuewriteindex_rlx_u64	[$d0+5], $d0;
	stqueuewriteindex_rlx_u64	[$d0+6], $d0;
	stqueuewriteindex_rlx_u64	[0], $d0;
	stqueuewriteindex_rlx_u64	[$d0+2], -1;
	stqueuewriteindex_rlx_u64	[$d0+2], WAVESIZE;
	stqueuewriteindex_screl_u64	[$d0+2], $d0;
	// 
	// Next sample
	// 
	stqueuewriteindex_global_rlx_u64	[&GlobalVar], $d0;
	// 
	stqueuewriteindex_global_rlx_u64	[&GlobalSig64], $d0;
	stqueuewriteindex_global_rlx_u64	[$d0+2], $d0;
	stqueuewriteindex_global_rlx_u64	[$d0+3], $d0;
	stqueuewriteindex_global_rlx_u64	[$d0+5], $d0;
	stqueuewriteindex_global_rlx_u64	[$d0+6], $d0;
	stqueuewriteindex_global_rlx_u64	[0], $d0;
	stqueuewriteindex_global_rlx_u64	[&GlobalVar], -1;
	stqueuewriteindex_global_rlx_u64	[&GlobalVar], WAVESIZE;
	stqueuewriteindex_global_screl_u64	[&GlobalVar], $d0;
	// 
	// Next sample
	// 
	debugtrap_u32	$s0;
	// 
	debugtrap_u32	-1;
	debugtrap_u32	WAVESIZE;

@aux_label_5:
	ret;
};
