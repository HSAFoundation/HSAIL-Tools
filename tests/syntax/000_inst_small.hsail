module &moduleName:1:0:$full:$small:$near;

function &TestFunc()()
{
	ret;
};

function &TestFunc00()()
{
	ret;
};

function &TestFunc01()(arg_u8x8 %in_arg0)
{

@lab1:
	ret;
};

function &TestFunc12(arg_s32x2 %out_arg0)(
	arg_u32 %in_arg0,
	arg_u32 %in_arg1)
{

@lab1:
	ret;
};

function &TestCalls()()
{

@lab1:
	{
		call	&TestFunc () ();
	}
	{
		call	&TestFunc () ();
	}
	{
		scall_width(all)_u64	0 () () [&TestFunc];
	}
	{
		scall_width(2147483648)_u32	$s0 () () [&TestFunc, &TestFunc00];
	}
	{
		scall_width(all)_u64	WAVESIZE () () [&TestFunc, &TestFunc00];
	}
	{
		scall_width(WAVESIZE)_u64	1 () () [&TestFunc, &TestFunc00];
	}
	ret;
};
global_u64 &x;
group_u64 &g;
global_sig32 &signal;

kernel &TestKernel(kernarg_u32 %arg)
{
	lda_kernarg_u32	$s4, [%arg];
};

function &Testinst(arg_u32 %out)(arg_u32 %arg[4])
{
	//---------------------------------------
	global_b8 %globalVar[8];
	group_b8 %groupVar[8];
	private_b8 %privateVar[8];
	readonly_b8 %readonlyVar[8];
	spill_s32 %spill[8];
	private_b8 %stacklike[8];
	group_b8 %gs[8];
	global_u32 %g[3];
	//---------------------------------------
	lda_private_u32	$s4, [%stacklike];
	lda_global_u32	$s4, [%globalVar];
	lda_group_u32	$s4, [%groupVar];
	lda_private_u32	$s4, [%privateVar];
	lda_readonly_u32	$s4, [%readonlyVar];
	lda_group_u32	$s4, [%gs];
	lda_group_u32	$s4, [%gs][12];
	lda_group_u32	$s4, [%gs][$s0+12];
	lda_group_u32	$s4, [$s0+12];
	lda_group_u32	$s4, [$s0];
	lda_global_u32	$s1, [%g];
	lda_global_u32	$s1, [$s7+4];
	stof_group_u32_u32	$s0, $s1;
	stof_private_u32_u32	$s0, $s1;
	lda_global_u32	$s1, [$s1+8];
	lda_global_u32	$s1, [800];
	lda_global_u32	$s1, [$s1];
	//---------------------------------------

@lab:
	segmentp_group_b1_u32	$c1, $s0;
	//---------------------------------------
	stof_private_u32_u32	$s1, $s1;
	stof_group_u32_u32	$s1, $s1;
	ftos_group_u32_u32	$s1, $s2;
	ftos_private_u32_u32	$s1, $s2;
	//---------------------------------------
	ld_global_s8	$s1, [&x][$s3+4];
	ld_global_u8	$s1, [&x][$s3+4];
	ld_global_s16	$s1, [&x][$s3+4];
	ld_global_u16	$s1, [&x];
	ld_global_s32	$s1, [&x];
	ld_v2_s8	($s1, $s2), [$s3+4];
	ld_v2_u8	($s1, $s2), [$s3+4];
	ld_v2_s16	($s1, $s2), [$s3+4];
	ld_v2_u16	($s1, $s2), [$s3+4];
	ld_v2_s32	($s1, $s2), [$s3+4];
	ld_v2_u32	($s1, $s2), [$s3+4];
	ld_v4_s8	($s1, $s2, $s3, $s4), [$s3+4];
	ld_v4_u8	($s1, $s2, $s3, $s4), [$s3+4];
	ld_v4_s16	($s1, $s2, $s3, $s4), [$s3+4];
	ld_v4_u16	($s1, $s2, $s3, $s4), [$s3+4];
	ld_v4_s32	($s1, $s2, $s3, $s4), [$s3+4];
	ld_v4_u32	($s1, $s2, $s3, $s4), [$s3+4];
	// segment rules
	ld_global_f32	$s1, [&x][$s0];
	ld_arg_equiv(2)_f32	$s1, [%arg][$s0];
	ld_group_u32	$s0, [&g][$s0];
	// b128
	ld_global_b128	$q1, [$s0];
	// width
	ld_global_width(64)_f16	$s1, [$s0];
	ld_width(all)_f16	$s1, [$s0];
	ld_width(WAVESIZE)_f16	$s1, [$s0];
	ld_global_sig32	$d3, [&signal];
	// generic cases
	ld_global_s32	$s1, [&x];
	ld_global_f16	$s1, [&x];
	ld_global_f64	$d1, [&x];
	ld_global_f64	$d1, [&x];
	ld_global_f32	$s1, [&x];
	ld_global_f64	$d1, [&x];
	ld_global_equiv(2)_f32	$s1, [&x];
	ld_global_equiv(2)_f32	$s1, [$s3+4];
	ld_private_f32	$s1, [$s3+4];
	ld_spill_f32	$s1, [%spill][$s3+4];
	ld_f32	$s1, [$s3+4];
	ld_f32	$s1, [$s3+4];
	ld_v3_s32	($s1, $s7, $s6), [$s3+4];
	ld_v4_f32	($s1, $s7, $s6, $s2), [$s3+4];
	ld_v2_equiv(9)_f32	($s1, $s2), [$s3+4];
	ld_equiv(1)_u64	$d3, [$s4+32];
	ld_v2_equiv(1)_u64	($d1, $d2), [$s0+32];
	ld_v4_width(8)_f32	($s1, $s7, $s6, $s2), [$s3+4];
	ld_equiv(1)_u64	$d6, [128];
	ld_v2_equiv(9)_width(4)_f32	($s1, $s2), [$s3+4];
	ld_width(64)_u32	$s0, [$s2];
	ld_equiv(1)_width(1024)_u64	$d6, [128];
	ld_equiv(1)_width(all)_u64	$d6, [128];
	//---------------------------------------
	st_global_s8	$s1, [&x][$s3+4];
	st_global_u8	$s1, [&x][$s3+4];
	st_global_s16	$s1, [&x];
	st_global_u16	$s1, [&x];
	st_global_s32	$s1, [&x];
	st_global_u32	$s1, [&x];
	st_v2_s8	($s1, $s2), [$s3+4];
	st_v2_u8	($s1, $s2), [$s3+4];
	st_v2_s16	($s1, $s2), [$s3+4];
	st_v2_u16	($s1, $s2), [$s3+4];
	st_v2_s32	($s1, $s2), [$s3+4];
	st_v2_u32	($s1, $s2), [$s3+4];
	st_v4_s8	($s1, $s2, $s3, $s4), [$s3+4];
	st_v4_u8	($s1, $s2, $s3, $s4), [$s3+4];
	st_v4_s16	($s1, $s2, $s3, $s4), [$s3+4];
	st_v4_u16	($s1, $s2, $s3, $s4), [$s3+4];
	st_v4_s32	($s1, $s2, $s3, $s4), [$s3+4];
	st_v4_u32	($s1, $s2, $s3, $s4), [$s3+4];
	// segment rules
	st_global_f32	$s1, [&x][$s0];
	st_arg_equiv(2)_f32	$s1, [%out][$s0];
	st_group_u32	$s0, [&g][$s0];
	// b128
	st_global_b128	$q1, [$s0];
	// opaque refs
	st_global_sig32	$d3, [&signal];
	st_global_sig32	sig32(0), [&signal];
	st_global_f32	$s1, [&x];
	st_global_s32	$s1, [&x];
	st_global_f32	$s1, [&x];
	st_global_u8	$s1, [&x];
	st_global_u16	$s1, [&x];
	st_global_u32	$s1, [&x];
	st_global_f16	$s1, [&x];
	st_global_f64	$d1, [&x];
	st_global_f64	$d1, [&x];
	st_global_f32	$s1, [&x];
	st_global_f64	$d1, [&x];
	st_global_equiv(2)_f32	$s1, [&x];
	st_equiv(2)_f32	$s1, [$s3+4];
	st_private_f32	$s1, [$s3+4];
	st_global_f32	$s1, [$s3+4];
	st_spill_f32	$s1, [%spill][$s3+4];
	{
		arg_u8x8 %argX;
		st_arg_s64	$d1, [%argX][$s3-8];
		call	&TestFunc01 () (%argX);
	}
	st_f32	$s1, [$s3+4];
	st_f32	$s1, [$s3+4];
	st_v4_f32	($s1, $s1, $s6, $s2), [$s3+4];
	st_v2_equiv(9)_f32	($s1, $s2), [$s3+4];
	st_v3_s32	($s1, $s1, $s6), [$s3+4];
	st_group_u32	$s0, [$s2];
	st_equiv(1)_u64	$d3, [$s4+32];
	st_equiv(1)_u64	$d3, [$s4+32];
	st_v2_equiv(1)_u64	($d1, $d2), [$s0+32];
	st_equiv(1)_u64	$d6, [128];
	st_equiv(2)_f32	$s1, [4294967295];
	st_global_s8	$s1, [4294967295];
	st_private_f32	$s1, [4294967295];
	st_global_f32	$s1, [4294967295];
	st_group_u32	$s0, [4294967295];
	//---------------------------------------
	atomic_and_global_scar_system_b32	$s1, [&x][$s0], 23;
	atomic_and_group_rlx_wg_b32	$s1, [&g][$s0], 23;
	atomic_min_rlx_wg_u32	$s1, [$s7], 23;
	//---------------------------------------
	atomicnoret_and_global_scar_system_b32	[&x], 23;
	atomicnoret_and_group_scar_wave_b32	[&g][4], 23;
	atomicnoret_or_group_scar_wg_b32	[&g][$s0], 23;
	//---------------------------------------
	// signal + rlx
	signal_ld_rlx_b32_sig32	$s2, $d0;
	signal_and_rlx_b32_sig32	$s2, $d0, $s3;
	signal_or_rlx_b32_sig32	$s2, $d0, $s3;
	signal_xor_rlx_b32_sig32	$s2, $d0, $s3;
	signal_cas_rlx_b32_sig32	$s2, $d0, $s3, $s3;
	signal_exch_rlx_b32_sig32	$s2, $d0, $s3;
	signal_add_rlx_u32_sig32	$s2, $d0, $s3;
	signal_sub_rlx_u32_sig32	$s2, $d0, $s3;
	signal_wait_eq_rlx_s32_sig32	$s2, $d0, $s3;
	signal_wait_ne_rlx_s32_sig32	$s2, $d0, $s3;
	signal_wait_lt_rlx_s32_sig32	$s2, $d0, $s3;
	signal_wait_gte_rlx_s32_sig32	$s2, $d0, $s3;
	signal_waittimeout_eq_rlx_s32_sig32	$s2, $d0, $s3, $d4;
	signal_waittimeout_ne_rlx_s32_sig32	$s2, $d0, $s3, $d5;
	signal_waittimeout_lt_rlx_s32_sig32	$s2, $d0, $s3, $d4;
	signal_waittimeout_gte_rlx_s32_sig32	$s2, $d0, $s3, $d5;
	signalnoret_st_rlx_b32_sig32	$d0, $s2;
	signalnoret_and_rlx_b32_sig32	$d0, $s3;
	signalnoret_or_rlx_b32_sig32	$d0, $s3;
	signalnoret_xor_rlx_b32_sig32	$d0, $s3;
	signalnoret_add_rlx_s32_sig32	$d0, $s3;
	signalnoret_sub_rlx_u32_sig32	$d0, $s3;
	//---------------------------------------
	// signal + acq
	signal_ld_scacq_b32_sig32	$s2, $d0;
	signal_and_scacq_b32_sig32	$s2, $d0, WAVESIZE;
	signal_or_scacq_b32_sig32	$s2, $d0, WAVESIZE;
	signal_xor_scacq_b32_sig32	$s2, $d0, WAVESIZE;
	signal_cas_scacq_b32_sig32	$s2, $d0, WAVESIZE, 12;
	signal_exch_scacq_b32_sig32	$s2, $d0, WAVESIZE;
	signal_add_scacq_u32_sig32	$s2, $d0, WAVESIZE;
	signal_sub_scacq_s32_sig32	$s2, $d0, WAVESIZE;
	signal_wait_eq_scacq_s32_sig32	$s2, $d0, WAVESIZE;
	signal_wait_ne_scacq_s32_sig32	$s2, $d0, $s3;
	signal_wait_lt_scacq_s32_sig32	$s2, $d0, WAVESIZE;
	signal_wait_gte_scacq_s32_sig32	$s2, $d0, $s3;
	signal_waittimeout_eq_scacq_s32_sig32	$s2, $d0, WAVESIZE, $d4;
	signal_waittimeout_ne_scacq_s32_sig32	$s2, $d0, $s3, 1000;
	signal_waittimeout_lt_scacq_s32_sig32	$s2, $d0, WAVESIZE, $d4;
	signal_waittimeout_gte_scacq_s32_sig32	$s2, $d0, $s3, 1000;
	signalnoret_and_scacq_b32_sig32	$d0, WAVESIZE;
	signalnoret_or_scacq_b32_sig32	$d0, WAVESIZE;
	signalnoret_xor_scacq_b32_sig32	$d0, WAVESIZE;
	signalnoret_add_scacq_u32_sig32	$d0, WAVESIZE;
	signalnoret_sub_scacq_u32_sig32	$d0, WAVESIZE;
	//---------------------------------------
	// signal + rel
	signal_and_screl_b32_sig32	$s2, $d0, 23;
	signal_or_screl_b32_sig32	$s2, $d0, 23;
	signal_xor_screl_b32_sig32	$s2, $d0, 23;
	signal_cas_screl_b32_sig32	$s2, $d0, 23, 12;
	signal_exch_screl_b32_sig32	$s2, $d0, 23;
	signal_add_screl_s32_sig32	$s2, $d0, 23;
	signal_sub_screl_s32_sig32	$s2, $d0, 23;
	signalnoret_st_screl_b32_sig32	$d0, $s2;
	signalnoret_and_screl_b32_sig32	$d0, 23;
	signalnoret_or_screl_b32_sig32	$d0, 23;
	signalnoret_xor_screl_b32_sig32	$d0, 23;
	signalnoret_add_screl_u32_sig32	$d0, 23;
	signalnoret_sub_screl_u32_sig32	$d0, 23;
	//---------------------------------------
	// signal + ar
	//signal_ld_scar_b32_sig32 $s2, $d0;
	signal_and_scar_b32_sig32	$s2, $d0, 23;
	signal_or_scar_b32_sig32	$s2, $d0, 23;
	signal_xor_scar_b32_sig32	$s2, $d0, 23;
	signal_cas_scar_b32_sig32	$s2, $d0, 23, WAVESIZE;
	signal_exch_scar_b32_sig32	$s2, $d0, 23;
	signal_add_scar_s32_sig32	$s2, $d0, 23;
	signal_sub_scar_s32_sig32	$s2, $d0, 23;
	signalnoret_and_scar_b32_sig32	$d0, 23;
	signalnoret_or_scar_b32_sig32	$d0, 23;
	signalnoret_xor_scar_b32_sig32	$d0, 23;
	signalnoret_add_scar_s32_sig32	$d0, 23;
	signalnoret_sub_scar_u32_sig32	$d0, 23;
	//---------------------------------------
	cbr_b1	$c0, @label3;
	br	@label2;

@label:

@label1:

@label2:

@label3:
	//---------------------------------------
	nullptr_group_u32	$s0;
	nullptr_u32	$s1;
	packetcompletionsig_sig32	$d6;
	//---------------------------------------
	groupbaseptr_u32	$s2;
	kernargbaseptr_u32	$s2;
	//---------------------------------------
};
